{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nvar props = {\n  checkboxProps: {\n    type: Object\n  },\n  checked: {\n    type: Array,\n    \"default\": void 0\n  },\n  defaultChecked: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  data: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  direction: {\n    type: String,\n    \"default\": \"both\",\n    validator: function validator(val) {\n      if (!val) return true;\n      return [\"left\", \"right\", \"both\"].includes(val);\n    }\n  },\n  disabled: {\n    type: [Boolean, Array],\n    \"default\": void 0\n  },\n  empty: {\n    type: [String, Array, Function],\n    \"default\": \"\"\n  },\n  footer: {\n    type: [Array, Function]\n  },\n  keys: {\n    type: Object\n  },\n  operation: {\n    type: [Array, Function]\n  },\n  pagination: {\n    type: [Object, Array]\n  },\n  search: {\n    type: [Boolean, Object, Array],\n    \"default\": false\n  },\n  showCheckAll: {\n    type: [Boolean, Array],\n    \"default\": true\n  },\n  targetDraggable: Boolean,\n  targetSort: {\n    type: String,\n    \"default\": \"original\",\n    validator: function validator(val) {\n      if (!val) return true;\n      return [\"original\", \"push\", \"unshift\"].includes(val);\n    }\n  },\n  title: {\n    type: [Array, Function],\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  transferItem: {\n    type: Function\n  },\n  value: {\n    type: Array,\n    \"default\": void 0\n  },\n  modelValue: {\n    type: Array,\n    \"default\": void 0\n  },\n  defaultValue: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  onChange: Function,\n  onCheckedChange: Function,\n  onPageChange: Function,\n  onScroll: Function,\n  onSearch: Function\n};\nexport { props as default };","map":{"version":3,"names":["props","checkboxProps","type","Object","checked","Array","defaultChecked","_default","data","direction","String","validator","val","includes","disabled","Boolean","empty","Function","footer","keys","operation","pagination","search","showCheckAll","targetDraggable","targetSort","title","transferItem","value","modelValue","defaultValue","onChange","onCheckedChange","onPageChange","onScroll","onSearch"],"sources":["../../src/transfer/props.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdTransferProps } from './type';\nimport { PropType } from 'vue';\n\nexport default {\n  /** 用于控制复选框属性 */\n  checkboxProps: {\n    type: Object as PropType<TdTransferProps['checkboxProps']>,\n  },\n  /** 数据列表选中项 */\n  checked: {\n    type: Array as PropType<TdTransferProps['checked']>,\n    default: undefined as TdTransferProps['checked'],\n  },\n  /** 数据列表选中项，非受控属性 */\n  defaultChecked: {\n    type: Array as PropType<TdTransferProps['defaultChecked']>,\n    default: (): TdTransferProps['defaultChecked'] => [],\n  },\n  /** 全量数据 */\n  data: {\n    type: Array as PropType<TdTransferProps['data']>,\n    default: (): TdTransferProps['data'] => [],\n  },\n  /** 穿梭框可操作方向 */\n  direction: {\n    type: String as PropType<TdTransferProps['direction']>,\n    default: 'both' as TdTransferProps['direction'],\n    validator(val: TdTransferProps['direction']): boolean {\n      if (!val) return true;\n      return ['left', 'right', 'both'].includes(val);\n    },\n  },\n  /** 禁用全部操作：搜索、选中、移动、分页等。[源列表, 目标列表]，示例：[true, false] 或者 true */\n  disabled: {\n    type: [Boolean, Array] as PropType<TdTransferProps['disabled']>,\n    default: undefined,\n  },\n  /** 列表为空时呈现的内容。值类型为数组，则表示分别控制源列表和目标列表数据为空的呈现内容 */\n  empty: {\n    type: [String, Array, Function] as PropType<TdTransferProps['empty']>,\n    default: '' as TdTransferProps['empty'],\n  },\n  /** 穿梭框底部内容 */\n  footer: {\n    type: [Array, Function] as PropType<TdTransferProps['footer']>,\n  },\n  /** 用来定义 value / label / disabled 在 `data` 中对应的字段别名，示例：`{ label: 'text', value: 'id' }`，表示选项文本取 `text` 字段，选项值取 `id` 字段 */\n  keys: {\n    type: Object as PropType<TdTransferProps['keys']>,\n  },\n  /** 方向操作按钮。默认显示组件内置操作图标。自定义操作图标示例：['向左', '向右'] 或者 `[() => <i class='left' />, () => <i class='left' />]` 或者 `(h, direction) => direction === 'left' ? '《' : '》'` */\n  operation: {\n    type: [Array, Function] as PropType<TdTransferProps['operation']>,\n  },\n  /** 分页配置，值为空则不显示。具体 API 参考分页组件。值类型为数组，表示可分别控制源列表和目标列表分页组件 */\n  pagination: {\n    type: [Object, Array] as PropType<TdTransferProps['pagination']>,\n  },\n  /** 搜索框配置，值为 false 表示不显示搜索框；值为 true 表示显示默认搜索框；值类型为对象，用于透传 Props 到 Input 组件；值类型为数组，则分别表示控制两侧搜索框 */\n  search: {\n    type: [Boolean, Object, Array] as PropType<TdTransferProps['search']>,\n    default: false,\n  },\n  /** 是否显示全选，值类型为数组则表示分别控制源列表和目标列表 */\n  showCheckAll: {\n    type: [Boolean, Array] as PropType<TdTransferProps['showCheckAll']>,\n    default: true as TdTransferProps['showCheckAll'],\n  },\n  /** 是否允许通过拖拽对目标列表进行排序 */\n  targetDraggable: Boolean,\n  /** 目标数据列表排列顺序 */\n  targetSort: {\n    type: String as PropType<TdTransferProps['targetSort']>,\n    default: 'original' as TdTransferProps['targetSort'],\n    validator(val: TdTransferProps['targetSort']): boolean {\n      if (!val) return true;\n      return ['original', 'push', 'unshift'].includes(val);\n    },\n  },\n  /** 穿梭框标题，示例：['源列表', '目标列表'] 或者 `[() => 'A', () => 'B']` 或者 `({ type }) => type === 'source' ? '源' : '目标'` */\n  title: {\n    type: [Array, Function] as PropType<TdTransferProps['title']>,\n    default: (): TdTransferProps['title'] => [] as TdTransferProps['title'],\n  },\n  /** 自定义渲染节点 */\n  transferItem: {\n    type: Function as PropType<TdTransferProps['transferItem']>,\n  },\n  /** 目标数据列表数据 */\n  value: {\n    type: Array as PropType<TdTransferProps['value']>,\n    default: undefined as TdTransferProps['value'],\n  },\n  modelValue: {\n    type: Array as PropType<TdTransferProps['value']>,\n    default: undefined as TdTransferProps['value'],\n  },\n  /** 目标数据列表数据，非受控属性 */\n  defaultValue: {\n    type: Array as PropType<TdTransferProps['defaultValue']>,\n    default: (): TdTransferProps['defaultValue'] => [],\n  },\n  /** 数据列表发生变化时触发，`type` 值为 `source`，表示源列表移动到目标列表，值为 `target` 表示目标列表移动到源列表，movedValue 则表示被移动的选项 */\n  onChange: Function as PropType<TdTransferProps['onChange']>,\n  /** 源数据列表或目标数据列表的选中项发生变化时触发，`context.type` 可以区分触发来源是目标列表，还是源列表 */\n  onCheckedChange: Function as PropType<TdTransferProps['onCheckedChange']>,\n  /** 分页发生变化时触发 */\n  onPageChange: Function as PropType<TdTransferProps['onPageChange']>,\n  /** 列表滚动时触发，bottomDistance 表示元素滚动到底部的距离 */\n  onScroll: Function as PropType<TdTransferProps['onScroll']>,\n  /** 搜索时触发，options.query 表示用户输入的内容 */\n  onSearch: Function as PropType<TdTransferProps['onSearch']>,\n};\n"],"mappings":";;;;;;AASA,IAAAA,KAAA,GAAe;EAEbC,aAAe;IACbC,IAAM,EAAAC;GACR;EAEAC,OAAS;IACPF,IAAM,EAAAG,KAAA;IACN,WAAS;GACX;EAEAC,cAAgB;IACdJ,IAAM,EAAAG,KAAA;IACN,SAAS,WAATE,SAAA;MAAA,OAAkD,EAAC;IAAA;GACrD;EAEAC,IAAM;IACJN,IAAM,EAAAG,KAAA;IACN,SAAS,WAATE,SAAA;MAAA,OAAwC,EAAC;IAAA;GAC3C;EAEAE,SAAW;IACTP,IAAM,EAAAQ,MAAA;IACN,WAAS;IACTC,SAAA,WAAAA,UAAUC,GAA4C;MACpD,IAAI,CAACA,GAAA,EAAY;MACjB,OAAO,CAAC,MAAQ,WAAS,MAAM,EAAEC,QAAA,CAASD,GAAG;IAC/C;GACF;EAEAE,QAAU;IACRZ,IAAA,EAAM,CAACa,OAAA,EAASV,KAAK;IACrB,WAAS;GACX;EAEAW,KAAO;IACLd,IAAM,GAACQ,MAAQ,EAAAL,KAAA,EAAOY,QAAQ;IAC9B,SAAS;GACX;EAEAC,MAAQ;IACNhB,IAAA,EAAM,CAACG,KAAA,EAAOY,QAAQ;GACxB;EAEAE,IAAM;IACJjB,IAAM,EAAAC;GACR;EAEAiB,SAAW;IACTlB,IAAA,EAAM,CAACG,KAAA,EAAOY,QAAQ;GACxB;EAEAI,UAAY;IACVnB,IAAA,EAAM,CAACC,MAAA,EAAQE,KAAK;GACtB;EAEAiB,MAAQ;IACNpB,IAAM,GAACa,OAAS,EAAAZ,MAAA,EAAQE,KAAK;IAC7B,SAAS;GACX;EAEAkB,YAAc;IACZrB,IAAA,EAAM,CAACa,OAAA,EAASV,KAAK;IACrB,SAAS;GACX;EAEAmB,eAAiB,EAAAT,OAAA;EAEjBU,UAAY;IACVvB,IAAM,EAAAQ,MAAA;IACN,WAAS;IACTC,SAAA,WAAAA,UAAUC,GAA6C;MACrD,IAAI,CAACA,GAAA,EAAY;MACjB,OAAO,CAAC,UAAY,UAAQ,SAAS,EAAEC,QAAA,CAASD,GAAG;IACrD;GACF;EAEAc,KAAO;IACLxB,IAAA,EAAM,CAACG,KAAA,EAAOY,QAAQ;IACtB,SAAS,WAATV,SAAA;MAAA,OAAyC,EAAC;IAAA;GAC5C;EAEAoB,YAAc;IACZzB,IAAM,EAAAe;GACR;EAEAW,KAAO;IACL1B,IAAM,EAAAG,KAAA;IACN,WAAS;GACX;EACAwB,UAAY;IACV3B,IAAM,EAAAG,KAAA;IACN,WAAS;GACX;EAEAyB,YAAc;IACZ5B,IAAM,EAAAG,KAAA;IACN,SAAS,WAATE,SAAA;MAAA,OAAgD,EAAC;IAAA;GACnD;EAEAwB,QAAU,EAAAd,QAAA;EAEVe,eAAiB,EAAAf,QAAA;EAEjBgB,YAAc,EAAAhB,QAAA;EAEdiB,QAAU,EAAAjB,QAAA;EAEVkB,QAAU,EAAAlB;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}