{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { d as dayjs } from '../_chunks/dep-7f65fc46.mjs';\nimport { DAY_CN_MAP, FIRST_MONTH_OF_YEAR, LAST_MONTH_OF_YEAR } from './const.mjs';\nimport '../_chunks/dep-4659d73b.mjs';\nimport '../_chunks/dep-eca422c3.mjs';\nvar getDay = function getDay(dt) {\n  var day = dayjs(dt).day();\n  if (day === 0) {\n    day = 7;\n  }\n  return day;\n};\nvar getDayCn = function getDayCn(num) {\n  var re = \"\";\n  var numStr = num.toString();\n  if (numStr in DAY_CN_MAP) {\n    re = DAY_CN_MAP[numStr];\n  }\n  return re;\n};\nvar getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {\n  var re = 0;\n  var day = getDay(dt);\n  if (day >= firstDayOfWeek) {\n    re = day - firstDayOfWeek;\n  } else {\n    re = 7 - firstDayOfWeek + day;\n  }\n  return re;\n};\nvar addDate = function addDate(dt, days) {\n  var d = new Date(dt);\n  d.setDate(d.getDate() + days);\n  return d;\n};\nvar createYearCellsData = function createYearCellsData(props, state) {\n  var year = state.curSelectedYear,\n    curDate = state.curDate,\n    curDateList = state.curDateList;\n  var format = props.format,\n    multiple = props.multiple;\n  var monthsArr = [];\n  var _loop = function _loop(num) {\n    var date = new Date(year, num - 1);\n    var isCurrent = multiple ? !!curDateList.find(function (item) {\n      return item.year() === year && parseInt(item.format(\"M\"), 10) === num;\n    }) : curDate.year() === year && parseInt(curDate.format(\"M\"), 10) === num;\n    monthsArr.push({\n      mode: \"year\",\n      isCurrent: isCurrent,\n      date: date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true\n    });\n  };\n  for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {\n    _loop(num);\n  }\n  return monthsArr;\n};\nvar createMonthCellsData = function createMonthCellsData(props, state) {\n  var year = state.curSelectedYear,\n    month = state.curSelectedMonth,\n    firstDayOfWeek = state.realFirstDayOfWeek,\n    curDate = state.curDate,\n    curDateList = state.curDateList;\n  var format = props.format,\n    multiple = props.multiple;\n  var daysArr = [];\n  var begin = dayjs(\"\".concat(year, \"-\").concat(month)).startOf(\"month\").toDate();\n  var end = dayjs(dayjs(\"\".concat(year, \"-\").concat(month)).endOf(\"month\").format(\"YYYY-MM-DD\")).toDate();\n  var days = end.getDate();\n  var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);\n  var arr = [];\n  var num = 1;\n  var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {\n    var day = getDay(date);\n    return {\n      mode: \"month\",\n      belongTo: belongTo,\n      isCurrent: isCurrent,\n      day: day,\n      weekOrder: weekOrder,\n      date: date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true\n    };\n  };\n  var judgeIsCurrent = function judgeIsCurrent(date) {\n    var isCurrent = multiple ? !!curDateList.find(function (item) {\n      return item.isSame(dayjs(date));\n    }) : curDate.isSame(dayjs(date));\n    return isCurrent;\n  };\n  for (var i = 0; i < beginDateColIndex; i++) {\n    var date = addDate(begin, i - beginDateColIndex);\n    arr.push(createCellData(-1, false, date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  for (var _i = 0; _i < days; _i++) {\n    var _date = addDate(begin, _i);\n    var isCurrent = judgeIsCurrent(_date);\n    arr.push(createCellData(0, isCurrent, _date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  if (arr.length) {\n    var nextMonthCellNum = 7 - arr.length;\n    for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {\n      var _date2 = addDate(end, _i2 + 1);\n      arr.push(createCellData(1, false, _date2, num));\n    }\n    daysArr.push(arr);\n  }\n  return daysArr;\n};\nvar createDefaultCurDate = function createDefaultCurDate() {\n  return dayjs(dayjs().format(\"YYYY-MM-DD\"));\n};\nexport { addDate, createDefaultCurDate, createMonthCellsData, createYearCellsData, getCellColIndex, getDay, getDayCn };","map":{"version":3,"names":["getDay","dt","day","dayjs","getDayCn","num","re","numStr","toString","DAY_CN_MAP","getCellColIndex","firstDayOfWeek","addDate","days","d","Date","setDate","getDate","createYearCellsData","props","state","year","curSelectedYear","curDate","curDateList","format","multiple","monthsArr","_loop","date","isCurrent","find","item","parseInt","push","mode","formattedDate","filterDate","formattedFilterDate","isShowWeekend","FIRST_MONTH_OF_YEAR","LAST_MONTH_OF_YEAR","createMonthCellsData","month","curSelectedMonth","realFirstDayOfWeek","daysArr","begin","concat","startOf","toDate","end","endOf","beginDateColIndex","arr","createCellData","belongTo","weekOrder","judgeIsCurrent","isSame","i","length","_i","_date","nextMonthCellNum","_i2","_date2","createDefaultCurDate"],"sources":["../../src/calendar/utils.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\nimport { TdCalendarProps, CalendarCell } from './type';\nimport { CalendarState } from './interface';\n\n// 组件的一些常量\nimport { FIRST_MONTH_OF_YEAR, LAST_MONTH_OF_YEAR, DAY_CN_MAP } from './const';\n\n/**\n * 获取一个日期是周几（1~7）\n */\nexport const getDay = (dt: Date): number => {\n  let day = dayjs(dt).day();\n  if (day === 0) {\n    day = 7;\n  }\n  return day;\n};\n\n/**\n * 获取星期的中文\n * @param num 星期（1~7）\n */\nexport const getDayCn = (num: number): string => {\n  let re = '';\n  const numStr = num.toString();\n  if (numStr in DAY_CN_MAP) {\n    re = DAY_CN_MAP[numStr];\n  }\n  return re;\n};\n\n/**\n * 获取一个日期在日历上的列下标\n * @param firstDayOfWeek 周起始日（1~7）\n * @param dt\n */\nexport const getCellColIndex = (firstDayOfWeek: number, dt: Date): number => {\n  let re = 0;\n  const day = getDay(dt);\n  if (day >= firstDayOfWeek) {\n    re = day - firstDayOfWeek;\n  } else {\n    re = 7 - firstDayOfWeek + day;\n  }\n  return re;\n};\n/**\n * 返回日期+天数（天数可以负数）\n */\nexport const addDate = (dt: Date, days: number) => {\n  const d = new Date(dt);\n  d.setDate(d.getDate() + days);\n  return d;\n};\n\n/**\n * 创建月历单元格数据\n */\nexport const createYearCellsData = (props: TdCalendarProps, state: CalendarState): CalendarCell[] => {\n  const { curSelectedYear: year, curDate, curDateList } = state;\n  const { format, multiple } = props;\n\n  const monthsArr: CalendarCell[] = [];\n  for (let num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {\n    const date = new Date(year, num - 1);\n    const isCurrent = multiple\n      ? !!curDateList.find((item) => item.year() === year && parseInt(item.format('M'), 10) === num)\n      : curDate.year() === year && parseInt(curDate.format('M'), 10) === num;\n    monthsArr.push({\n      mode: 'year',\n      isCurrent,\n      date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true,\n    });\n  }\n\n  return monthsArr;\n};\n\n/**\n * 创建日历单元格数据\n */\nexport const createMonthCellsData = (props: TdCalendarProps, state: CalendarState): CalendarCell[][] => {\n  const {\n    curSelectedYear: year,\n    curSelectedMonth: month,\n    realFirstDayOfWeek: firstDayOfWeek,\n    curDate,\n    curDateList,\n  } = state;\n  const { format, multiple } = props;\n\n  const daysArr: CalendarCell[][] = [];\n  // 当前月份的开始日期\n  const begin: Date = dayjs(`${year}-${month}`).startOf('month').toDate();\n  // 当前月份的结束日期\n  const end: Date = dayjs(dayjs(`${year}-${month}`).endOf('month').format('YYYY-MM-DD')).toDate();\n  const days = end.getDate();\n\n  const beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);\n  let arr = [];\n  let num = 1;\n\n  const createCellData = (belongTo: number, isCurrent: boolean, date: Date, weekOrder: number): CalendarCell => {\n    const day = getDay(date);\n    return {\n      mode: 'month',\n      belongTo,\n      isCurrent,\n      day,\n      weekOrder,\n      date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true,\n    };\n  };\n\n  const judgeIsCurrent = (date: Date) => {\n    const isCurrent = multiple ? !!curDateList.find((item) => item.isSame(dayjs(date))) : curDate.isSame(dayjs(date));\n    return isCurrent;\n  };\n\n  // 添加上个月中和当前月第一天同一周的日期\n  for (let i = 0; i < beginDateColIndex; i++) {\n    const date = addDate(begin, i - beginDateColIndex);\n    arr.push(createCellData(-1, false, date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  for (let i = 0; i < days; i++) {\n    const date = addDate(begin, i);\n    const isCurrent = judgeIsCurrent(date);\n    arr.push(createCellData(0, isCurrent, date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  // 添加下个月中和当前月最后同一周的日期\n  if (arr.length) {\n    const nextMonthCellNum = 7 - arr.length;\n    for (let i = 0; i < nextMonthCellNum; i++) {\n      const date = addDate(end, i + 1);\n      arr.push(createCellData(1, false, date, num));\n    }\n    daysArr.push(arr);\n  }\n\n  return daysArr;\n};\n\n/**\n * 根据当前时间创建一个默认日期\n * @returns 当前日期都dayjs对象\n */\nexport const createDefaultCurDate = (): dayjs.Dayjs => dayjs(dayjs().format('YYYY-MM-DD'));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}