{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _toConsumableArray } from '../../../_chunks/dep-4a990ea3.mjs';\nimport { _ as _typeof } from '../../../_chunks/dep-4659d73b.mjs';\nimport { _ as _defineProperty } from '../../../_chunks/dep-fa52aa21.mjs';\nimport { i as isFunction_1 } from '../../../_chunks/dep-06dcbf4c.mjs';\nimport log from '../log/log.mjs';\nimport { getCurrentDate } from './utils.mjs';\nimport '../../../_chunks/dep-593f2b67.mjs';\nimport '../../../_chunks/dep-eca422c3.mjs';\nimport '../../../_chunks/dep-bf7257e7.mjs';\nimport '../../../_chunks/dep-2b09875b.mjs';\nimport '../../../_chunks/dep-cda4f568.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction xhr(_ref) {\n  var _files$;\n  var _ref$method = _ref.method,\n    method = _ref$method === void 0 ? \"POST\" : _ref$method,\n    action = _ref.action,\n    _ref$withCredentials = _ref.withCredentials,\n    withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,\n    _ref$headers = _ref.headers,\n    headers = _ref$headers === void 0 ? {} : _ref$headers,\n    _ref$data = _ref.data,\n    data = _ref$data === void 0 ? {} : _ref$data,\n    file = _ref.file,\n    _ref$files = _ref.files,\n    files = _ref$files === void 0 ? [] : _ref$files,\n    _ref$name = _ref.name,\n    name = _ref$name === void 0 ? \"file\" : _ref$name,\n    _ref$useMockProgress = _ref.useMockProgress,\n    useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,\n    _ref$mockProgressDura = _ref.mockProgressDuration,\n    mockProgressDuration = _ref$mockProgressDura === void 0 ? 300 : _ref$mockProgressDura,\n    formatRequest = _ref.formatRequest,\n    onError = _ref.onError,\n    onProgress = _ref.onProgress,\n    onSuccess = _ref.onSuccess;\n  var innerFiles = files || [];\n  var percent = 0;\n  var xhr2 = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr2.withCredentials = true;\n  }\n  var timer1;\n  var timer2;\n  if (useMockProgress && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === \"progress\") {\n    var timer22 = setTimeout(function () {\n      timer1 = setInterval(function () {\n        if (percent + 10 < 100) {\n          percent = Math.max(percent + 10, percent);\n          if (files[0] && percent !== files[0].percent) {\n            files[0].percent = percent;\n            onProgress({\n              percent: percent,\n              file: file || innerFiles[0],\n              files: innerFiles.map(function (file2) {\n                return _objectSpread(_objectSpread({}, file2), {}, {\n                  percent: percent\n                });\n              }),\n              type: \"mock\",\n              XMLHttpRequest: xhr2\n            });\n          }\n        } else {\n          clearInterval(timer1);\n        }\n      }, mockProgressDuration);\n      clearTimeout(timer22);\n    }, mockProgressDuration);\n  }\n  var requestData = {};\n  if (data) {\n    var extraData = isFunction_1(data) ? data(innerFiles) : data;\n    Object.assign(requestData, extraData);\n  }\n  innerFiles.forEach(function (file2, index) {\n    var fileField = innerFiles.length > 1 ? \"\".concat(name, \"[\").concat(index, \"]\") : name;\n    requestData[fileField] = file2.raw;\n  });\n  if (innerFiles.length === 1) {\n    requestData[name] = innerFiles[0].raw;\n  } else {\n    requestData[name] = innerFiles.map(function (file2) {\n      return file2.raw;\n    });\n  }\n  requestData.length = innerFiles.length;\n  if (formatRequest) {\n    requestData = formatRequest(requestData);\n  }\n  var formData = new FormData();\n  Object.keys(requestData).forEach(function (key) {\n    formData.append(key, requestData[key]);\n  });\n  xhr2.open(method, action, true);\n  Object.keys(headers).forEach(function (key) {\n    xhr2.setRequestHeader(key, headers[key]);\n  });\n  xhr2.onerror = function (event) {\n    onError({\n      event: event,\n      file: file,\n      files: innerFiles,\n      XMLHttpRequest: xhr2\n    });\n    clearInterval(timer1);\n    clearTimeout(timer2);\n  };\n  xhr2.ontimeout = function (event) {\n    onError({\n      event: event,\n      file: file,\n      files: innerFiles,\n      XMLHttpRequest: xhr2\n    });\n  };\n  if (xhr2.upload) {\n    xhr2.upload.onprogress = function (event) {\n      var _innerFiles$;\n      var realPercent = 0;\n      if (event.total > 0) {\n        realPercent = Math.round(event.loaded / event.total * 100);\n      }\n      percent = Math.max(realPercent, percent);\n      if (percent !== realPercent && ((_innerFiles$ = innerFiles[0]) === null || _innerFiles$ === void 0 ? void 0 : _innerFiles$.percent) !== percent) {\n        var progressFiles = innerFiles.map(function (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            percent: percent\n          });\n        });\n        onProgress({\n          event: event,\n          percent: percent,\n          file: file || progressFiles[0],\n          files: progressFiles,\n          type: \"real\",\n          XMLHttpRequest: xhr2\n        });\n      }\n    };\n  }\n  xhr2.onload = function (event) {\n    var response = {};\n    response.XMLHttpRequest = xhr2;\n    var isFail = xhr2.status < 200 || xhr2.status >= 300;\n    if (isFail) {\n      return onError({\n        event: event,\n        file: file,\n        files: innerFiles,\n        response: response,\n        XMLHttpRequest: xhr2\n      });\n    }\n    var text = xhr2.responseText || xhr2.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n      log.error(\"Upload\", \"response does not a valid json\");\n    }\n    clearInterval(timer1);\n    clearTimeout(timer2);\n    innerFiles.forEach(function (file2) {\n      var _response;\n      file2.percent = 100;\n      file2.status = \"success\";\n      file2.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();\n    });\n    if (_typeof(response) === \"object\") {\n      response.XMLHttpRequest = xhr2;\n    }\n    onSuccess({\n      event: event,\n      file: file || innerFiles[0],\n      files: _toConsumableArray(innerFiles),\n      XMLHttpRequest: xhr2,\n      response: response\n    });\n  };\n  xhr2.send(formData);\n  xhr2.upload.requestParams = requestData;\n  xhr2.upload.requestHeaders = headers;\n  return xhr2;\n}\nexport { xhr as default };","map":{"version":3,"names":["xhr","_ref","_files$","_ref$method","method","action","_ref$withCredentials","withCredentials","_ref$headers","headers","_ref$data","data","file","_ref$files","files","_ref$name","name","_ref$useMockProgress","useMockProgress","_ref$mockProgressDura","mockProgressDuration","formatRequest","onError","onProgress","onSuccess","innerFiles","percent","xhr2","XMLHttpRequest","timer1","timer2","status","timer22","setTimeout","setInterval","Math","max","map","file2","type","clearInterval","clearTimeout","requestData","extraData","isFunction_1","Object","assign","forEach","index","fileField","length","concat","raw","formData","FormData","keys","key","append","open","setRequestHeader","onerror","event","ontimeout","upload","onprogress","_innerFiles$","realPercent","total","round","loaded","progressFiles","item","onload","response","isFail","text","responseText","JSON","parse","e","log","error","_response","uploadTime","getCurrentDate","_typeof","_toConsumableArray","send","requestParams","requestHeaders"],"sources":["../../../../src/_common/js/upload/xhr.ts"],"sourcesContent":["import isFunction from 'lodash/isFunction';\n/* eslint-disable no-param-reassign */\nimport log from '../log/log';\nimport { UploadFile, XhrOptions } from './types';\nimport { getCurrentDate } from './utils';\n\nexport default function xhr({\n  method = 'POST',\n  action,\n  withCredentials = false,\n  headers = {},\n  data = {},\n  file,\n  files = [],\n  name = 'file',\n  useMockProgress = true,\n  mockProgressDuration = 300,\n  formatRequest,\n  onError,\n  onProgress,\n  onSuccess,\n}: XhrOptions) {\n  // support files\n  const innerFiles: UploadFile[] = files || [];\n  let percent = 0;\n\n  // eslint-disable-next-line no-shadow\n  const xhr = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  let timer1: NodeJS.Timeout;\n  let timer2: NodeJS.Timeout;\n  if (useMockProgress && files[0]?.status === 'progress') {\n    // 超过 500 毫秒再开启虚拟进度\n    const timer2 = setTimeout(() => {\n      // 只有真实进度一直不存在时才需要模拟进度\n      timer1 = setInterval(() => {\n        if (percent + 10 < 100) {\n          percent = Math.max(percent + 10, percent);\n          if (files[0] && percent !== files[0].percent) {\n            files[0].percent = percent;\n            onProgress({\n              percent,\n              file: file || innerFiles[0],\n              files: innerFiles.map((file) => ({ ...file, percent })),\n              type: 'mock',\n              XMLHttpRequest: xhr,\n            });\n          }\n        } else {\n          clearInterval(timer1);\n        }\n      }, mockProgressDuration);\n      clearTimeout(timer2);\n    }, mockProgressDuration);\n  }\n\n  let requestData: { [key: string]: any } = {};\n  if (data) {\n    const extraData = isFunction(data) ? data(innerFiles) : data;\n    Object.assign(requestData, extraData);\n  }\n  innerFiles.forEach((file, index) => {\n    const fileField = innerFiles.length > 1 ? `${name}[${index}]` : name;\n    requestData[fileField] = file.raw;\n  });\n  if (innerFiles.length === 1) {\n    requestData[name] = innerFiles[0].raw;\n  } else {\n    requestData[name] = innerFiles.map((file) => file.raw);\n  }\n  requestData.length = innerFiles.length;\n\n  if (formatRequest) {\n    requestData = formatRequest(requestData);\n  }\n\n  // set send data\n  const formData = new FormData();\n  Object.keys(requestData).forEach((key) => {\n    formData.append(key, requestData[key]);\n  });\n\n  xhr.open(method, action, true);\n  // custom request headers\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key]);\n  });\n\n  xhr.onerror = (event: ProgressEvent) => {\n    onError({ event, file, files: innerFiles, XMLHttpRequest: xhr, });\n    clearInterval(timer1);\n    clearTimeout(timer2);\n  };\n\n  xhr.ontimeout = (event) => {\n    onError({ event, file, files: innerFiles, XMLHttpRequest: xhr, });\n  };\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      let realPercent = 0;\n      if (event.total > 0) {\n        realPercent = Math.round((event.loaded / event.total) * 100);\n      }\n      percent = Math.max(realPercent, percent);\n      if (percent !== realPercent && innerFiles[0]?.percent !== percent) {\n        const progressFiles = innerFiles.map((item) => ({ ...item, percent }));\n        onProgress({\n          event,\n          percent,\n          file: file || progressFiles[0],\n          files: progressFiles,\n          type: 'real',\n          XMLHttpRequest: xhr,\n        });\n      }\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  xhr.onload = (event: ProgressEvent) => {\n    let response: { [key: string]: any } = {};\n    response.XMLHttpRequest = xhr;\n    const isFail = xhr.status < 200 || xhr.status >= 300;\n    if (isFail) {\n      return onError({\n        event,\n        file,\n        files: innerFiles,\n        response,\n        XMLHttpRequest: xhr,\n      });\n    }\n    const text = xhr.responseText || xhr.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n      log.error('Upload', 'response does not a valid json');\n    }\n    clearInterval(timer1);\n    clearTimeout(timer2);\n    innerFiles.forEach((file) => {\n      file.percent = 100;\n      file.status = 'success';\n      // 如果上传请求返回结果没有上传日期，则使用电脑当前日期显示\n      file.uploadTime = response?.uploadTime || getCurrentDate();\n    });\n    if (typeof response === 'object') {\n      response.XMLHttpRequest = xhr;\n    }\n    onSuccess({\n      event,\n      file: file || innerFiles[0],\n      files: [...innerFiles],\n      XMLHttpRequest: xhr,\n      response,\n    });\n  };\n\n  xhr.send(formData);\n  // @ts-ignore\n  xhr.upload.requestParams = requestData;\n  // @ts-ignore\n  xhr.upload.requestHeaders = headers;\n\n  return xhr;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}