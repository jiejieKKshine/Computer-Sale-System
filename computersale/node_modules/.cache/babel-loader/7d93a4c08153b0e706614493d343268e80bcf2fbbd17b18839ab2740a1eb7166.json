{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { ref, watch } from 'vue';\nimport { g as get_1 } from '../../_chunks/dep-ae202bc0.mjs';\nimport '../../_common/js/log/index.mjs';\nimport log from '../../_common/js/log/log.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-aeaef131.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-ab4bb9b8.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-6ab5363f.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-e9841b9e.mjs';\nimport '../../_chunks/dep-7932c2e8.mjs';\nfunction getCellKey(row, rowKey, colKey, colIndex) {\n  var rowValue = get_1(row, rowKey);\n  if (rowValue === void 0) {\n    log.error(\"Table\", \"rowKey is wrong, can not get unique identifier of row.\");\n  }\n  return [rowValue, colKey || colIndex].join(\"_\");\n}\nfunction useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {\n  var skipSpansMap = ref(/* @__PURE__ */new Map());\n  var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {\n    var rowIndex = params.rowIndex,\n      colIndex = params.colIndex;\n    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;\n    var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);\n    var maxColIndex = colIndex + (skipSpansValue.colspan || 1);\n    for (var i = rowIndex; i < maxRowIndex; i++) {\n      for (var j = colIndex; j < maxColIndex; j++) {\n        if (i !== rowIndex || j !== colIndex) {\n          if (!data.value[i] || !columns.value[j]) return;\n          var cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);\n          var state = skipSpansMap.value.get(cellKey) || {};\n          state.skipped = true;\n          skipSpansMap.value.set(cellKey, state);\n        }\n      }\n    }\n  };\n  var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {\n    var _skipSpansMap$value;\n    (_skipSpansMap$value = skipSpansMap.value) === null || _skipSpansMap$value === void 0 || _skipSpansMap$value.clear();\n    if (!data2 || !rowspanAndColspan2) return;\n    for (var i = 0, len = data2.length; i < len; i++) {\n      var row = data2[i];\n      for (var j = 0, colLen = columns2.length; j < colLen; j++) {\n        var col = columns2[j];\n        var params = {\n          row: row,\n          col: col,\n          rowIndex: i,\n          colIndex: j\n        };\n        var cellKey = getCellKey(row, rowKey.value, col.colKey, j);\n        var state = skipSpansMap.value.get(cellKey) || {};\n        var o = rowspanAndColspan2(params) || {};\n        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {\n          o.rowspan && (state.rowspan = o.rowspan);\n          o.colspan && (state.colspan = o.colspan);\n          skipSpansMap.value.set(cellKey, state);\n        }\n        onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 || onTrRowspanOrColspan(params, state);\n      }\n    }\n  };\n  watch(function () {\n    return [data.value, columns.value, rowspanAndColspan];\n  }, function () {\n    updateSkipSpansMap(data.value, columns.value, rowspanAndColspan === null || rowspanAndColspan === void 0 ? void 0 : rowspanAndColspan.value);\n  }, {\n    immediate: true\n  });\n  return {\n    skipSpansMap: skipSpansMap\n  };\n}\nexport { useRowspanAndColspan as default, getCellKey };","map":{"version":3,"names":["getCellKey","row","rowKey","colKey","colIndex","rowValue","get_1","log","error","join","useRowspanAndColspan","data","columns","rowspanAndColspan","skipSpansMap","ref","Map","onTrRowspanOrColspan","params","skipSpansValue","rowIndex","rowspan","colspan","maxRowIndex","maxColIndex","i","j","value","cellKey","state","get","skipped","set","updateSkipSpansMap","data2","columns2","rowspanAndColspan2","_skipSpansMap$value","clear","len","length","colLen","col","o","watch","immediate"],"sources":["../../../src/table/hooks/useRowspanAndColspan.ts"],"sourcesContent":["import { ref, watch, Ref } from 'vue';\nimport get from 'lodash/get';\nimport log from '../../_common/js/log';\nimport { BaseTableCellParams, BaseTableCol, TableRowData, TableRowspanAndColspanFunc } from '../type';\n\nexport interface SkipSpansValue {\n  colspan?: number;\n  rowspan?: number;\n  skipped?: boolean;\n}\n\nexport function getCellKey(row: TableRowData, rowKey: string, colKey: string, colIndex: number) {\n  const rowValue = get(row, rowKey);\n  if (rowValue === undefined) {\n    log.error('Table', 'rowKey is wrong, can not get unique identifier of row.');\n  }\n  return [rowValue, colKey || colIndex].join('_');\n}\n\nexport default function useRowspanAndColspan(\n  data: Ref<TableRowData[]>,\n  columns: Ref<BaseTableCol<TableRowData>[]>,\n  rowKey: Ref<string>,\n  rowspanAndColspan: Ref<TableRowspanAndColspanFunc<TableRowData>>,\n) {\n  const skipSpansMap = ref(new Map<string, SkipSpansValue>());\n\n  // 计算单元格是否跳过渲染\n  const onTrRowspanOrColspan = (params: BaseTableCellParams<TableRowData>, skipSpansValue: SkipSpansValue) => {\n    const { rowIndex, colIndex } = params;\n    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;\n    const maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);\n    const maxColIndex = colIndex + (skipSpansValue.colspan || 1);\n    for (let i = rowIndex; i < maxRowIndex; i++) {\n      for (let j = colIndex; j < maxColIndex; j++) {\n        if (i !== rowIndex || j !== colIndex) {\n          if (!data.value[i] || !columns.value[j]) return;\n          const cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);\n          const state = skipSpansMap.value.get(cellKey) || {};\n          state.skipped = true;\n          skipSpansMap.value.set(cellKey, state);\n        }\n      }\n    }\n  };\n\n  // 计算单元格是否需要设置 rowspan 和 colspan\n  const updateSkipSpansMap = (\n    data: TableRowData[],\n    columns: BaseTableCol<TableRowData>[],\n    rowspanAndColspan: TableRowspanAndColspanFunc<TableRowData>,\n  ) => {\n    skipSpansMap.value?.clear();\n    if (!data || !rowspanAndColspan) return;\n    for (let i = 0, len = data.length; i < len; i++) {\n      const row = data[i];\n      for (let j = 0, colLen = columns.length; j < colLen; j++) {\n        const col = columns[j];\n        const params = {\n          row,\n          col,\n          rowIndex: i,\n          colIndex: j,\n        };\n        const cellKey = getCellKey(row, rowKey.value, col.colKey, j);\n        const state = skipSpansMap.value.get(cellKey) || {};\n        const o = rowspanAndColspan(params) || {};\n        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {\n          o.rowspan && (state.rowspan = o.rowspan);\n          o.colspan && (state.colspan = o.colspan);\n          skipSpansMap.value.set(cellKey, state);\n        }\n        onTrRowspanOrColspan?.(params, state);\n      }\n    }\n  };\n\n  watch(\n    () => [data.value, columns.value, rowspanAndColspan],\n    () => {\n      updateSkipSpansMap(data.value, columns.value, rowspanAndColspan?.value);\n    },\n    { immediate: true },\n  );\n\n  return { skipSpansMap };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}