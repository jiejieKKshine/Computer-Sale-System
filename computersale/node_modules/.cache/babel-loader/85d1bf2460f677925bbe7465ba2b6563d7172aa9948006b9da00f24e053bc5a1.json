{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport './dep-eca422c3.mjs';\nimport { i as isObject_1 } from './dep-2b09875b.mjs';\nimport './dep-cda4f568.mjs';\nimport { i as isSymbol_1 } from './dep-ab4bb9b8.mjs';\n\n/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex$1(string) {\n  var index = string.length;\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\nvar _trimmedEndIndex = trimmedEndIndex$1;\nvar trimmedEndIndex = _trimmedEndIndex;\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim$1(string) {\n  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\n}\nvar _baseTrim = baseTrim$1;\nvar baseTrim = _baseTrim,\n  isObject = isObject_1,\n  isSymbol = isSymbol_1;\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\nvar toNumber_1 = toNumber;\nexport { toNumber_1 as t };","map":{"version":3,"names":["reWhitespace","trimmedEndIndex$1","string","index","length","test","charAt","_trimmedEndIndex","trimmedEndIndex","reTrimStart","baseTrim$1","slice","replace","_baseTrim","baseTrim","isObject","isObject_1","isSymbol","isSymbol_1","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","other","valueOf","isBinary","toNumber_1"],"sources":["../../node_modules/lodash/_trimmedEndIndex.js","../../node_modules/lodash/_baseTrim.js","../../node_modules/lodash/toNumber.js"],"sourcesContent":["/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"],"mappings":";;;;;;;;;;;;AACA,IAAIA,YAAY,GAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAeA,CAACC,MAAM,EAAE;EAC/B,IAAIC,KAAK,GAAGD,MAAM,CAACE,MAAM;EAEzB,OAAOD,KAAK,EAAE,IAAIH,YAAY,CAACK,IAAI,CAACH,MAAM,CAACI,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE;EAC3D,OAAOA,KAAK;AACd;AAEA,IAAAI,gBAAc,GAAGN,iBAAe;AClBhC,IAAIO,eAAe,GAAGD,gBAA6B;;AAEnD;AACA,IAAIE,WAAW,GAAG,MAAM;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAQA,CAACR,MAAM,EAAE;EACxB,OAAOA,MAAM,GACTA,MAAM,CAACS,KAAK,CAAC,CAAC,EAAEH,eAAe,CAACN,MAAM,CAAC,GAAG,CAAC,CAAC,CAACU,OAAO,CAACH,WAAW,EAAE,EAAE,CAAC,GACrEP,MAAM;AACZ;AAEA,IAAAW,SAAc,GAAGH,UAAQ;AClBzB,IAAII,QAAQ,GAAGD,SAAsB;EACjCE,QAAQ,GAAGC,UAAqB;EAChCC,QAAQ,GAAGC,UAAqB;;AAEpC;AACA,IAAIC,GAAG,GAAG,CAAC,GAAG,CAAC;;AAEf;AACA,IAAIC,UAAU,GAAG,oBAAoB;;AAErC;AACA,IAAIC,UAAU,GAAG,YAAY;;AAE7B;AACA,IAAIC,SAAS,GAAG,aAAa;;AAE7B;AACA,IAAIC,YAAY,GAAGC,QAAQ;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAOA,KAAK;EACb;EACD,IAAIT,QAAQ,CAACS,KAAK,CAAC,EAAE;IACnB,OAAOP,GAAG;EACX;EACD,IAAIJ,QAAQ,CAACW,KAAK,CAAC,EAAE;IACnB,IAAIC,KAAK,GAAG,OAAOD,KAAK,CAACE,OAAO,IAAI,UAAU,GAAGF,KAAK,CAACE,OAAO,EAAE,GAAGF,KAAK;IACxEA,KAAK,GAAGX,QAAQ,CAACY,KAAK,CAAC,GAAIA,KAAK,GAAG,EAAE,GAAIA,KAAK;EAC/C;EACD,IAAI,OAAOD,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAOA,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK;EACpC;EACDA,KAAK,GAAGZ,QAAQ,CAACY,KAAK,CAAC;EACvB,IAAIG,QAAQ,GAAGR,UAAU,CAAChB,IAAI,CAACqB,KAAK,CAAC;EACrC,OAAQG,QAAQ,IAAIP,SAAS,CAACjB,IAAI,CAACqB,KAAK,CAAC,GACrCH,YAAY,CAACG,KAAK,CAACf,KAAK,CAAC,CAAC,CAAC,EAAEkB,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,GAC7CT,UAAU,CAACf,IAAI,CAACqB,KAAK,CAAC,GAAGP,GAAG,GAAG,CAACO,KAAM;AAC7C;AAEA,IAAAI,UAAc,GAAGL,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}