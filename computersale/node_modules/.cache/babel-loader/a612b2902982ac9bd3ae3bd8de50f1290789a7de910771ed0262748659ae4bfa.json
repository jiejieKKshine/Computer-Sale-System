{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _slicedToArray } from '../../_chunks/dep-5efe53d1.mjs';\nimport { toRefs, ref } from 'vue';\nimport { g as get_1 } from '../../_chunks/dep-ae202bc0.mjs';\nimport useDefaultValue from '../../hooks/useDefaultValue.mjs';\nimport { on, off } from '../../utils/dom.mjs';\nimport { ARROW_DOWN_REG, ARROW_UP_REG, SPACE_REG, SHIFT_REG, ESCAPE_REG, CLEAR_REG, ALL_REG } from '../../_common/js/common.mjs';\nimport '../../_chunks/dep-593f2b67.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-aeaef131.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-ab4bb9b8.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-6ab5363f.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-e9841b9e.mjs';\nimport '../../_chunks/dep-7932c2e8.mjs';\nimport '../../_chunks/dep-bad871d5.mjs';\nimport '../../_chunks/dep-5a17bf21.mjs';\nimport '../../_chunks/dep-03a7fb6c.mjs';\nimport '../../utils/easing.mjs';\nfunction useRowHighlight(props, tableRef) {\n  var _toRefs = toRefs(props),\n    data = _toRefs.data,\n    activeRowType = _toRefs.activeRowType,\n    activeRowKeys = _toRefs.activeRowKeys,\n    defaultActiveRowKeys = _toRefs.defaultActiveRowKeys,\n    disableSpaceInactiveRow = _toRefs.disableSpaceInactiveRow;\n  var currentOperationRowIndex = ref(-1);\n  var isShiftPressed = ref(false);\n  var shiftSelectionState = ref(false);\n  var areaSelectionStartIndex = ref(-1);\n  var _useDefaultValue = useDefaultValue(activeRowKeys, defaultActiveRowKeys.value, props.onActiveChange, \"activeRowKeys\"),\n    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),\n    tActiveRow = _useDefaultValue2[0],\n    setTActiveRow = _useDefaultValue2[1];\n  var handleInactive = function handleInactive(ctx) {\n    var row = ctx.row,\n      index = ctx.index;\n    var rowValue = get_1(row, props.rowKey);\n    if (activeRowType.value === \"single\") {\n      var newActiveRowKeys = tActiveRow.value.length > 1 ? [rowValue] : [];\n      setTActiveRow(newActiveRowKeys, {\n        type: \"inactive\",\n        activeRowList: [{\n          row: row,\n          rowIndex: index\n        }],\n        currentRowData: row\n      });\n    } else if (activeRowType.value === \"multiple\") {\n      var _newActiveRowKeys = tActiveRow.value.filter(function (t) {\n        return t !== rowValue;\n      });\n      var activeRowList = [];\n      for (var i = 0, len = data.value.length; i < len; i++) {\n        var row2 = data.value[i];\n        if (_newActiveRowKeys.includes(get_1(row2, props.rowKey))) {\n          activeRowList.push({\n            row: row2,\n            rowIndex: i\n          });\n        }\n      }\n      setTActiveRow(_newActiveRowKeys, {\n        type: \"inactive\",\n        activeRowList: activeRowList,\n        currentRowData: row\n      });\n    }\n  };\n  var handleActive = function handleActive(ctx) {\n    var row = ctx.row;\n    var rowValue = get_1(row, props.rowKey);\n    if (activeRowType.value === \"single\") {\n      setTActiveRow([rowValue], {\n        activeRowList: [{\n          row: row,\n          rowIndex: ctx.index\n        }],\n        currentRowData: row,\n        type: \"active\"\n      });\n    } else {\n      var newActiveRowKeys = tActiveRow.value.concat(rowValue);\n      var activeRowList = [];\n      for (var i = 0, len = data.value.length; i < len; i++) {\n        var row2 = data.value[i];\n        if (newActiveRowKeys.includes(get_1(row2, props.rowKey))) {\n          activeRowList.push({\n            row: row2,\n            rowIndex: i\n          });\n        }\n      }\n      setTActiveRow(newActiveRowKeys, {\n        activeRowList: activeRowList,\n        currentRowData: row,\n        type: \"active\"\n      });\n    }\n  };\n  var handleShiftActive = function handleShiftActive(ctx) {\n    document.getSelection().removeAllRanges();\n    var row = ctx.row;\n    var currentIndex = currentOperationRowIndex.value;\n    var startIndex = Math.min(areaSelectionStartIndex.value, currentIndex);\n    var endIndex = Math.max(areaSelectionStartIndex.value, currentIndex);\n    var newActiveRowData = [];\n    for (var i = startIndex; i <= endIndex; i++) {\n      newActiveRowData.push({\n        row: data.value[i],\n        rowIndex: i\n      });\n    }\n    var newActiveRowKeys = newActiveRowData.map(function (item) {\n      return get_1(item.row, props.rowKey);\n    });\n    setTActiveRow(newActiveRowKeys, {\n      activeRowList: newActiveRowData,\n      type: \"active\",\n      currentRowData: row\n    });\n  };\n  var getActiveRowList = function getActiveRowList() {\n    var list = [];\n    for (var i = 0, len = data.value.length; i < len; i++) {\n      var row = data.value[i];\n      var rowValue = get_1(row, props.rowKey);\n      if (tActiveRow.value.includes(rowValue)) {\n        list.push({\n          row: row,\n          rowIndex: i\n        });\n      }\n    }\n    return list;\n  };\n  var onHighlightRow = function onHighlightRow(ctx, extra) {\n    if (!activeRowType.value) return;\n    var row = ctx.row,\n      index = ctx.index;\n    var rowValue = get_1(row, props.rowKey);\n    if (isShiftPressed.value) {\n      currentOperationRowIndex.value = index;\n      handleShiftActive(ctx);\n      shiftSelectionState.value = true;\n    } else if (tActiveRow.value.includes(rowValue) && (extra === null || extra === void 0 ? void 0 : extra.action) !== \"active\") {\n      if (!disableSpaceInactiveRow.value) {\n        handleInactive(ctx);\n        currentOperationRowIndex.value = index;\n      }\n    } else {\n      handleActive(ctx);\n      currentOperationRowIndex.value = index;\n    }\n  };\n  var clearActive = function clearActive() {\n    var _props$onActiveRowAct;\n    setTActiveRow([], {\n      activeRowList: [],\n      currentRowData: void 0,\n      type: \"inactive\"\n    });\n    (_props$onActiveRowAct = props.onActiveRowAction) === null || _props$onActiveRowAct === void 0 || _props$onActiveRowAct.call(props, {\n      action: \"clear\",\n      activeRowList: []\n    });\n    currentOperationRowIndex.value = -1;\n  };\n  var setAllActive = function setAllActive() {\n    var _props$onActiveRowAct2;\n    var activeKeys = data.value.map(function (item) {\n      return get_1(item, props.rowKey);\n    });\n    var activeRowList = data.value.map(function (row, rowIndex) {\n      return {\n        row: row,\n        rowIndex: rowIndex\n      };\n    });\n    setTActiveRow(activeKeys, {\n      activeRowList: activeRowList,\n      currentRowData: void 0,\n      type: \"active\"\n    });\n    (_props$onActiveRowAct2 = props.onActiveRowAction) === null || _props$onActiveRowAct2 === void 0 || _props$onActiveRowAct2.call(props, {\n      action: \"select-all\",\n      activeRowList: activeRowList\n    });\n    currentOperationRowIndex.value = -1;\n  };\n  var clearShiftAreaSelection = function clearShiftAreaSelection() {\n    shiftSelectionState.value = false;\n  };\n  var keyboardDownListener = function keyboardDownListener(e) {\n    var _e$key;\n    var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());\n    if (ARROW_DOWN_REG.test(code)) {\n      e.preventDefault();\n      var index = Math.min(data.value.length - 1, currentOperationRowIndex.value + 1);\n      if (activeRowType.value === \"single\") {\n        onHighlightRow({\n          row: data.value[index],\n          index: index,\n          e: e\n        }, {\n          action: \"active\"\n        });\n      } else {\n        currentOperationRowIndex.value = index;\n      }\n    } else if (ARROW_UP_REG.test(code)) {\n      e.preventDefault();\n      var _index = Math.max(0, currentOperationRowIndex.value - 1);\n      if (activeRowType.value === \"single\") {\n        onHighlightRow({\n          row: data.value[_index],\n          index: _index,\n          e: e\n        }, {\n          action: \"active\"\n        });\n      } else {\n        currentOperationRowIndex.value = _index;\n      }\n    } else if (SPACE_REG.test(code)) {\n      e.preventDefault();\n      var _index2 = currentOperationRowIndex.value;\n      if (shiftSelectionState.value) {\n        var _props$onActiveRowAct3;\n        (_props$onActiveRowAct3 = props.onActiveRowAction) === null || _props$onActiveRowAct3 === void 0 || _props$onActiveRowAct3.call(props, {\n          action: \"shift-area-selection\",\n          activeRowList: getActiveRowList()\n        });\n      } else if (!disableSpaceInactiveRow.value) {\n        onHighlightRow({\n          row: data.value[_index2],\n          index: _index2,\n          e: e\n        });\n      } else {\n        var _props$onActiveRowAct4;\n        (_props$onActiveRowAct4 = props.onActiveRowAction) === null || _props$onActiveRowAct4 === void 0 || _props$onActiveRowAct4.call(props, {\n          action: \"space-one-selection\",\n          activeRowList: getActiveRowList()\n        });\n      }\n    } else if (SHIFT_REG.test(code)) {\n      isShiftPressed.value = true;\n      areaSelectionStartIndex.value = currentOperationRowIndex.value;\n    } else if (ESCAPE_REG.test(code) || CLEAR_REG.test(code)) {\n      clearActive();\n      clearShiftAreaSelection();\n    } else if (ALL_REG.test(code)) {\n      setAllActive();\n    }\n    if (!SPACE_REG.test(code)) {\n      clearShiftAreaSelection();\n    }\n  };\n  var keyboardUpListener = function keyboardUpListener(e) {\n    var _e$key2;\n    var code = e.code || ((_e$key2 = e.key) === null || _e$key2 === void 0 ? void 0 : _e$key2.trim());\n    if (SHIFT_REG.test(code)) {\n      isShiftPressed.value = false;\n    }\n  };\n  var addHighlightKeyboardListener = function addHighlightKeyboardListener() {\n    on(tableRef.value, \"keydown\", keyboardDownListener);\n    on(tableRef.value, \"keyup\", keyboardUpListener);\n  };\n  var removeHighlightKeyboardListener = function removeHighlightKeyboardListener() {\n    off(tableRef.value, \"keydown\", keyboardDownListener);\n    off(tableRef.value, \"keyup\", keyboardUpListener);\n  };\n  return {\n    tActiveRow: tActiveRow,\n    onHighlightRow: onHighlightRow,\n    addHighlightKeyboardListener: addHighlightKeyboardListener,\n    removeHighlightKeyboardListener: removeHighlightKeyboardListener\n  };\n}\nexport { useRowHighlight as default, useRowHighlight };","map":{"version":3,"names":["useRowHighlight","props","tableRef","_toRefs","toRefs","data","activeRowType","activeRowKeys","defaultActiveRowKeys","disableSpaceInactiveRow","currentOperationRowIndex","ref","isShiftPressed","shiftSelectionState","areaSelectionStartIndex","_useDefaultValue","useDefaultValue","value","onActiveChange","_useDefaultValue2","_slicedToArray","tActiveRow","setTActiveRow","handleInactive","ctx","row","index","rowValue","get_1","rowKey","newActiveRowKeys","length","type","activeRowList","rowIndex","currentRowData","_newActiveRowKeys","filter","t","i","len","row2","includes","push","handleActive","concat","handleShiftActive","document","getSelection","removeAllRanges","currentIndex","startIndex","Math","min","endIndex","max","newActiveRowData","map","item","getActiveRowList","list","onHighlightRow","extra","action","clearActive","_props$onActiveRowAct","onActiveRowAction","call","setAllActive","_props$onActiveRowAct2","activeKeys","clearShiftAreaSelection","keyboardDownListener","e","_e$key","code","key","trim","ARROW_DOWN_REG","test","preventDefault","ARROW_UP_REG","_index","SPACE_REG","_index2","_props$onActiveRowAct3","_props$onActiveRowAct4","SHIFT_REG","ESCAPE_REG","CLEAR_REG","ALL_REG","keyboardUpListener","_e$key2","addHighlightKeyboardListener","on","removeHighlightKeyboardListener","off"],"sources":["../../../src/table/hooks/useRowHighlight.ts"],"sourcesContent":["import { ref, Ref, toRefs } from 'vue';\nimport get from 'lodash/get';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { BaseTableProps } from '../interface';\nimport { RowEventContext, TableRowData } from '../type';\nimport { on, off } from '../../utils/dom';\nimport {\n  ARROW_DOWN_REG,\n  ARROW_UP_REG,\n  ESCAPE_REG,\n  SPACE_REG,\n  SHIFT_REG,\n  CLEAR_REG,\n  ALL_REG,\n} from '../../_common/js/common';\n\n/**\n * 行高亮功能，支持键盘操作\n */\nexport function useRowHighlight(props: BaseTableProps, tableRef: Ref<HTMLDivElement>) {\n  const { data, activeRowType, activeRowKeys, defaultActiveRowKeys, disableSpaceInactiveRow } = toRefs(props);\n  const currentOperationRowIndex = ref(-1);\n  const isShiftPressed = ref(false);\n  const shiftSelectionState = ref(false);\n  const areaSelectionStartIndex = ref(-1);\n\n  const [tActiveRow, setTActiveRow] = useDefaultValue(\n    activeRowKeys,\n    defaultActiveRowKeys.value,\n    props.onActiveChange,\n    'activeRowKeys',\n  );\n\n  const handleInactive = (ctx: RowEventContext<TableRowData>) => {\n    const { row, index } = ctx;\n    const rowValue = get(row, props.rowKey);\n    if (activeRowType.value === 'single') {\n      const newActiveRowKeys = tActiveRow.value.length > 1 ? [rowValue] : [];\n      setTActiveRow(newActiveRowKeys, {\n        type: 'inactive',\n        activeRowList: [{ row, rowIndex: index }],\n        currentRowData: row,\n      });\n    } else if (activeRowType.value === 'multiple') {\n      const newActiveRowKeys = tActiveRow.value.filter((t) => t !== rowValue);\n      const activeRowList: { row: TableRowData; rowIndex: number }[] = [];\n      for (let i = 0, len = data.value.length; i < len; i++) {\n        const row = data.value[i];\n        if (newActiveRowKeys.includes(get(row, props.rowKey))) {\n          activeRowList.push({ row, rowIndex: i });\n        }\n      }\n      setTActiveRow(newActiveRowKeys, {\n        type: 'inactive',\n        activeRowList,\n        currentRowData: row,\n      });\n    }\n  };\n\n  const handleActive = (ctx: RowEventContext<TableRowData>) => {\n    const { row } = ctx;\n    const rowValue = get(row, props.rowKey);\n    if (activeRowType.value === 'single') {\n      setTActiveRow([rowValue], {\n        activeRowList: [{ row, rowIndex: ctx.index }],\n        currentRowData: row,\n        type: 'active',\n      });\n    } else {\n      const newActiveRowKeys = tActiveRow.value.concat(rowValue);\n      const activeRowList: { row: TableRowData; rowIndex: number }[] = [];\n      for (let i = 0, len = data.value.length; i < len; i++) {\n        const row = data.value[i];\n        if (newActiveRowKeys.includes(get(row, props.rowKey))) {\n          activeRowList.push({ row, rowIndex: i });\n        }\n      }\n      setTActiveRow(newActiveRowKeys, {\n        activeRowList,\n        currentRowData: row,\n        type: 'active',\n      });\n    }\n  };\n\n  const handleShiftActive = (ctx: RowEventContext<TableRowData>) => {\n    document.getSelection().removeAllRanges();\n    const { row } = ctx;\n    const currentIndex = currentOperationRowIndex.value;\n    const startIndex = Math.min(areaSelectionStartIndex.value, currentIndex);\n    const endIndex = Math.max(areaSelectionStartIndex.value, currentIndex);\n    const newActiveRowData: { row: TableRowData; rowIndex: number }[] = [];\n    for (let i = startIndex; i <= endIndex; i++) {\n      newActiveRowData.push({ row: data.value[i], rowIndex: i });\n    }\n    const newActiveRowKeys = newActiveRowData.map((item) => get(item.row, props.rowKey));\n    setTActiveRow(newActiveRowKeys, {\n      activeRowList: newActiveRowData,\n      type: 'active',\n      currentRowData: row,\n    });\n  };\n\n  const getActiveRowList = () => {\n    const list: { row: TableRowData; rowIndex: number }[] = [];\n    for (let i = 0, len = data.value.length; i < len; i++) {\n      const row = data.value[i];\n      const rowValue = get(row, props.rowKey);\n      if (tActiveRow.value.includes(rowValue)) {\n        list.push({ row, rowIndex: i });\n      }\n    }\n    return list;\n  };\n\n  const onHighlightRow = (ctx: RowEventContext<TableRowData>, extra?: { action?: 'active' | 'inactive' }) => {\n    if (!activeRowType.value) return;\n    const { row, index } = ctx;\n    const rowValue = get(row, props.rowKey);\n    // 如果是连续选中\n    if (isShiftPressed.value) {\n      currentOperationRowIndex.value = index;\n      handleShiftActive(ctx);\n      shiftSelectionState.value = true;\n    } else if (tActiveRow.value.includes(rowValue) && extra?.action !== 'active') {\n      if (!disableSpaceInactiveRow.value) {\n        // 如果已经高亮，则取消高亮\n        handleInactive(ctx);\n        currentOperationRowIndex.value = index;\n      }\n    } else {\n      // 如果没有高亮，则设置高亮\n      handleActive(ctx);\n      currentOperationRowIndex.value = index;\n    }\n  };\n\n  const clearActive = () => {\n    setTActiveRow([], {\n      activeRowList: [],\n      currentRowData: undefined,\n      type: 'inactive',\n    });\n    props.onActiveRowAction?.({ action: 'clear', activeRowList: [] });\n    currentOperationRowIndex.value = -1;\n  };\n\n  const setAllActive = () => {\n    const activeKeys = data.value.map((item) => get(item, props.rowKey));\n    const activeRowList = data.value.map((row, rowIndex) => ({ row, rowIndex }));\n    setTActiveRow(activeKeys, {\n      activeRowList,\n      currentRowData: undefined,\n      type: 'active',\n    });\n    props.onActiveRowAction?.({ action: 'select-all', activeRowList });\n    currentOperationRowIndex.value = -1;\n  };\n\n  const clearShiftAreaSelection = () => {\n    shiftSelectionState.value = false;\n  };\n\n  const keyboardDownListener = (e: KeyboardEvent) => {\n    const code = e.code || e.key?.trim();\n    if (ARROW_DOWN_REG.test(code)) {\n      e.preventDefault();\n      const index = Math.min(data.value.length - 1, currentOperationRowIndex.value + 1);\n      if (activeRowType.value === 'single') {\n        onHighlightRow({ row: data.value[index], index, e }, { action: 'active' });\n      } else {\n        currentOperationRowIndex.value = index;\n      }\n    } else if (ARROW_UP_REG.test(code)) {\n      e.preventDefault();\n      const index = Math.max(0, currentOperationRowIndex.value - 1);\n      if (activeRowType.value === 'single') {\n        onHighlightRow({ row: data.value[index], index, e }, { action: 'active' });\n      } else {\n        currentOperationRowIndex.value = index;\n      }\n    } else if (SPACE_REG.test(code)) {\n      e.preventDefault();\n      // keydown space to active or inactive\n      const index = currentOperationRowIndex.value;\n      // area selection can not cancel active with keydown space\n      if (shiftSelectionState.value) {\n        props.onActiveRowAction?.({\n          action: 'shift-area-selection',\n          activeRowList: getActiveRowList(),\n        });\n      } else if (!disableSpaceInactiveRow.value) {\n        onHighlightRow({ row: data.value[index], index, e });\n      } else {\n        props.onActiveRowAction?.({\n          action: 'space-one-selection',\n          activeRowList: getActiveRowList(),\n        });\n      }\n    } else if (SHIFT_REG.test(code)) {\n      // shift 连续选中开始\n      isShiftPressed.value = true;\n      areaSelectionStartIndex.value = currentOperationRowIndex.value;\n    } else if (ESCAPE_REG.test(code) || CLEAR_REG.test(code)) {\n      // 清空\n      clearActive();\n      clearShiftAreaSelection();\n    } else if (ALL_REG.test(code)) {\n      // 全选\n      setAllActive();\n    }\n\n    if (!SPACE_REG.test(code)) {\n      clearShiftAreaSelection();\n    }\n  };\n\n  const keyboardUpListener = (e: KeyboardEvent) => {\n    const code = e.code || e.key?.trim();\n    if (SHIFT_REG.test(code)) {\n      isShiftPressed.value = false;\n    }\n  };\n\n  const addHighlightKeyboardListener = () => {\n    on(tableRef.value, 'keydown', keyboardDownListener);\n    on(tableRef.value, 'keyup', keyboardUpListener);\n  };\n\n  const removeHighlightKeyboardListener = () => {\n    off(tableRef.value, 'keydown', keyboardDownListener);\n    off(tableRef.value, 'keyup', keyboardUpListener);\n  };\n\n  return {\n    tActiveRow,\n    onHighlightRow,\n    addHighlightKeyboardListener,\n    removeHighlightKeyboardListener,\n  };\n}\n\nexport default useRowHighlight;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}