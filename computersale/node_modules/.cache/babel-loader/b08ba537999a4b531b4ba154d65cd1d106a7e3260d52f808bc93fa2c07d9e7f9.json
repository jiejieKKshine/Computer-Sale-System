{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _toConsumableArray } from '../../_chunks/dep-4a990ea3.mjs';\nimport { _ as _defineProperty } from '../../_chunks/dep-fa52aa21.mjs';\nimport { _ as _slicedToArray } from '../../_chunks/dep-5efe53d1.mjs';\nimport { ref, toRefs, computed } from 'vue';\nimport { m as merge_1 } from '../../_chunks/dep-1b9718a2.mjs';\nimport { getTriggerTextField, getDisplayFiles, formatToUploadFile, validateFile, getFilesAndErrors, upload } from '../../_common/js/upload/main.mjs';\nimport { getFileList } from '../../_common/js/upload/utils.mjs';\nimport useVModel from '../../hooks/useVModel.mjs';\nimport '../../hooks/useConfig.mjs';\nimport { useConfig } from '../../config-provider/useConfig.mjs';\nimport '../../_chunks/dep-593f2b67.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-92f86d1d.mjs';\nimport '../../_chunks/dep-6ab5363f.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-e9841b9e.mjs';\nimport '../../_chunks/dep-1a4bb2f2.mjs';\nimport '../../_chunks/dep-cc8ebcde.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-f5579c03.mjs';\nimport '../../_chunks/dep-49aeee3c.mjs';\nimport '../../_chunks/dep-b5bf85f5.mjs';\nimport '../../_chunks/dep-3c65fae8.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-ec0bbd9f.mjs';\nimport '../../_chunks/dep-e065dc25.mjs';\nimport '../../_chunks/dep-400ec705.mjs';\nimport '../../_chunks/dep-02f9394e.mjs';\nimport '../../_chunks/dep-1725b1c7.mjs';\nimport '../../_chunks/dep-532409c5.mjs';\nimport '../../_common/js/global-config/default-config.mjs';\nimport '../../_common/js/global-config/locale/zh_CN.mjs';\nimport '../../_chunks/dep-9ed7da3e.mjs';\nimport '../../_chunks/dep-7f65fc46.mjs';\nimport '../../_chunks/dep-4f2cabb0.mjs';\nimport '../../_chunks/dep-b874078b.mjs';\nimport '../../_chunks/dep-889e457b.mjs';\nimport '../../_common/js/upload/xhr.mjs';\nimport '../../_common/js/log/log.mjs';\nimport '../../_chunks/dep-bad871d5.mjs';\nimport '../../_chunks/dep-5a17bf21.mjs';\nimport '../../_chunks/dep-7932c2e8.mjs';\nimport '../../_chunks/dep-ab4bb9b8.mjs';\nimport '../../_chunks/dep-bb899bfd.mjs';\nimport '../../_chunks/dep-5922c8f3.mjs';\nimport '../../_chunks/dep-1b78414a.mjs';\nimport '../../_chunks/dep-d84f19b3.mjs';\nimport '../../_chunks/dep-732f0b7d.mjs';\nimport '../../_chunks/dep-03a7fb6c.mjs';\nimport '../../config-provider/type.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction useUpload(props) {\n  var inputRef = ref();\n  var _toRefs = toRefs(props),\n    disabled = _toRefs.disabled,\n    autoUpload = _toRefs.autoUpload,\n    isBatchUpload = _toRefs.isBatchUpload,\n    multiple = _toRefs.multiple,\n    files = _toRefs.files,\n    modelValue = _toRefs.modelValue,\n    defaultFiles = _toRefs.defaultFiles;\n  var _useConfig = useConfig(\"upload\"),\n    globalConfig = _useConfig.globalConfig,\n    t = _useConfig.t,\n    classPrefix = _useConfig.classPrefix;\n  var _useVModel = useVModel(files, modelValue, defaultFiles.value, props.onChange, \"files\"),\n    _useVModel2 = _slicedToArray(_useVModel, 2),\n    uploadValue = _useVModel2[0],\n    setUploadValue = _useVModel2[1];\n  var xhrReq = ref([]);\n  var toUploadFiles = ref([]);\n  var sizeOverLimitMessage = ref(\"\");\n  var locale = computed(function () {\n    return merge_1({}, globalConfig.value, props.locale);\n  });\n  var tipsClasses = \"\".concat(classPrefix.value, \"-upload__tips \").concat(classPrefix.value, \"-size-s\");\n  var errorClasses = [tipsClasses].concat(\"\".concat(classPrefix.value, \"-upload__tips-error\"));\n  var placeholderClass = \"\".concat(classPrefix.value, \"-upload__placeholder\");\n  var triggerUploadText = computed(function () {\n    var _uploadValue$value;\n    var field = getTriggerTextField({\n      isBatchUpload: isBatchUpload.value,\n      multiple: multiple.value,\n      status: (_uploadValue$value = uploadValue.value) === null || _uploadValue$value === void 0 || (_uploadValue$value = _uploadValue$value[0]) === null || _uploadValue$value === void 0 ? void 0 : _uploadValue$value.status,\n      autoUpload: autoUpload.value\n    });\n    return locale.value.triggerUploadText[field];\n  });\n  var uploading = ref(false);\n  var displayFiles = computed(function () {\n    return getDisplayFiles({\n      multiple: props.multiple,\n      toUploadFiles: toUploadFiles.value,\n      uploadValue: uploadValue.value,\n      autoUpload: autoUpload.value,\n      isBatchUpload: isBatchUpload.value\n    });\n  });\n  var uploadFilePercent = function uploadFilePercent(params) {\n    var file = params.file,\n      percent = params.percent;\n    var operationUploadFiles = autoUpload.value ? toUploadFiles : uploadValue;\n    var index = operationUploadFiles.value.findIndex(function (item) {\n      return file.raw === item.raw;\n    });\n    operationUploadFiles.value[index] = _objectSpread(_objectSpread({}, operationUploadFiles.value[index]), {}, {\n      percent: percent\n    });\n  };\n  var updateFilesProgress = function updateFilesProgress() {\n    if (props.autoUpload) {\n      toUploadFiles.value = _toConsumableArray(toUploadFiles.value);\n    }\n  };\n  var onResponseError = function onResponseError(p) {\n    var _props$onOneFileFail;\n    if (!p || !p.files || !p.files[0]) return;\n    var response = p.response,\n      event = p.event,\n      files2 = p.files;\n    updateFilesProgress();\n    (_props$onOneFileFail = props.onOneFileFail) === null || _props$onOneFileFail === void 0 || _props$onOneFileFail.call(props, {\n      e: event,\n      file: files2 === null || files2 === void 0 ? void 0 : files2[0],\n      currentFiles: files2,\n      failedFiles: files2,\n      response: response\n    });\n    if (!props.multiple || props.isBatchUpload) {\n      setUploadValue([], {\n        trigger: \"progress-fail\",\n        e: p.event,\n        file: p.files[0]\n      });\n    }\n  };\n  var onResponseProgress = function onResponseProgress(p) {\n    var _props$onProgress;\n    updateFilesProgress();\n    (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 || _props$onProgress.call(props, {\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n      XMLHttpRequest: p.XMLHttpRequest\n    });\n  };\n  var onResponseSuccess = function onResponseSuccess(p) {\n    if (props.multiple && !props.uploadAllFilesInOneRequest) {\n      var _props$onOneFileSucce;\n      updateFilesProgress();\n      (_props$onOneFileSucce = props.onOneFileSuccess) === null || _props$onOneFileSucce === void 0 || _props$onOneFileSucce.call(props, {\n        e: p.event,\n        file: p.files[0],\n        response: p.response\n      });\n    }\n  };\n  function getSizeLimitError(sizeLimitObj) {\n    var limit = sizeLimitObj;\n    return limit.message ? t(limit.message, {\n      sizeLimit: limit.size\n    }) : \"\".concat(t(locale.value.sizeLimitMessage, {\n      sizeLimit: limit.size\n    }), \" \").concat(limit.unit);\n  }\n  var handleNotAutoUpload = function handleNotAutoUpload(toFiles) {\n    var tmpFiles = props.multiple && !isBatchUpload.value ? uploadValue.value.concat(toFiles) : toFiles;\n    if (!tmpFiles.length) return;\n    setUploadValue(tmpFiles, {\n      trigger: \"add\",\n      index: uploadValue.value.length,\n      file: toFiles[0],\n      files: toFiles\n    });\n    toUploadFiles.value = [];\n  };\n  var onFileChange = function onFileChange(files2) {\n    var _props$onSelectChange;\n    if (disabled.value) return;\n    var params = {\n      currentSelectedFiles: formatToUploadFile(_toConsumableArray(files2), props.format)\n    };\n    (_props$onSelectChange = props.onSelectChange) === null || _props$onSelectChange === void 0 || _props$onSelectChange.call(props, _toConsumableArray(files2), params);\n    validateFile({\n      uploadValue: uploadValue.value,\n      files: _toConsumableArray(files2),\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.multiple ? props.max : 0,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: autoUpload.value,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload\n    }).then(function (args) {\n      var _args$validateResult;\n      if (((_args$validateResult = args.validateResult) === null || _args$validateResult === void 0 ? void 0 : _args$validateResult.type) === \"BEFORE_ALL_FILES_UPLOAD\") {\n        var _props$onValidate;\n        var params2 = {\n          type: \"BEFORE_ALL_FILES_UPLOAD\",\n          files: args.files\n        };\n        (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, params2);\n        return;\n      }\n      if (args.lengthOverLimit) {\n        var _props$onValidate2;\n        var _params = {\n          type: \"FILES_OVER_LENGTH_LIMIT\",\n          files: args.files\n        };\n        (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, _params);\n        if (!args.files.length) return;\n      }\n      if (args.hasSameNameFile) {\n        var _props$onValidate3;\n        var _params2 = {\n          type: \"FILTER_FILE_SAME_NAME\",\n          files: args.files\n        };\n        (_props$onValidate3 = props.onValidate) === null || _props$onValidate3 === void 0 || _props$onValidate3.call(props, _params2);\n      }\n      if (args.fileValidateList instanceof Array) {\n        var _props$onWaitingUploa;\n        var _getFilesAndErrors = getFilesAndErrors(args.fileValidateList, getSizeLimitError),\n          sizeLimitErrors = _getFilesAndErrors.sizeLimitErrors,\n          beforeUploadErrorFiles = _getFilesAndErrors.beforeUploadErrorFiles,\n          toFiles = _getFilesAndErrors.toFiles;\n        var tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);\n        toUploadFiles.value = tmpWaitingFiles;\n        (_props$onWaitingUploa = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa === void 0 || _props$onWaitingUploa.call(props, {\n          files: tmpWaitingFiles,\n          trigger: \"validate\"\n        });\n        if (sizeLimitErrors[0]) {\n          var _props$onValidate4;\n          sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;\n          (_props$onValidate4 = props.onValidate) === null || _props$onValidate4 === void 0 || _props$onValidate4.call(props, {\n            type: \"FILE_OVER_SIZE_LIMIT\",\n            files: sizeLimitErrors.map(function (t2) {\n              return t2.file;\n            })\n          });\n        } else {\n          sizeOverLimitMessage.value = \"\";\n          if (beforeUploadErrorFiles.length) {\n            var _props$onValidate5;\n            var _params3 = {\n              type: \"CUSTOM_BEFORE_UPLOAD\",\n              files: beforeUploadErrorFiles\n            };\n            (_props$onValidate5 = props.onValidate) === null || _props$onValidate5 === void 0 || _props$onValidate5.call(props, _params3);\n          }\n        }\n        if (autoUpload.value) {\n          uploadFiles(tmpWaitingFiles);\n        } else {\n          handleNotAutoUpload(tmpWaitingFiles);\n        }\n      }\n    });\n    inputRef.value.value = null;\n  };\n  var onNormalFileChange = function onNormalFileChange(e) {\n    var fileList = getFileList(e.target.files);\n    onFileChange === null || onFileChange === void 0 || onFileChange(fileList);\n  };\n  function onDragFileChange(files2) {\n    onFileChange === null || onFileChange === void 0 || onFileChange(files2);\n  }\n  function onPasteFileChange(e) {\n    onFileChange === null || onFileChange === void 0 || onFileChange(_toConsumableArray(e.clipboardData.files));\n  }\n  function uploadFiles(toFiles) {\n    var notUploadedFiles = uploadValue.value.filter(function (t2) {\n      return t2.status !== \"success\";\n    });\n    var files2 = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;\n    if (!files2 || !files2.length) return;\n    uploading.value = true;\n    xhrReq.value = [];\n    upload({\n      action: props.action,\n      headers: props.headers,\n      method: props.method,\n      name: props.name,\n      withCredentials: props.withCredentials,\n      uploadedFiles: uploadValue.value,\n      toUploadFiles: files2,\n      multiple: props.multiple,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: props.autoUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      mockProgressDuration: props.mockProgressDuration,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress: onResponseProgress,\n      onResponseSuccess: onResponseSuccess,\n      onResponseError: onResponseError,\n      setXhrObject: function setXhrObject(xhr) {\n        var _xhr$files$;\n        if ((_xhr$files$ = xhr.files[0]) !== null && _xhr$files$ !== void 0 && _xhr$files$.raw && xhrReq.value.find(function (item) {\n          var _item$files$;\n          return ((_item$files$ = item.files[0]) === null || _item$files$ === void 0 ? void 0 : _item$files$.raw) === xhr.files[0].raw;\n        })) return;\n        xhrReq.value = xhrReq.value.concat(xhr);\n      }\n    }).then(function (_ref) {\n      var status = _ref.status,\n        data = _ref.data,\n        list = _ref.list,\n        failedFiles = _ref.failedFiles;\n      uploading.value = false;\n      if (status === \"success\") {\n        var _props$onSuccess;\n        setUploadValue(_toConsumableArray(data.files), {\n          trigger: \"add\",\n          file: data.files[0]\n        });\n        xhrReq.value = [];\n        (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 || _props$onSuccess.call(props, {\n          fileList: data.files,\n          currentFiles: files2,\n          file: files2[0],\n          results: list === null || list === void 0 ? void 0 : list.map(function (t2) {\n            return t2.data;\n          }),\n          response: data.response || list.map(function (t2) {\n            return t2.data.response;\n          }),\n          XMLHttpRequest: data.XMLHttpRequest\n        });\n      } else if (failedFiles !== null && failedFiles !== void 0 && failedFiles[0]) {\n        var _props$onFail;\n        (_props$onFail = props.onFail) === null || _props$onFail === void 0 || _props$onFail.call(props, {\n          e: data.event,\n          file: failedFiles[0],\n          failedFiles: failedFiles,\n          currentFiles: files2,\n          response: data.response,\n          XMLHttpRequest: data.XMLHttpRequest\n        });\n      }\n      if (autoUpload.value) {\n        var _props$onWaitingUploa2;\n        toUploadFiles.value = failedFiles;\n        (_props$onWaitingUploa2 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa2 === void 0 || _props$onWaitingUploa2.call(props, {\n          files: failedFiles,\n          trigger: \"uploaded\"\n        });\n      }\n    });\n  }\n  function onInnerRemove(p) {\n    var _p$e$stopPropagation, _p$e, _props$onRemove;\n    sizeOverLimitMessage.value = \"\";\n    (_p$e$stopPropagation = (_p$e = p.e).stopPropagation) === null || _p$e$stopPropagation === void 0 || _p$e$stopPropagation.call(_p$e);\n    var changePrams = {\n      e: p.e,\n      trigger: \"remove\",\n      index: p.index,\n      file: p.file\n    };\n    if (props.isBatchUpload || !props.multiple) {\n      var _props$onWaitingUploa3;\n      toUploadFiles.value = [];\n      (_props$onWaitingUploa3 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa3 === void 0 || _props$onWaitingUploa3.call(props, {\n        files: [],\n        trigger: \"remove\"\n      });\n      setUploadValue([], changePrams);\n    } else if (!props.autoUpload) {\n      uploadValue.value.splice(p.index, 1);\n      setUploadValue(_toConsumableArray(uploadValue.value), changePrams);\n    } else {\n      if (p.index < uploadValue.value.length) {\n        uploadValue.value.splice(p.index, 1);\n        setUploadValue(_toConsumableArray(uploadValue.value), changePrams);\n      } else {\n        var _props$onWaitingUploa4;\n        toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);\n        toUploadFiles.value = _toConsumableArray(toUploadFiles.value);\n        (_props$onWaitingUploa4 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa4 === void 0 || _props$onWaitingUploa4.call(props, {\n          files: _toConsumableArray(toUploadFiles.value),\n          trigger: \"remove\"\n        });\n      }\n    }\n    (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 || _props$onRemove.call(props, p);\n  }\n  var triggerUpload = function triggerUpload(e) {\n    var _e$stopPropagation;\n    if (disabled.value || !inputRef.value) return;\n    e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);\n    inputRef.value.click();\n  };\n  var cancelUpload = function cancelUpload(context) {\n    var _xhrReq$value, _props$onCancelUpload;\n    (_xhrReq$value = xhrReq.value) === null || _xhrReq$value === void 0 || _xhrReq$value.forEach(function (item) {\n      var _item$xhrReq;\n      (_item$xhrReq = item.xhrReq) === null || _item$xhrReq === void 0 || _item$xhrReq.abort();\n    });\n    uploading.value = false;\n    if (autoUpload.value) {\n      toUploadFiles.value = [];\n    } else {\n      setUploadValue(uploadValue.value.map(function (item) {\n        if (item.status !== \"success\") {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            status: \"waiting\"\n          });\n        }\n        return item;\n      }), {\n        trigger: \"abort\"\n      });\n    }\n    if (context !== null && context !== void 0 && context.file && !autoUpload.value) {\n      onInnerRemove === null || onInnerRemove === void 0 || onInnerRemove({\n        file: context.file,\n        e: context.e,\n        index: 0\n      });\n    }\n    (_props$onCancelUpload = props.onCancelUpload) === null || _props$onCancelUpload === void 0 || _props$onCancelUpload.call(props);\n  };\n  return {\n    t: t,\n    locale: locale,\n    classPrefix: classPrefix,\n    triggerUploadText: triggerUploadText,\n    toUploadFiles: toUploadFiles,\n    uploadValue: uploadValue,\n    displayFiles: displayFiles,\n    sizeOverLimitMessage: sizeOverLimitMessage,\n    uploading: uploading,\n    tipsClasses: tipsClasses,\n    errorClasses: errorClasses,\n    placeholderClass: placeholderClass,\n    inputRef: inputRef,\n    disabled: disabled,\n    xhrReq: xhrReq,\n    uploadFilePercent: uploadFilePercent,\n    uploadFiles: uploadFiles,\n    onFileChange: onFileChange,\n    onNormalFileChange: onNormalFileChange,\n    onDragFileChange: onDragFileChange,\n    onPasteFileChange: onPasteFileChange,\n    onInnerRemove: onInnerRemove,\n    triggerUpload: triggerUpload,\n    cancelUpload: cancelUpload\n  };\n}\nexport { useUpload as default };","map":{"version":3,"names":["useUpload","props","inputRef","ref","_toRefs","toRefs","disabled","autoUpload","isBatchUpload","multiple","files","modelValue","defaultFiles","_useConfig","useConfig","globalConfig","t","classPrefix","_useVModel","useVModel","value","onChange","_useVModel2","_slicedToArray","uploadValue","setUploadValue","xhrReq","toUploadFiles","sizeOverLimitMessage","locale","computed","merge_1","tipsClasses","concat","errorClasses","placeholderClass","triggerUploadText","_uploadValue$value","field","getTriggerTextField","status","uploading","displayFiles","getDisplayFiles","uploadFilePercent","params","file","percent","operationUploadFiles","index","findIndex","item","raw","_objectSpread","updateFilesProgress","_toConsumableArray","onResponseError","p","_props$onOneFileFail","response","event","files2","onOneFileFail","call","e","currentFiles","failedFiles","trigger","onResponseProgress","_props$onProgress","onProgress","type","XMLHttpRequest","onResponseSuccess","uploadAllFilesInOneRequest","_props$onOneFileSucce","onOneFileSuccess","getSizeLimitError","sizeLimitObj","limit","message","sizeLimit","size","sizeLimitMessage","unit","handleNotAutoUpload","toFiles","tmpFiles","length","onFileChange","_props$onSelectChange","currentSelectedFiles","formatToUploadFile","format","onSelectChange","validateFile","allowUploadDuplicateFile","max","beforeUpload","beforeAllFilesUpload","then","args","_args$validateResult","validateResult","_props$onValidate","params2","onValidate","lengthOverLimit","_props$onValidate2","_params","hasSameNameFile","_props$onValidate3","_params2","fileValidateList","Array","_props$onWaitingUploa","_getFilesAndErrors","getFilesAndErrors","sizeLimitErrors","beforeUploadErrorFiles","tmpWaitingFiles","onWaitingUploadFilesChange","_props$onValidate4","error","map","t2","_props$onValidate5","_params3","uploadFiles","onNormalFileChange","fileList","getFileList","target","onDragFileChange","onPasteFileChange","clipboardData","notUploadedFiles","filter","upload","action","headers","method","name","withCredentials","uploadedFiles","useMockProgress","data","mockProgressDuration","requestMethod","formatRequest","formatResponse","setXhrObject","xhr","_xhr$files$","find","_item$files$","_ref","list","_props$onSuccess","onSuccess","results","_props$onFail","onFail","_props$onWaitingUploa2","onInnerRemove","_p$e$stopPropagation","_p$e","_props$onRemove","stopPropagation","changePrams","_props$onWaitingUploa3","splice","_props$onWaitingUploa4","onRemove","triggerUpload","_e$stopPropagation","click","cancelUpload","context","_xhrReq$value","_props$onCancelUpload","forEach","_item$xhrReq","abort","onCancelUpload"],"sources":["../../../src/upload/hooks/useUpload.ts"],"sourcesContent":["import { ref, computed, toRefs } from 'vue';\nimport merge from 'lodash/merge';\nimport { SizeLimitObj, TdUploadProps, UploadChangeContext, UploadFile, UploadRemoveContext } from '../type';\nimport {\n  getFilesAndErrors,\n  validateFile,\n  upload,\n  getTriggerTextField,\n  getDisplayFiles,\n  formatToUploadFile,\n} from '../../_common/js/upload/main';\nimport { getFileList } from '../../_common/js/upload/utils';\nimport useVModel from '../../hooks/useVModel';\nimport { InnerProgressContext, OnResponseErrorContext, SuccessContext } from '../../_common/js/upload/types';\nimport { useConfig } from '../../hooks/useConfig';\n\nexport type ValidateParams = Parameters<TdUploadProps['onValidate']>[0];\n\n/**\n * 上传组件全部逻辑，方便脱离 UI，自定义 UI 组件\n */\nexport default function useUpload(props: TdUploadProps) {\n  const inputRef = ref<HTMLInputElement>();\n  // TODO: Form 表单控制上传组件是否禁用\n  const { disabled, autoUpload, isBatchUpload, multiple, files, modelValue, defaultFiles } = toRefs(props);\n  const { globalConfig, t, classPrefix } = useConfig('upload');\n  const [uploadValue, setUploadValue] = useVModel(files, modelValue, defaultFiles.value, props.onChange, 'files');\n  const xhrReq = ref<{ files: UploadFile[]; xhrReq: XMLHttpRequest }[]>([]);\n  const toUploadFiles = ref<UploadFile[]>([]);\n  const sizeOverLimitMessage = ref('');\n\n  const locale = computed(() => merge({}, globalConfig.value, props.locale));\n\n  const tipsClasses = `${classPrefix.value}-upload__tips ${classPrefix.value}-size-s`;\n  const errorClasses = [tipsClasses].concat(`${classPrefix.value}-upload__tips-error`);\n  const placeholderClass = `${classPrefix.value}-upload__placeholder`;\n\n  // 单文件场景：触发元素文本\n  const triggerUploadText = computed(() => {\n    const field = getTriggerTextField({\n      isBatchUpload: isBatchUpload.value,\n      multiple: multiple.value,\n      status: uploadValue.value?.[0]?.status,\n      autoUpload: autoUpload.value,\n    });\n    return locale.value.triggerUploadText[field];\n  });\n\n  const uploading = ref(false);\n\n  // 文件列表显示的内容（自动上传和非自动上传有所不同）\n  const displayFiles = computed(() => {\n    return getDisplayFiles({\n      multiple: props.multiple,\n      toUploadFiles: toUploadFiles.value,\n      uploadValue: uploadValue.value,\n      autoUpload: autoUpload.value,\n      isBatchUpload: isBatchUpload.value,\n    });\n  });\n\n  const uploadFilePercent = (params: { file: UploadFile; percent: number }) => {\n    const { file, percent } = params;\n    const operationUploadFiles = autoUpload.value ? toUploadFiles : uploadValue;\n    const index = operationUploadFiles.value.findIndex((item) => file.raw === item.raw);\n    operationUploadFiles.value[index] = { ...operationUploadFiles.value[index], percent };\n  };\n\n  const updateFilesProgress = () => {\n    if (props.autoUpload) {\n      toUploadFiles.value = [...toUploadFiles.value];\n    }\n  };\n\n  const onResponseError = (p: OnResponseErrorContext) => {\n    if (!p || !p.files || !p.files[0]) return;\n    const { response, event, files } = p;\n    updateFilesProgress();\n    props.onOneFileFail?.({\n      e: event,\n      file: files?.[0],\n      currentFiles: files,\n      failedFiles: files,\n      response,\n    });\n    // 单选或多文件替换，需要清空上一次上传成功的文件\n    if (!props.multiple || props.isBatchUpload) {\n      setUploadValue([], {\n        trigger: 'progress-fail',\n        e: p.event,\n        file: p.files[0],\n      });\n    }\n  };\n\n  // 多文件上传场景，单个文件进度\n  const onResponseProgress = (p: InnerProgressContext) => {\n    updateFilesProgress();\n    props.onProgress?.({\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n      XMLHttpRequest: p.XMLHttpRequest,\n    });\n  };\n\n  // 多文件上传场景，单个文件上传成功后\n  const onResponseSuccess = (p: SuccessContext) => {\n    // 只有多个上传请求同时触发时才需 onOneFileSuccess\n    if (props.multiple && !props.uploadAllFilesInOneRequest) {\n      updateFilesProgress();\n      props.onOneFileSuccess?.({\n        e: p.event,\n        file: p.files[0],\n        response: p.response,\n      });\n    }\n  };\n\n  function getSizeLimitError(sizeLimitObj: SizeLimitObj) {\n    const limit = sizeLimitObj;\n    return limit.message\n      ? t(limit.message, { sizeLimit: limit.size })\n      : `${t(locale.value.sizeLimitMessage, { sizeLimit: limit.size })} ${limit.unit}`;\n  }\n\n  const handleNotAutoUpload = (toFiles: UploadFile[]) => {\n    const tmpFiles = props.multiple && !isBatchUpload.value ? uploadValue.value.concat(toFiles) : toFiles;\n    if (!tmpFiles.length) return;\n    setUploadValue(tmpFiles, {\n      trigger: 'add',\n      index: uploadValue.value.length,\n      file: toFiles[0],\n      files: toFiles,\n    });\n    toUploadFiles.value = [];\n  };\n\n  const onFileChange = (files: File[]) => {\n    if (disabled.value) return;\n    const params = { currentSelectedFiles: formatToUploadFile([...files], props.format) };\n    props.onSelectChange?.([...files], params);\n    validateFile({\n      uploadValue: uploadValue.value,\n      // @ts-ignore\n      files: [...files],\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.multiple ? props.max : 0,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: autoUpload.value,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload,\n    }).then((args) => {\n      // 自定义全文件校验不通过\n      if (args.validateResult?.type === 'BEFORE_ALL_FILES_UPLOAD') {\n        const params: ValidateParams = { type: 'BEFORE_ALL_FILES_UPLOAD', files: args.files };\n        props.onValidate?.(params);\n        return;\n      }\n      // 文件数量校验不通过\n      if (args.lengthOverLimit) {\n        const params: ValidateParams = { type: 'FILES_OVER_LENGTH_LIMIT', files: args.files };\n        props.onValidate?.(params);\n        if (!args.files.length) return;\n      }\n      // 过滤相同的文件名\n      if (args.hasSameNameFile) {\n        const params: ValidateParams = { type: 'FILTER_FILE_SAME_NAME', files: args.files };\n        props.onValidate?.(params);\n      }\n      // 文件大小校验结果处理（已过滤超出限制的文件）\n      if (args.fileValidateList instanceof Array) {\n        const { sizeLimitErrors, beforeUploadErrorFiles, toFiles } = getFilesAndErrors(\n          args.fileValidateList,\n          getSizeLimitError,\n        );\n        const tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);\n        toUploadFiles.value = tmpWaitingFiles;\n        props.onWaitingUploadFilesChange?.({ files: tmpWaitingFiles, trigger: 'validate' });\n        // 文件大小处理\n        if (sizeLimitErrors[0]) {\n          sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;\n          props.onValidate?.({ type: 'FILE_OVER_SIZE_LIMIT', files: sizeLimitErrors.map((t) => t.file) });\n        } else {\n          sizeOverLimitMessage.value = '';\n          // 自定义方法 beforeUpload 拦截的文件\n          if (beforeUploadErrorFiles.length) {\n            const params: ValidateParams = { type: 'CUSTOM_BEFORE_UPLOAD', files: beforeUploadErrorFiles };\n            props.onValidate?.(params);\n          }\n        }\n        // 如果是自动上传\n        if (autoUpload.value) {\n          uploadFiles(tmpWaitingFiles);\n        } else {\n          handleNotAutoUpload(tmpWaitingFiles);\n        }\n      }\n    });\n\n    // 清空 <input type=\"file\"> 元素的文件，避免出现重复文件无法选择的情况\n    inputRef.value.value = null;\n  };\n\n  const onNormalFileChange = (e: InputEvent) => {\n    const fileList = getFileList((e.target as HTMLInputElement).files);\n    onFileChange?.(fileList);\n  };\n\n  function onDragFileChange(files: File[]) {\n    onFileChange?.(files);\n  }\n\n  function onPasteFileChange(e: ClipboardEvent) {\n    onFileChange?.([...e.clipboardData.files]);\n  }\n\n  /**\n   * 上传文件。对外暴露方法，修改时需谨慎\n   * @param toFiles 本地上传的文件列表\n   */\n  function uploadFiles(toFiles?: UploadFile[]) {\n    const notUploadedFiles = uploadValue.value.filter((t) => t.status !== 'success');\n    const files = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;\n    if (!files || !files.length) return;\n    uploading.value = true;\n    xhrReq.value = [];\n    upload({\n      action: props.action,\n      headers: props.headers,\n      method: props.method,\n      name: props.name,\n      withCredentials: props.withCredentials,\n      uploadedFiles: uploadValue.value,\n      toUploadFiles: files,\n      multiple: props.multiple,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: props.autoUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      mockProgressDuration: props.mockProgressDuration,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress,\n      onResponseSuccess,\n      onResponseError,\n      setXhrObject: (xhr) => {\n        if (xhr.files[0]?.raw && xhrReq.value.find((item) => item.files[0]?.raw === xhr.files[0].raw)) return;\n        xhrReq.value = xhrReq.value.concat(xhr);\n      },\n    }).then(\n      // 多文件场景时，全量文件完成后\n      ({ status, data, list, failedFiles }) => {\n        uploading.value = false;\n        if (status === 'success') {\n          setUploadValue([...data.files], {\n            trigger: 'add',\n            file: data.files[0],\n          });\n          xhrReq.value = [];\n          props.onSuccess?.({\n            fileList: data.files,\n            currentFiles: files,\n            file: files[0],\n            // 只有全部请求完成后，才会存在该字段\n            results: list?.map((t) => t.data),\n            // 单文件单请求有一个 response，多文件多请求有多个 response\n            response: data.response || list.map((t) => t.data.response),\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        } else if (failedFiles?.[0]) {\n          props.onFail?.({\n            e: data.event,\n            file: failedFiles[0],\n            failedFiles,\n            currentFiles: files,\n            response: data.response,\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        }\n\n        // 非自动上传，文件都在 uploadValue，不涉及 toUploadFiles\n        if (autoUpload.value) {\n          toUploadFiles.value = failedFiles;\n          props.onWaitingUploadFilesChange?.({ files: failedFiles, trigger: 'uploaded' });\n        }\n      },\n    );\n  }\n\n  function onInnerRemove(p: UploadRemoveContext) {\n    sizeOverLimitMessage.value = '';\n    p.e.stopPropagation?.();\n    const changePrams: UploadChangeContext = {\n      e: p.e,\n      trigger: 'remove',\n      index: p.index,\n      file: p.file,\n    };\n    // remove all files for batchUpload\n    if (props.isBatchUpload || !props.multiple) {\n      toUploadFiles.value = [];\n      props.onWaitingUploadFilesChange?.({ files: [], trigger: 'remove' });\n      setUploadValue([], changePrams);\n    } else if (!props.autoUpload) {\n      uploadValue.value.splice(p.index, 1);\n      setUploadValue([...uploadValue.value], changePrams);\n    } else {\n      // autoUpload 场景下， p.index < uploadValue.length 表示移除已经上传成功的文件；反之表示移除待上传列表文件\n      // eslint-disable-next-line\n      if (p.index < uploadValue.value.length) {\n        uploadValue.value.splice(p.index, 1);\n        setUploadValue([...uploadValue.value], changePrams);\n      } else {\n        toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);\n        toUploadFiles.value = [...toUploadFiles.value];\n        props.onWaitingUploadFilesChange?.({ files: [...toUploadFiles.value], trigger: 'remove' });\n      }\n    }\n    props.onRemove?.(p);\n  }\n\n  const triggerUpload = (e?: MouseEvent) => {\n    if (disabled.value || !inputRef.value) return;\n    e?.stopPropagation?.();\n    (inputRef.value as HTMLInputElement).click();\n  };\n\n  const cancelUpload = (context?: { file?: UploadFile; e?: MouseEvent }) => {\n    xhrReq.value?.forEach((item) => {\n      item.xhrReq?.abort();\n    });\n    uploading.value = false;\n\n    // autoUpload do not need to reset to waiting state\n    if (autoUpload.value) {\n      toUploadFiles.value = [];\n    } else {\n      setUploadValue(\n        uploadValue.value.map((item) => {\n          if (item.status !== 'success') {\n            return { ...item, status: 'waiting' };\n          }\n          return item;\n        }),\n        { trigger: 'abort' },\n      );\n    }\n\n    if (context?.file && !autoUpload.value) {\n      onInnerRemove?.({ file: context.file, e: context.e, index: 0 });\n    }\n\n    props.onCancelUpload?.();\n  };\n\n  return {\n    t,\n    locale,\n    classPrefix,\n    triggerUploadText,\n    toUploadFiles,\n    uploadValue,\n    displayFiles,\n    sizeOverLimitMessage,\n    uploading,\n    tipsClasses,\n    errorClasses,\n    placeholderClass,\n    inputRef,\n    disabled,\n    xhrReq,\n    uploadFilePercent,\n    uploadFiles,\n    onFileChange,\n    onNormalFileChange,\n    onDragFileChange,\n    onPasteFileChange,\n    onInnerRemove,\n    triggerUpload,\n    cancelUpload,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAwBA,UAAUC,KAAsB;EACtD,IAAMC,QAAA,GAAWC,GAAsB;EAEjC,IAAAC,OAAA,GAAqFC,MAAA,CAAOJ,KAAK;IAA/FK,QAAU,GAAAF,OAAA,CAAVE,QAAU;IAAAC,UAAA,GAAAH,OAAA,CAAAG,UAAA;IAAYC,aAAe,GAAAJ,OAAA,CAAfI,aAAe;IAAAC,QAAA,GAAAL,OAAA,CAAAK,QAAA;IAAUC,KAAA,GAAAN,OAAA,CAAAM,KAAA;IAAOC,UAAY,GAAAP,OAAA,CAAZO,UAAY;IAAAC,YAAA,GAAAR,OAAA,CAAAQ,YAAA;EAC1E,IAAAC,UAAA,GAAyCC,SAAA,CAAU,QAAQ;IAAnDC,YAAc,GAAAF,UAAA,CAAdE,YAAc;IAAAC,CAAA,GAAAH,UAAA,CAAAG,CAAA;IAAGC,WAAY,GAAAJ,UAAA,CAAZI,WAAY;EAC/B,IAAAC,UAAA,GAAgCC,SAAA,CAAUT,KAAO,EAAAC,UAAA,EAAYC,YAAa,CAAAQ,KAAA,EAAOnB,KAAM,CAAAoB,QAAA,EAAU,OAAO;IAAAC,WAAA,GAAAC,cAAA,CAAAL,UAAA;IAAvGM,WAAa,GAAAF,WAAA;IAAAG,cAAc,GAAAH,WAAA;EAC5B,IAAAI,MAAA,GAASvB,GAAuD,GAAE;EAClE,IAAAwB,aAAA,GAAgBxB,GAAkB,GAAE;EACpC,IAAAyB,oBAAA,GAAuBzB,GAAA,CAAI,EAAE;EAE7B,IAAA0B,MAAA,GAASC,QAAS;IAAA,OAAMC,OAAM,KAAIhB,YAAa,CAAAK,KAAA,EAAOnB,KAAM,CAAA4B,MAAM,CAAC;GAAA;EAEzE,IAAMG,WAAc,MAAAC,MAAA,CAAGhB,WAAY,CAAAG,KAAA,oBAAAa,MAAA,CAAsBhB,WAAY,CAAAG,KAAA;EACrE,IAAMc,YAAA,GAAe,CAACF,WAAW,EAAEC,MAAO,IAAAA,MAAA,CAAGhB,WAAA,CAAYG,KAA0B;EAC7E,IAAAe,gBAAA,MAAAF,MAAA,CAAsBhB,WAAY,CAAAG,KAAA;EAGlC,IAAAgB,iBAAA,GAAoBN,QAAA,CAAS,YAAM;IAAA,IAAAO,kBAAA;IACvC,IAAMC,KAAA,GAAQC,mBAAoB;MAChC/B,aAAA,EAAeA,aAAc,CAAAY,KAAA;MAC7BX,QAAA,EAAUA,QAAS,CAAAW,KAAA;MACnBoB,MAAA,GAAAH,kBAAA,GAAQb,WAAY,CAAAJ,KAAA,cAAAiB,kBAAA,gBAAAA,kBAAA,GAAZA,kBAAA,CAAoB,CAAI,eAAAA,kBAAA,KAAxB,kBAAAA,kBAAA,CAAwBG,MAAA;MAChCjC,UAAA,EAAYA,UAAW,CAAAa;IACzB,CAAC;IACM,OAAAS,MAAA,CAAOT,KAAA,CAAMgB,iBAAkB,CAAAE,KAAA;EACxC,CAAC;EAEK,IAAAG,SAAA,GAAYtC,GAAA,CAAI,KAAK;EAGrB,IAAAuC,YAAA,GAAeZ,QAAA,CAAS,YAAM;IAClC,OAAOa,eAAgB;MACrBlC,QAAA,EAAUR,KAAM,CAAAQ,QAAA;MAChBkB,aAAA,EAAeA,aAAc,CAAAP,KAAA;MAC7BI,WAAA,EAAaA,WAAY,CAAAJ,KAAA;MACzBb,UAAA,EAAYA,UAAW,CAAAa,KAAA;MACvBZ,aAAA,EAAeA,aAAc,CAAAY;IAC/B,CAAC;EACH,CAAC;EAEK,IAAAwB,iBAAA,GAAoB,SAApBA,kBAAqBC,MAAkD;IACrE,IAAEC,IAAM,GAAYD,MAAA,CAAlBC,IAAM;MAAAC,OAAA,GAAYF,MAAA,CAAZE,OAAA;IACR,IAAAC,oBAAA,GAAuBzC,UAAW,CAAAa,KAAA,GAAQO,aAAgB,GAAAH,WAAA;IAC1D,IAAAyB,KAAA,GAAQD,oBAAA,CAAqB5B,KAAM,CAAA8B,SAAA,CAAU,UAACC,IAAS;MAAA,OAAAL,IAAA,CAAKM,GAAQ,KAAAD,IAAA,CAAKC,GAAG;KAAA;IAClFJ,oBAAA,CAAqB5B,KAAA,CAAM6B,KAAS,IAAAI,aAAA,CAAAA,aAAA,KAAKL,oBAAqB,CAAA5B,KAAA,CAAM6B,KAAA;MAAQF,OAAQ,EAARA;KAAQ;GACtF;EAEA,IAAMO,mBAAA,GAAsB,SAAtBA,oBAAA,EAA4B;IAChC,IAAIrD,KAAA,CAAMM,UAAY;MACpBoB,aAAA,CAAcP,KAAQ,GAAAmC,kBAAA,CAAI5B,aAAA,CAAcP,KAAK;IAC/C;GACF;EAEM,IAAAoC,eAAA,GAAkB,SAAlBA,gBAAmBC,CAA8B;IAAA,IAAAC,oBAAA;IACrD,IAAI,CAACD,CAAK,KAACA,CAAA,CAAE/C,KAAS,KAAC+C,CAAA,CAAE/C,KAAM,KAAI;IACnC,IAAQiD,QAAA,GAA2BF,CAAA,CAA3BE,QAAA;MAAUC,KAAO,GAAUH,CAAA,CAAjBG,KAAO;MAAAC,MAAA,GAAUJ,CAAA,CAAV/C,KAAA;IACL4C,mBAAA;IACpB,CAAAI,oBAAA,GAAAzD,KAAA,CAAM6D,aAAgB,cAAAJ,oBAAA,eAAtBA,oBAAA,CAAAK,IAAA,CAAA9D,KAAA,EAAsB;MACpB+D,CAAG,EAAAJ,KAAA;MACHd,IAAA,EAAMe,MAAQ,KAAR,QAAAA,MAAQ,uBAARA,MAAQ;MACdI,YAAc,EAAAJ,MAAA;MACdK,WAAa,EAAAL,MAAA;MACbF,QAAA,EAAAA;IACF,CAAC;IAED,IAAI,CAAC1D,KAAA,CAAMQ,QAAY,IAAAR,KAAA,CAAMO,aAAe;MAC1CiB,cAAA,CAAe,EAAI;QACjB0C,OAAS;QACTH,CAAA,EAAGP,CAAE,CAAAG,KAAA;QACLd,IAAA,EAAMW,CAAA,CAAE/C,KAAM;MAChB,CAAC;IACH;GACF;EAGM,IAAA0D,kBAAA,GAAqB,SAArBA,mBAAsBX,CAA4B;IAAA,IAAAY,iBAAA;IAClCf,mBAAA;IACpB,CAAAe,iBAAA,GAAApE,KAAA,CAAMqE,UAAa,cAAAD,iBAAA,eAAnBA,iBAAA,CAAAN,IAAA,CAAA9D,KAAA,EAAmB;MACjB+D,CAAA,EAAGP,CAAE,CAAAG,KAAA;MACLd,IAAA,EAAMW,CAAE,CAAAX,IAAA;MACRmB,YAAA,EAAcR,CAAE,CAAA/C,KAAA;MAChBqC,OAAA,EAASU,CAAE,CAAAV,OAAA;MACXwB,IAAA,EAAMd,CAAE,CAAAc,IAAA;MACRC,cAAA,EAAgBf,CAAE,CAAAe;IACpB,CAAC;GACH;EAGM,IAAAC,iBAAA,GAAoB,SAApBA,kBAAqBhB,CAAsB;IAE/C,IAAIxD,KAAM,CAAAQ,QAAA,IAAY,CAACR,KAAA,CAAMyE,0BAA4B;MAAA,IAAAC,qBAAA;MACnCrB,mBAAA;MACpB,CAAAqB,qBAAA,GAAA1E,KAAA,CAAM2E,gBAAmB,cAAAD,qBAAA,eAAzBA,qBAAA,CAAAZ,IAAA,CAAA9D,KAAA,EAAyB;QACvB+D,CAAA,EAAGP,CAAE,CAAAG,KAAA;QACLd,IAAA,EAAMW,CAAA,CAAE/C,KAAM;QACdiD,QAAA,EAAUF,CAAE,CAAAE;MACd,CAAC;IACH;GACF;EAEA,SAASkB,kBAAkBC,YAA4B;IACrD,IAAMC,KAAQ,GAAAD,YAAA;IACP,OAAAC,KAAA,CAAMC,OAAA,GACThE,CAAE,CAAA+D,KAAA,CAAMC,OAAA,EAAS;MAAEC,SAAA,EAAWF,KAAM,CAAAG;KAAM,OAAAjD,MAAA,CACvCjB,CAAE,CAAAa,MAAA,CAAOT,KAAA,CAAM+D,gBAAkB;MAAEF,SAAA,EAAWF,KAAM,CAAAG;IAAK,CAAC,QAAAjD,MAAA,CAAK8C,KAAM,CAAAK,IAAA;EAC9E;EAEM,IAAAC,mBAAA,GAAsB,SAAtBA,oBAAuBC,OAA0B;IAC/C,IAAAC,QAAA,GAAWtF,KAAM,CAAAQ,QAAA,IAAY,CAACD,aAAA,CAAcY,KAAA,GAAQI,WAAY,CAAAJ,KAAA,CAAMa,MAAO,CAAAqD,OAAO,CAAI,GAAAA,OAAA;IAC9F,IAAI,CAACC,QAAS,CAAAC,MAAA,EAAQ;IACtB/D,cAAA,CAAe8D,QAAU;MACvBpB,OAAS;MACTlB,KAAA,EAAOzB,WAAA,CAAYJ,KAAM,CAAAoE,MAAA;MACzB1C,IAAA,EAAMwC,OAAQ;MACd5E,KAAO,EAAA4E;IACT,CAAC;IACD3D,aAAA,CAAcP,KAAA,GAAQ,EAAC;GACzB;EAEM,IAAAqE,YAAA,GAAe,SAAfA,aAAgB5B,MAAkB;IAAA,IAAA6B,qBAAA;IACtC,IAAIpF,QAAS,CAAAc,KAAA,EAAO;IACd,IAAAyB,MAAA,GAAS;MAAE8C,oBAAA,EAAsBC,kBAAmB,CAAArC,kBAAA,CAAIM,MAAK,GAAG5D,KAAM,CAAA4F,MAAM;KAAE;IACpF,CAAAH,qBAAA,GAAAzF,KAAA,CAAM6F,cAAiB,cAAAJ,qBAAA,KAAvB,UAAAA,qBAAA,CAAA3B,IAAA,CAAA9D,KAAA,EAAAsD,kBAAA,CAA2BM,MAAK,GAAGhB,MAAM;IAC5BkD,YAAA;MACXvE,WAAA,EAAaA,WAAY,CAAAJ,KAAA;MAEzBV,KAAA,EAAA6C,kBAAA,CAAWM,MAAK;MAChBmC,wBAAA,EAA0B/F,KAAM,CAAA+F,wBAAA;MAChCC,GAAK,EAAAhG,KAAA,CAAMQ,QAAW,GAAAR,KAAA,CAAMgG,GAAM;MAClChB,SAAA,EAAWhF,KAAM,CAAAgF,SAAA;MACjBzE,aAAA,EAAeA,aAAc,CAAAY,KAAA;MAC7Bb,UAAA,EAAYA,UAAW,CAAAa,KAAA;MACvByE,MAAA,EAAQ5F,KAAM,CAAA4F,MAAA;MACdK,YAAA,EAAcjG,KAAM,CAAAiG,YAAA;MACpBC,oBAAA,EAAsBlG,KAAM,CAAAkG;IAC9B,CAAC,EAAEC,IAAK,WAACC,IAAS;MAAA,IAAAC,oBAAA;MAEZ,MAAAA,oBAAA,GAAAD,IAAA,CAAKE,cAAgB,cAAAD,oBAAA,uBAArBA,oBAAA,CAAqB/B,IAAA,MAAS,yBAA2B;QAAA,IAAAiC,iBAAA;QAC3D,IAAMC,OAAA,GAAyB;UAAElC,IAAA,EAAM,yBAA2B;UAAA7D,KAAA,EAAO2F,IAAA,CAAK3F;SAAM;QACpF,CAAA8F,iBAAA,GAAAvG,KAAA,CAAMyG,UAAA,cAAAF,iBAAA,KAAN,UAAAA,iBAAA,CAAAzC,IAAA,CAAA9D,KAAA,EAAmBwG,OAAM;QACzB;MACF;MAEA,IAAIJ,IAAA,CAAKM,eAAiB;QAAA,IAAAC,kBAAA;QACxB,IAAMC,OAAA,GAAyB;UAAEtC,IAAA,EAAM,yBAA2B;UAAA7D,KAAA,EAAO2F,IAAA,CAAK3F;SAAM;QACpF,CAAAkG,kBAAA,GAAA3G,KAAA,CAAMyG,UAAA,cAAAE,kBAAA,KAAN,UAAAA,kBAAA,CAAA7C,IAAA,CAAA9D,KAAA,EAAmB4G,OAAM;QACrB,KAACR,IAAA,CAAK3F,KAAM,CAAA8E,MAAA,EAAQ;MAC1B;MAEA,IAAIa,IAAA,CAAKS,eAAiB;QAAA,IAAAC,kBAAA;QACxB,IAAMC,QAAA,GAAyB;UAAEzC,IAAA,EAAM,uBAAyB;UAAA7D,KAAA,EAAO2F,IAAA,CAAK3F;SAAM;QAClF,CAAAqG,kBAAA,GAAA9G,KAAA,CAAMyG,UAAA,cAAAK,kBAAA,KAAN,UAAAA,kBAAA,CAAAhD,IAAA,CAAA9D,KAAA,EAAmB+G,QAAM;MAC3B;MAEI,IAAAX,IAAA,CAAKY,gBAAA,YAA4BC,KAAO;QAAA,IAAAC,qBAAA;QAC1C,IAAAC,kBAAA,GAA6DC,iBAAA,CAC3DhB,IAAK,CAAAY,gBAAA,EACLpC,iBACF;UAHQyC,eAAA,GAAAF,kBAAA,CAAAE,eAAA;UAAiBC,sBAAwB,GAAAH,kBAAA,CAAxBG,sBAAwB;UAAAjC,OAAA,GAAA8B,kBAAA,CAAA9B,OAAA;QAIjD,IAAMkC,eAAA,GAAkBjH,UAAW,CAAAa,KAAA,GAAQkE,OAAA,GAAU3D,aAAc,CAAAP,KAAA,CAAMa,MAAA,CAAOqD,OAAO;QACvF3D,aAAA,CAAcP,KAAQ,GAAAoG,eAAA;QACtB,CAAAL,qBAAA,GAAAlH,KAAA,CAAMwH,0BAAA,cAAAN,qBAAA,eAANA,qBAAA,CAAApD,IAAA,CAAA9D,KAAA,EAAmC;UAAES,KAAA,EAAO8G,eAAiB;UAAArD,OAAA,EAAS;QAAW,CAAC;QAElF,IAAImD,eAAA,CAAgB,CAAI;UAAA,IAAAI,kBAAA;UACtB9F,oBAAA,CAAqBR,KAAQ,GAAAkG,eAAA,CAAgB,CAAG,EAAAxE,IAAA,CAAKa,QAAS,CAAAgE,KAAA;UAC9D,CAAAD,kBAAA,GAAAzH,KAAA,CAAMyG,UAAa,cAAAgB,kBAAA,eAAnBA,kBAAA,CAAA3D,IAAA,CAAA9D,KAAA,EAAmB;YAAEsE,IAAM;YAAwB7D,KAAO,EAAA4G,eAAA,CAAgBM,GAAI,WAACC,EAAM;cAAA,OAAAA,EAAA,CAAE/E,IAAI;YAAA;UAAE,CAAC;QAChG,CAAO;UACLlB,oBAAA,CAAqBR,KAAQ;UAE7B,IAAImG,sBAAA,CAAuB/B,MAAQ;YAAA,IAAAsC,kBAAA;YACjC,IAAMC,QAAyB;cAAExD,IAAM;cAAwB7D,KAAA,EAAO6G;aAAuB;YAC7F,CAAAO,kBAAA,GAAA7H,KAAA,CAAMyG,UAAA,cAAAoB,kBAAA,KAAN,UAAAA,kBAAA,CAAA/D,IAAA,CAAA9D,KAAA,EAAmB8H,QAAM;UAC3B;QACF;QAEA,IAAIxH,UAAA,CAAWa,KAAO;UACpB4G,WAAA,CAAYR,eAAe;QAC7B,CAAO;UACLnC,mBAAA,CAAoBmC,eAAe;QACrC;MACF;IACF,CAAC;IAGDtH,QAAA,CAASkB,KAAA,CAAMA,KAAQ;GACzB;EAEM,IAAA6G,kBAAA,GAAqB,SAArBA,mBAAsBjE,CAAkB;IAC5C,IAAMkE,QAAW,GAAAC,WAAA,CAAanE,CAAE,CAAAoE,MAAA,CAA4B1H,KAAK;IACjE+E,YAAA,aAAAA,YAAA,eAAAA,YAAA,CAAeyC,QAAQ;GACzB;EAEA,SAASG,iBAAiBxE,MAAe;IACvC4B,YAAA,aAAAA,YAAA,eAAAA,YAAA,CAAe5B,MAAK;EACtB;EAEA,SAASyE,kBAAkBtE,CAAmB;IAC5CyB,YAAA,aAAAA,YAAA,eAAAA,YAAA,CAAAlC,kBAAA,CAAmBS,CAAE,CAAAuE,aAAA,CAAc7H,KAAK,CAAC;EAC3C;EAMA,SAASsH,YAAY1C,OAAwB;IACrC,IAAAkD,gBAAA,GAAmBhH,WAAA,CAAYJ,KAAM,CAAAqH,MAAA,CAAO,UAACZ,EAAM;MAAA,OAAAA,EAAA,CAAErF,MAAA,KAAW,SAAS;KAAA;IAC/E,IAAMqB,MAAQ,GAAAtD,UAAA,CAAWa,KAAQ,GAAAkE,OAAA,IAAW3D,aAAA,CAAcP,KAAQ,GAAAoH,gBAAA;IAC9D,KAAC3E,MAAS,KAACA,MAAM,CAAA2B,MAAA,EAAQ;IAC7B/C,SAAA,CAAUrB,KAAQ;IAClBM,MAAA,CAAON,KAAA,GAAQ,EAAC;IACTsH,MAAA;MACLC,MAAA,EAAQ1I,KAAM,CAAA0I,MAAA;MACdC,OAAA,EAAS3I,KAAM,CAAA2I,OAAA;MACfC,MAAA,EAAQ5I,KAAM,CAAA4I,MAAA;MACdC,IAAA,EAAM7I,KAAM,CAAA6I,IAAA;MACZC,eAAA,EAAiB9I,KAAM,CAAA8I,eAAA;MACvBC,aAAA,EAAexH,WAAY,CAAAJ,KAAA;MAC3BO,aAAe,EAAAkC,MAAA;MACfpD,QAAA,EAAUR,KAAM,CAAAQ,QAAA;MAChBD,aAAA,EAAeA,aAAc,CAAAY,KAAA;MAC7Bb,UAAA,EAAYN,KAAM,CAAAM,UAAA;MAClBmE,0BAAA,EAA4BzE,KAAM,CAAAyE,0BAAA;MAClCuE,eAAA,EAAiBhJ,KAAM,CAAAgJ,eAAA;MACvBC,IAAA,EAAMjJ,KAAM,CAAAiJ,IAAA;MACZC,oBAAA,EAAsBlJ,KAAM,CAAAkJ,oBAAA;MAC5BC,aAAA,EAAenJ,KAAM,CAAAmJ,aAAA;MACrBC,aAAA,EAAepJ,KAAM,CAAAoJ,aAAA;MACrBC,cAAA,EAAgBrJ,KAAM,CAAAqJ,cAAA;MACtBlF,kBAAA,EAAAA,kBAAA;MACAK,iBAAA,EAAAA,iBAAA;MACAjB,eAAA,EAAAA,eAAA;MACA+F,YAAA,EAAc,SAAdA,aAAeC,GAAQ;QAAA,IAAAC,WAAA;QACrB,IAAI,CAAAA,WAAA,GAAAD,GAAA,CAAI9I,KAAM,iBAAA+I,WAAA,eAAVA,WAAA,CAAcrG,GAAO,IAAA1B,MAAA,CAAON,KAAA,CAAMsI,IAAK,WAACvG,IAAS;UAAA,IAAAwG,YAAA;UAAA,SAAAA,YAAA,GAAAxG,IAAA,CAAKzC,KAAA,CAAM,CAAI,eAAAiJ,YAAA,uBAAfA,YAAA,CAAevG,GAAA,MAAQoG,GAAI,CAAA9I,KAAA,CAAM,GAAG0C,GAAG;QAAA,IAAG;QAC/F1B,MAAA,CAAON,KAAQ,GAAAM,MAAA,CAAON,KAAM,CAAAa,MAAA,CAAOuH,GAAG;MACxC;IACF,CAAC,CAAE,CAAApD,IAAA,CAED,UAAAwD,IAAA,EAAyC;MAAA,IAAtCpH,MAAA,GAAAoH,IAAA,CAAApH,MAAA;QAAQ0G,IAAM,GAAAU,IAAA,CAANV,IAAM;QAAAW,IAAA,GAAAD,IAAA,CAAAC,IAAA;QAAM3F,WAAA,GAAA0F,IAAA,CAAA1F,WAAA;MACrBzB,SAAA,CAAUrB,KAAQ;MAClB,IAAIoB,MAAA,KAAW,SAAW;QAAA,IAAAsH,gBAAA;QACxBrI,cAAA,CAAA8B,kBAAA,CAAmB2F,IAAK,CAAAxI,KAAK,CAAG;UAC9ByD,OAAS;UACTrB,IAAA,EAAMoG,IAAA,CAAKxI,KAAM;QACnB,CAAC;QACDgB,MAAA,CAAON,KAAA,GAAQ,EAAC;QAChB,CAAA0I,gBAAA,GAAA7J,KAAA,CAAM8J,SAAY,cAAAD,gBAAA,eAAlBA,gBAAA,CAAA/F,IAAA,CAAA9D,KAAA,EAAkB;UAChBiI,QAAA,EAAUgB,IAAK,CAAAxI,KAAA;UACfuD,YAAc,EAAAJ,MAAA;UACdf,IAAA,EAAMe,MAAM;UAEZmG,OAAA,EAASH,IAAM,aAANA,IAAM,uBAANA,IAAM,CAAAjC,GAAA,CAAI,UAACC,EAAA;YAAA,OAAMA,EAAA,CAAEqB,IAAI;WAAA;UAEhCvF,QAAA,EAAUuF,IAAA,CAAKvF,QAAY,IAAAkG,IAAA,CAAKjC,GAAA,CAAI,UAACC,EAAA;YAAA,OAAMA,EAAE,CAAAqB,IAAA,CAAKvF,QAAQ;WAAA;UAC1Da,cAAA,EAAgB0E,IAAK,CAAA1E;QACvB,CAAC;OACH,UAAWN,WAAA,aAAAA,WAAA,eAAAA,WAAA,CAAc,CAAI;QAAA,IAAA+F,aAAA;QAC3B,CAAAA,aAAA,GAAAhK,KAAA,CAAMiK,MAAS,cAAAD,aAAA,eAAfA,aAAA,CAAAlG,IAAA,CAAA9D,KAAA,EAAe;UACb+D,CAAA,EAAGkF,IAAK,CAAAtF,KAAA;UACRd,IAAA,EAAMoB,WAAY;UAClBA,WAAA,EAAAA,WAAA;UACAD,YAAc,EAAAJ,MAAA;UACdF,QAAA,EAAUuF,IAAK,CAAAvF,QAAA;UACfa,cAAA,EAAgB0E,IAAK,CAAA1E;QACvB,CAAC;MACH;MAGA,IAAIjE,UAAA,CAAWa,KAAO;QAAA,IAAA+I,sBAAA;QACpBxI,aAAA,CAAcP,KAAQ,GAAA8C,WAAA;QACtB,CAAAiG,sBAAA,GAAAlK,KAAA,CAAMwH,0BAAA,cAAA0C,sBAAA,eAANA,sBAAA,CAAApG,IAAA,CAAA9D,KAAA,EAAmC;UAAES,KAAA,EAAOwD,WAAa;UAAAC,OAAA,EAAS;QAAW,CAAC;MAChF;IACF,CACF;EACF;EAEA,SAASiG,cAAc3G,CAAwB;IAAA,IAAA4G,oBAAA,EAAAC,IAAA,EAAAC,eAAA;IAC7C3I,oBAAA,CAAqBR,KAAQ;IAC7B,CAAAiJ,oBAAA,IAAAC,IAAA,GAAA7G,CAAA,CAAEO,CAAA,EAAEwG,eAAkB,cAAAH,oBAAA,KAAtB,UAAAA,oBAAA,CAAAtG,IAAA,CAAAuG,IAAsB;IACtB,IAAMG,WAAmC;MACvCzG,CAAA,EAAGP,CAAE,CAAAO,CAAA;MACLG,OAAS;MACTlB,KAAA,EAAOQ,CAAE,CAAAR,KAAA;MACTH,IAAA,EAAMW,CAAE,CAAAX;KACV;IAEA,IAAI7C,KAAM,CAAAO,aAAA,IAAiB,CAACP,KAAA,CAAMQ,QAAU;MAAA,IAAAiK,sBAAA;MAC1C/I,aAAA,CAAcP,KAAA,GAAQ,EAAC;MACvB,CAAAsJ,sBAAA,GAAAzK,KAAA,CAAMwH,0BAAA,cAAAiD,sBAAA,eAANA,sBAAA,CAAA3G,IAAA,CAAA9D,KAAA,EAAmC;QAAES,KAAA,EAAO,EAAI;QAAAyD,OAAA,EAAS;MAAS,CAAC;MACpD1C,cAAA,KAAIgJ,WAAW;IAChC,WAAW,CAACxK,KAAA,CAAMM,UAAY;MAC5BiB,WAAA,CAAYJ,KAAM,CAAAuJ,MAAA,CAAOlH,CAAE,CAAAR,KAAA,EAAO,CAAC;MACnCxB,cAAA,CAAA8B,kBAAA,CAAmB/B,WAAY,CAAAJ,KAAK,GAAGqJ,WAAW;IACpD,CAAO;MAGL,IAAIhH,CAAE,CAAAR,KAAA,GAAQzB,WAAY,CAAAJ,KAAA,CAAMoE,MAAQ;QACtChE,WAAA,CAAYJ,KAAM,CAAAuJ,MAAA,CAAOlH,CAAE,CAAAR,KAAA,EAAO,CAAC;QACnCxB,cAAA,CAAA8B,kBAAA,CAAmB/B,WAAY,CAAAJ,KAAK,GAAGqJ,WAAW;MACpD,CAAO;QAAA,IAAAG,sBAAA;QACLjJ,aAAA,CAAcP,KAAA,CAAMuJ,MAAO,CAAAlH,CAAA,CAAER,KAAA,GAAQzB,WAAY,CAAAJ,KAAA,CAAMoE,MAAA,EAAQ,CAAC;QAChE7D,aAAA,CAAcP,KAAQ,GAAAmC,kBAAA,CAAI5B,aAAA,CAAcP,KAAK;QACvC,CAAAwJ,sBAAA,GAAA3K,KAAA,CAAAwH,0BAAA,cAAAmD,sBAAA,eAAAA,sBAAA,CAAA7G,IAAA,CAAA9D,KAAA,EAA6B;UAAES,KAAA,EAAA6C,kBAAA,CAAW5B,aAAA,CAAcP,KAAK;UAAG+C,OAAS;QAAS,CAAC;MAC3F;IACF;IACA,CAAAoG,eAAA,GAAAtK,KAAA,CAAM4K,QAAA,cAAAN,eAAA,KAAN,UAAAA,eAAA,CAAAxG,IAAA,CAAA9D,KAAA,EAAiBwD,CAAC;EACpB;EAEM,IAAAqH,aAAA,GAAgB,SAAhBA,cAAiB9G,CAAmB;IAAA,IAAA+G,kBAAA;IACpC,IAAAzK,QAAA,CAASc,KAAS,KAAClB,QAAS,CAAAkB,KAAA,EAAO;IACvC4C,CAAA,aAAAA,CAAA,gBAAA+G,kBAAA,GAAA/G,CAAA,CAAGwG,eAAkB,cAAAO,kBAAA,eAArBA,kBAAA,CAAAhH,IAAA,CAAAC,CAAqB;IACpB9D,QAAA,CAASkB,KAAA,CAA2B4J,KAAM;GAC7C;EAEM,IAAAC,YAAA,GAAe,SAAfA,aAAgBC,OAAoD;IAAA,IAAAC,aAAA,EAAAC,qBAAA;IACjE,CAAAD,aAAA,GAAAzJ,MAAA,CAAAN,KAAA,cAAA+J,aAAA,eAAAA,aAAA,CAAOE,OAAQ,WAAClI,IAAS;MAAA,IAAAmI,YAAA;MAC9B,CAAAA,YAAA,GAAAnI,IAAA,CAAKzB,MAAA,cAAA4J,YAAA,eAALA,YAAA,CAAaC,KAAM;IACrB,CAAC;IACD9I,SAAA,CAAUrB,KAAQ;IAGlB,IAAIb,UAAA,CAAWa,KAAO;MACpBO,aAAA,CAAcP,KAAA,GAAQ,EAAC;IACzB,CAAO;MACLK,cAAA,CACED,WAAY,CAAAJ,KAAA,CAAMwG,GAAI,WAACzE,IAAS;QAC1B,IAAAA,IAAA,CAAKX,MAAA,KAAW,SAAW;UAC7B,OAAAa,aAAA,CAAAA,aAAA,KAAYF,IAAM;YAAAX,MAAA,EAAQ;UAAU;QACtC;QACO,OAAAW,IAAA;MACT,CAAC,GACD;QAAEgB,OAAA,EAAS;MAAQ,CACrB;IACF;IAEA,IAAI+G,OAAS,aAATA,OAAS,eAATA,OAAS,CAAApI,IAAA,IAAQ,CAACvC,UAAA,CAAWa,KAAO;MACtBgJ,aAAA,aAAAA,aAAA,eAAAA,aAAA;QAAEtH,IAAA,EAAMoI,OAAQ,CAAApI,IAAA;QAAMkB,CAAA,EAAGkH,OAAQ,CAAAlH,CAAA;QAAGf,KAAO;MAAE,CAAC;IAChE;IAEA,CAAAmI,qBAAA,GAAAnL,KAAA,CAAMuL,cAAiB,cAAAJ,qBAAA,eAAvBA,qBAAA,CAAArH,IAAA,CAAA9D,KAAuB;GACzB;EAEO;IACLe,CAAA,EAAAA,CAAA;IACAa,MAAA,EAAAA,MAAA;IACAZ,WAAA,EAAAA,WAAA;IACAmB,iBAAA,EAAAA,iBAAA;IACAT,aAAA,EAAAA,aAAA;IACAH,WAAA,EAAAA,WAAA;IACAkB,YAAA,EAAAA,YAAA;IACAd,oBAAA,EAAAA,oBAAA;IACAa,SAAA,EAAAA,SAAA;IACAT,WAAA,EAAAA,WAAA;IACAE,YAAA,EAAAA,YAAA;IACAC,gBAAA,EAAAA,gBAAA;IACAjC,QAAA,EAAAA,QAAA;IACAI,QAAA,EAAAA,QAAA;IACAoB,MAAA,EAAAA,MAAA;IACAkB,iBAAA,EAAAA,iBAAA;IACAoF,WAAA,EAAAA,WAAA;IACAvC,YAAA,EAAAA,YAAA;IACAwC,kBAAA,EAAAA,kBAAA;IACAI,gBAAA,EAAAA,gBAAA;IACAC,iBAAA,EAAAA,iBAAA;IACA8B,aAAA,EAAAA,aAAA;IACAU,aAAA,EAAAA,aAAA;IACAG,YAAA,EAAAA;GACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}