{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { i as isNumber_1 } from '../../_chunks/dep-889e457b.mjs';\nimport { i as isObject_1 } from '../../_chunks/dep-2b09875b.mjs';\nimport { i as isArray_1 } from '../../_chunks/dep-eae2a67e.mjs';\nimport { i as isEmpty_1 } from '../../_chunks/dep-b91a8171.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-1b78414a.mjs';\nimport '../../_chunks/dep-1a4bb2f2.mjs';\nimport '../../_chunks/dep-cc8ebcde.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-f5579c03.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-d84f19b3.mjs';\nimport '../../_chunks/dep-3c65fae8.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nfunction getSingleContent(cascaderContext) {\n  var value = cascaderContext.value,\n    multiple = cascaderContext.multiple,\n    treeStore = cascaderContext.treeStore,\n    showAllLevels = cascaderContext.showAllLevels;\n  if (multiple || value !== 0 && !value) return \"\";\n  if (isArray_1(value)) return \"\";\n  var node = treeStore && treeStore.getNodes(value);\n  if (!(node && node.length)) {\n    return value;\n  }\n  var path = node && node[0].getPath();\n  if (path && path.length) {\n    return showAllLevels ? path.map(function (node2) {\n      return node2.label;\n    }).join(\" / \") : path[path.length - 1].label;\n  }\n  return value;\n}\nfunction getMultipleContent(cascaderContext) {\n  var value = cascaderContext.value,\n    multiple = cascaderContext.multiple,\n    treeStore = cascaderContext.treeStore,\n    showAllLevels = cascaderContext.showAllLevels;\n  if (!multiple) return [];\n  if (multiple && !isArray_1(value)) return [];\n  var node = treeStore && treeStore.getNodes(value);\n  if (!node) return [];\n  return value.map(function (item) {\n    var _node2$;\n    var node2 = treeStore.getNodes(item);\n    return showAllLevels ? getFullPathLabel(node2[0]) : (_node2$ = node2[0]) === null || _node2$ === void 0 ? void 0 : _node2$.label;\n  }).filter(function (item) {\n    return !!item;\n  });\n}\nfunction getPanels(treeNodes) {\n  var panels = [];\n  treeNodes.forEach(function (node) {\n    if (panels[node.level]) {\n      panels[node.level].push(node);\n    } else {\n      panels[node.level] = [node];\n    }\n  });\n  return panels;\n}\nfunction getFullPathLabel(node) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/\";\n  return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {\n    return node2.label;\n  }).join(separator);\n}\nvar getTreeValue = function getTreeValue(value) {\n  var treeValue = [];\n  if (isArray_1(value)) {\n    if (value.length > 0 && isObject_1(value[0])) {\n      treeValue = value.map(function (val) {\n        return val.value;\n      });\n    } else if (value.length) {\n      treeValue = value;\n    }\n  } else if (!isEmptyValues(value)) {\n    if (isObject_1(value)) {\n      treeValue = [value.value];\n    } else {\n      treeValue = [value];\n    }\n  }\n  return treeValue;\n};\nvar getCascaderValue = function getCascaderValue(value, valueType, multiple) {\n  if (valueType === \"single\") {\n    return value;\n  }\n  if (multiple) {\n    return value.map(function (item) {\n      return item[item.length - 1];\n    });\n  }\n  return value[value.length - 1];\n};\nfunction isEmptyValues(value) {\n  if (isNumber_1(value) && !isNaN(value)) return false;\n  return isEmpty_1(value);\n}\nfunction isValueInvalid(value, cascaderContext) {\n  var multiple = cascaderContext.multiple,\n    showAllLevels = cascaderContext.showAllLevels;\n  return multiple && !isArray_1(value) || !multiple && isArray_1(value) && !showAllLevels;\n}\nexport { getCascaderValue, getFullPathLabel, getMultipleContent, getPanels, getSingleContent, getTreeValue, isEmptyValues, isValueInvalid };","map":{"version":3,"names":["getSingleContent","cascaderContext","value","multiple","treeStore","showAllLevels","isArray_1","node","getNodes","length","path","getPath","map","node2","label","join","getMultipleContent","item","_node2$","getFullPathLabel","filter","getPanels","treeNodes","panels","forEach","level","push","separator","arguments","undefined","getTreeValue","treeValue","isObject_1","val","isEmptyValues","getCascaderValue","valueType","isNumber_1","isNaN","isEmpty_1","isValueInvalid"],"sources":["../../../src/cascader/core/helper.ts"],"sourcesContent":["import isNumber from 'lodash/isNumber';\nimport isObject from 'lodash/isObject';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n  TreeNode,\n  CascaderContextType,\n  TdCascaderProps,\n  CascaderValue,\n  TreeNodeValue,\n  TreeOptionData,\n} from '../interface';\n\n/**\n * 单选状态下内容\n * @param isHover\n * @param cascaderContext\n * @returns\n */\nexport function getSingleContent(cascaderContext: CascaderContextType): string {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n  if (multiple || (value !== 0 && !value)) return '';\n\n  if (isArray(value)) return '';\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!(node && node.length)) {\n    return value as string;\n  }\n  const path = node && node[0].getPath();\n  if (path && path.length) {\n    return showAllLevels ? path.map((node: TreeNode) => node.label).join(' / ') : path[path.length - 1].label;\n  }\n  return value as string;\n}\n\n/**\n * 多选状态下选中内容\n * @param cascaderContext\n * @returns\n */\nexport function getMultipleContent(cascaderContext: CascaderContextType) {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n\n  if (!multiple) return [];\n  if (multiple && !isArray(value)) return [];\n\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!node) return [];\n\n  return (value as TreeNodeValue[])\n    .map((item: TreeNodeValue) => {\n      const node = treeStore.getNodes(item);\n      return showAllLevels ? getFullPathLabel(node[0]) : node[0]?.label;\n    })\n    .filter((item) => !!item);\n}\n\n/**\n * 面板数据计算方法\n * @param treeNodes\n * @returns\n */\nexport function getPanels(treeNodes: CascaderContextType['treeNodes']) {\n  const panels: TreeNode[][] = [];\n  treeNodes.forEach((node: TreeNode) => {\n    if (panels[node.level]) {\n      panels[node.level].push(node);\n    } else {\n      panels[node.level] = [node];\n    }\n  });\n  return panels;\n}\n\n/**\n * 获取node的全部路径\n * @param node\n * @returns\n */\nexport function getFullPathLabel(node: TreeNode, separator = '/') {\n  return node\n    ?.getPath()\n    .map((node: TreeNode) => node.label)\n    .join(separator);\n}\n\n/**\n * treeValue计算方法\n * @param value\n * @returns\n */\nexport const getTreeValue = (value: CascaderContextType['value']) => {\n  let treeValue: TreeNodeValue[] = [];\n  if (isArray(value)) {\n    if (value.length > 0 && isObject(value[0])) {\n      treeValue = (value as TreeOptionData[]).map((val) => val.value);\n    } else if (value.length) {\n      treeValue = value as TreeNodeValue[];\n    }\n  } else if (!isEmptyValues(value)) {\n    if (isObject(value)) {\n      treeValue = [(value as TreeOptionData).value];\n    } else {\n      treeValue = [value];\n    }\n  }\n  return treeValue;\n};\n\n/**\n * 按数据类型计算通用数值\n * @param value\n * @param showAllLevels\n * @param multiple\n * @returns\n */\nexport const getCascaderValue = (value: CascaderValue, valueType: TdCascaderProps['valueType'], multiple: boolean) => {\n  if (valueType === 'single') {\n    return value;\n  }\n  if (multiple) {\n    return (value as Array<CascaderValue>).map((item: TreeNodeValue[]) => item[item.length - 1]);\n  }\n  return value[(value as Array<CascaderValue>).length - 1];\n};\n\n/**\n * 空值校验\n * 补充value为Number时的空值校验逻辑，排除NaN\n * @param value\n * @returns\n */\nexport function isEmptyValues(value: unknown): boolean {\n  if (isNumber(value) && !isNaN(value)) return false;\n  return isEmpty(value);\n}\n\n/**\n * 初始化数据校验\n * @param value\n * @param cascaderContext\n * @returns boolean\n */\nexport function isValueInvalid(value: CascaderValue, cascaderContext: CascaderContextType) {\n  const { multiple, showAllLevels } = cascaderContext;\n  return (multiple && !isArray(value)) || (!multiple && isArray(value) && !showAllLevels);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}