{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _defineProperty } from '../../_chunks/dep-fa52aa21.mjs';\nimport { ref, onMounted, reactive } from 'vue';\nimport { i as isNumber_1 } from '../../_chunks/dep-889e457b.mjs';\nimport { off, on } from '../../utils/dom.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-03a7fb6c.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../utils/easing.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar DEFAULT_MIN_WIDTH = 80;\nvar DEFAULT_MAX_WIDTH = 600;\nvar distance = 8;\nfunction useColumnResize(params) {\n  var isWidthOverflow = params.isWidthOverflow,\n    tableContentRef = params.tableContentRef,\n    showColumnShadow = params.showColumnShadow,\n    getThWidthList = params.getThWidthList,\n    updateThWidthList = params.updateThWidthList,\n    setTableElmWidth = params.setTableElmWidth,\n    updateTableAfterColumnResize = params.updateTableAfterColumnResize,\n    onColumnResizeChange = params.onColumnResizeChange;\n  var resizeLineRef = ref();\n  var effectColMap = ref({});\n  var leafColumns = ref([]);\n  var originalSelectStart;\n  var originalDragStart;\n  onMounted(function () {\n    var hasDocument = typeof document !== \"undefined\";\n    originalSelectStart = hasDocument ? document.onselectstart : null;\n    originalDragStart = hasDocument ? document.ondragstart : null;\n  });\n  var getSiblingResizableCol = function getSiblingResizableCol(nodes, index, type) {\n    var i = index;\n    while (nodes[i] && nodes[i].resizable === false) {\n      if (type === \"next\") {\n        i += 1;\n      } else {\n        i -= 1;\n      }\n    }\n    return nodes[i];\n  };\n  var _setEffectColMap = function setEffectColMap(nodes, parent) {\n    if (!nodes) return;\n    leafColumns.value = nodes;\n    nodes.forEach(function (n, index) {\n      var prevNode = getSiblingResizableCol(nodes, index - 1, \"prev\");\n      var nextNode = getSiblingResizableCol(nodes, index + 1, \"next\");\n      var parentPrevCol = parent ? effectColMap.value[parent.colKey].prev : nextNode;\n      var parentNextCol = parent ? effectColMap.value[parent.colKey].next : prevNode;\n      var prev = index === 0 ? parentPrevCol : prevNode;\n      var next = index === nodes.length - 1 ? parentNextCol : nextNode;\n      effectColMap.value[n.colKey] = {\n        prev: prev,\n        next: next,\n        current: {\n          prevSibling: getSiblingResizableCol(nodes, index - 1, \"prev\"),\n          nextSibling: getSiblingResizableCol(nodes, index + 1, \"next\")\n        }\n      };\n      _setEffectColMap(n.children, n);\n    });\n  };\n  var resizeLineParams = {\n    isDragging: false,\n    draggingCol: null,\n    draggingStart: 0,\n    effectCol: \"next\"\n  };\n  var resizeLineStyle = reactive({\n    display: \"none\",\n    height: \"10px\",\n    left: \"10px\",\n    bottom: \"0\"\n  });\n  var isColRightFixActive = function isColRightFixActive(col) {\n    return col.fixed === \"right\" && showColumnShadow.right;\n  };\n  var onColumnMouseover = function onColumnMouseover(e, col) {\n    if (!resizeLineRef.value || resizeLineParams.isDragging || !e.target) return;\n    var target = e.target.closest(\"th\");\n    var colKey = target.getAttribute(\"data-colkey\");\n    if (!leafColumns.value.find(function (t) {\n      return t.colKey === colKey;\n    })) return;\n    var targetBoundRect = target.getBoundingClientRect();\n    var thRightCursor = targetBoundRect.right - e.pageX <= distance;\n    var thLeftCursor = e.pageX - targetBoundRect.left <= distance;\n    var isFixedToRight = isColRightFixActive(col);\n    if (thRightCursor || isFixedToRight) {\n      var _col$resizable;\n      var colResizable = (_col$resizable = col.resizable) !== null && _col$resizable !== void 0 ? _col$resizable : true;\n      if (colResizable) {\n        target.style.cursor = thRightCursor || isFixedToRight && thLeftCursor ? \"col-resize\" : \"\";\n        var isCurrent = thRightCursor && !isFixedToRight || isFixedToRight && thLeftCursor;\n        resizeLineParams.draggingCol = isCurrent ? target : target.nextElementSibling;\n        resizeLineParams.effectCol = \"next\";\n        return;\n      }\n    } else if (thLeftCursor) {\n      var prevEl = target.previousElementSibling;\n      if (prevEl) {\n        var _effectColMap$value$c, _effectPrevCol$resiza;\n        var effectPrevCol = (_effectColMap$value$c = effectColMap.value[col.colKey]) === null || _effectColMap$value$c === void 0 ? void 0 : _effectColMap$value$c.prev;\n        var _colResizable = (_effectPrevCol$resiza = effectPrevCol === null || effectPrevCol === void 0 ? void 0 : effectPrevCol.resizable) !== null && _effectPrevCol$resiza !== void 0 ? _effectPrevCol$resiza : true;\n        if (_colResizable) {\n          target.style.cursor = \"col-resize\";\n          resizeLineParams.draggingCol = prevEl;\n          resizeLineParams.effectCol = \"prev\";\n          return;\n        }\n      }\n    }\n    target.style.cursor = \"\";\n    resizeLineParams.draggingCol = null;\n    resizeLineParams.effectCol = null;\n  };\n  var getMinMaxColWidth = function getMinMaxColWidth(targetCol) {\n    var _targetCol$resize, _targetCol$resize2;\n    var propMinWidth = isNumber_1(targetCol.minWidth) ? targetCol.minWidth : parseInt(targetCol.minWidth || \"0\", 10);\n    return {\n      minColWidth: Math.max(((_targetCol$resize = targetCol.resize) === null || _targetCol$resize === void 0 ? void 0 : _targetCol$resize.minWidth) || DEFAULT_MIN_WIDTH, propMinWidth),\n      maxColWidth: ((_targetCol$resize2 = targetCol.resize) === null || _targetCol$resize2 === void 0 ? void 0 : _targetCol$resize2.maxWidth) || DEFAULT_MAX_WIDTH\n    };\n  };\n  var getNormalResizeInfo = function getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) {\n    var resizeLinePos = targetBoundRect.right - tableBoundRect.left;\n    var colLeft = targetBoundRect.left - tableBoundRect.left;\n    var targetCol = resizeLineParams.effectCol === \"next\" ? col : effectPrevCol;\n    var _getMinMaxColWidth = getMinMaxColWidth(targetCol),\n      minColWidth = _getMinMaxColWidth.minColWidth,\n      maxColWidth = _getMinMaxColWidth.maxColWidth;\n    return {\n      resizeLinePos: resizeLinePos,\n      minResizeLineLeft: colLeft + minColWidth,\n      maxResizeLineLeft: colLeft + maxColWidth\n    };\n  };\n  var getFixedToRightResizeInfo = function getFixedToRightResizeInfo(target, col, effectPrevCol, targetBoundRect, tableBoundRect) {\n    var resizeLinePos = targetBoundRect.left - tableBoundRect.left;\n    var targetCol = target.dataset.colkey === col.colKey ? col : effectPrevCol;\n    var colLeft = targetBoundRect.left - tableBoundRect.left;\n    var _getMinMaxColWidth2 = getMinMaxColWidth(targetCol),\n      minColWidth = _getMinMaxColWidth2.minColWidth,\n      maxColWidth = _getMinMaxColWidth2.maxColWidth;\n    return {\n      resizeLinePos: resizeLinePos,\n      minResizeLineLeft: colLeft + (targetBoundRect.width - maxColWidth),\n      maxResizeLineLeft: colLeft + (targetBoundRect.width - minColWidth)\n    };\n  };\n  var getFixedToLeftResizeInfo = function getFixedToLeftResizeInfo(targetBoundRect, tableBoundRect) {\n    var resizeLinePos = targetBoundRect.left - tableBoundRect.left;\n    var colLeft = targetBoundRect.left - tableBoundRect.left;\n    return {\n      resizeLinePos: resizeLinePos,\n      minResizeLineLeft: colLeft,\n      maxResizeLineLeft: colLeft\n    };\n  };\n  var getTotalTableWidth = function getTotalTableWidth(thWidthList) {\n    var tableWidth = 0;\n    leafColumns.value.forEach(function (col) {\n      tableWidth += thWidthList[col.colKey];\n    });\n    return tableWidth;\n  };\n  var getSiblingColCanResizable = function getSiblingColCanResizable(newThWidthList, effectNextCol, distance2, index) {\n    var isWidthAbnormal = true;\n    if (effectNextCol) {\n      var _getMinMaxColWidth3 = getMinMaxColWidth(effectNextCol),\n        minColWidth = _getMinMaxColWidth3.minColWidth,\n        maxColWidth = _getMinMaxColWidth3.maxColWidth;\n      var targetNextColWidth = newThWidthList[effectNextCol.colKey] + distance2;\n      isWidthAbnormal = targetNextColWidth < minColWidth || targetNextColWidth > maxColWidth;\n    }\n    return !(isWidthAbnormal || isWidthOverflow.value || index === leafColumns.value.length - 1);\n  };\n  var getOtherResizeInfo = function getOtherResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) {\n    return effectPrevCol ? getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) : getFixedToLeftResizeInfo(targetBoundRect, tableBoundRect);\n  };\n  var onColumnMousedown = function onColumnMousedown(e, col, index) {\n    var _tableContentRef$valu, _effectColMap$value$c2, _effectColMap$value$c3;\n    if (!resizeLineParams.draggingCol) return;\n    var target = resizeLineParams.draggingCol;\n    var targetBoundRect = target.getBoundingClientRect();\n    var tableBoundRect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();\n    var effectNextCol = (_effectColMap$value$c2 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c2 === void 0 ? void 0 : _effectColMap$value$c2.next;\n    var effectPrevCol = (_effectColMap$value$c3 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c3 === void 0 ? void 0 : _effectColMap$value$c3.prev;\n    var _ref = isColRightFixActive(col) ? getFixedToRightResizeInfo(target, col, effectNextCol, targetBoundRect, tableBoundRect) : getOtherResizeInfo(col, effectNextCol, targetBoundRect, tableBoundRect),\n      resizeLinePos = _ref.resizeLinePos,\n      minResizeLineLeft = _ref.minResizeLineLeft,\n      maxResizeLineLeft = _ref.maxResizeLineLeft;\n    resizeLineParams.isDragging = true;\n    resizeLineParams.draggingStart = e.x;\n    if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.value) {\n      resizeLineStyle.display = \"block\";\n      resizeLineStyle.height = \"\".concat(tableBoundRect.bottom - targetBoundRect.top, \"px\");\n      resizeLineStyle.left = \"\".concat(resizeLinePos, \"px\");\n      var parent = tableContentRef.value.parentElement.getBoundingClientRect();\n      resizeLineStyle.bottom = \"\".concat(parent.bottom - tableBoundRect.bottom, \"px\");\n    }\n    var _onDragEnd = function onDragEnd() {\n      var _effectColMap$value$c4;\n      if (!resizeLineParams.isDragging) return;\n      var moveDistance = resizeLinePos - parseFloat(resizeLineStyle.left) || 0;\n      var thWidthList = getThWidthList(\"calculate\");\n      var currentCol = (_effectColMap$value$c4 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c4 === void 0 ? void 0 : _effectColMap$value$c4.current;\n      if (!currentCol) return;\n      var currentSibling = resizeLineParams.effectCol === \"next\" ? currentCol.nextSibling : currentCol.prevSibling;\n      var newThWidthList = _objectSpread({}, thWidthList);\n      var tmpCurrentCol = col.resizable !== false ? col : currentSibling;\n      var rightCol = resizeLineParams.effectCol === \"next\" ? currentCol.nextSibling : col;\n      var canResizeSiblingColWidth = getSiblingColCanResizable(newThWidthList, rightCol, moveDistance, index);\n      if (resizeLineParams.effectCol === \"next\") {\n        if (isColRightFixActive(col)) {\n          if (target.dataset.colkey !== col.colKey) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          } else {\n            newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n          }\n        } else {\n          newThWidthList[tmpCurrentCol.colKey] -= moveDistance;\n          if (canResizeSiblingColWidth) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          }\n        }\n      } else if (resizeLineParams.effectCol === \"prev\") {\n        if (canResizeSiblingColWidth) {\n          newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n        }\n        effectPrevCol && (newThWidthList[effectPrevCol.colKey] -= moveDistance);\n      }\n      updateThWidthList(newThWidthList);\n      var tableWidth = getTotalTableWidth(newThWidthList);\n      setTableElmWidth(Math.round(tableWidth));\n      updateTableAfterColumnResize();\n      resizeLineParams.isDragging = false;\n      resizeLineParams.draggingCol = null;\n      resizeLineParams.effectCol = null;\n      target.style.cursor = \"\";\n      resizeLineStyle.display = \"none\";\n      resizeLineStyle.left = \"0\";\n      off(document, \"mouseup\", _onDragEnd);\n      off(document, \"mousemove\", onDragOver);\n      document.onselectstart = originalSelectStart;\n      document.ondragstart = originalDragStart;\n      onColumnResizeChange === null || onColumnResizeChange === void 0 || onColumnResizeChange({\n        columnsWidth: newThWidthList\n      });\n    };\n    var onDragOver = function onDragOver(e2) {\n      if (resizeLineParams.isDragging) {\n        var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;\n        resizeLineStyle.left = \"\".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), \"px\");\n      }\n    };\n    on(document, \"mouseup\", _onDragEnd);\n    on(document, \"mousemove\", onDragOver);\n    document.onselectstart = function () {\n      return false;\n    };\n    document.ondragstart = function () {\n      return false;\n    };\n  };\n  return {\n    resizeLineRef: resizeLineRef,\n    resizeLineStyle: resizeLineStyle,\n    onColumnMouseover: onColumnMouseover,\n    onColumnMousedown: onColumnMousedown,\n    setEffectColMap: _setEffectColMap\n  };\n}\nexport { useColumnResize as default };","map":{"version":3,"names":["DEFAULT_MIN_WIDTH","DEFAULT_MAX_WIDTH","distance","useColumnResize","params","isWidthOverflow","tableContentRef","showColumnShadow","getThWidthList","updateThWidthList","setTableElmWidth","updateTableAfterColumnResize","onColumnResizeChange","resizeLineRef","ref","effectColMap","leafColumns","originalSelectStart","originalDragStart","onMounted","hasDocument","document","onselectstart","ondragstart","getSiblingResizableCol","nodes","index","type","i","resizable","_setEffectColMap","setEffectColMap","parent","value","forEach","n","prevNode","nextNode","parentPrevCol","colKey","prev","parentNextCol","next","length","current","prevSibling","nextSibling","children","resizeLineParams","isDragging","draggingCol","draggingStart","effectCol","resizeLineStyle","reactive","display","height","left","bottom","isColRightFixActive","col","fixed","right","onColumnMouseover","e","target","closest","getAttribute","find","t","targetBoundRect","getBoundingClientRect","thRightCursor","pageX","thLeftCursor","isFixedToRight","_col$resizable","colResizable","style","cursor","isCurrent","nextElementSibling","prevEl","previousElementSibling","_effectColMap$value$c","_effectPrevCol$resiza","effectPrevCol","_colResizable","getMinMaxColWidth","targetCol","_targetCol$resize","_targetCol$resize2","propMinWidth","isNumber_1","minWidth","parseInt","minColWidth","Math","max","resize","maxColWidth","maxWidth","getNormalResizeInfo","tableBoundRect","resizeLinePos","colLeft","_getMinMaxColWidth","minResizeLineLeft","maxResizeLineLeft","getFixedToRightResizeInfo","dataset","colkey","_getMinMaxColWidth2","width","getFixedToLeftResizeInfo","getTotalTableWidth","thWidthList","tableWidth","getSiblingColCanResizable","newThWidthList","effectNextCol","distance2","isWidthAbnormal","_getMinMaxColWidth3","targetNextColWidth","getOtherResizeInfo","onColumnMousedown","_tableContentRef$valu","_effectColMap$value$c2","_effectColMap$value$c3","_ref","x","concat","top","parentElement","_onDragEnd","onDragEnd","_effectColMap$value$c4","moveDistance","parseFloat","currentCol","currentSibling","_objectSpread","tmpCurrentCol","rightCol","canResizeSiblingColWidth","round","off","onDragOver","columnsWidth","e2","min","on"],"sources":["../../../src/table/hooks/useColumnResize.ts"],"sourcesContent":["/**\n * important info: only resize happened, th width calculating allowed\n * 验证场景：多级表头调整叶子结点列宽、吸顶表头调整列宽、列数量发生变化、表格未超出、表格已超出\n * - 固定列，调整列宽，需要更新固定位置；右侧固定列，调整列宽，需特殊处理\n * - 当表格内容没有超出时，即没有出现横向滚动条时，此时认为表格有足够的列宽呈现内容，修改宽度为相邻宽度调整\n * - 当表格内容超出，出现横向滚动条时，会自动调整当前列宽和表格总列宽，不影响相邻列宽\n */\nimport { ref, Ref, reactive, onMounted } from 'vue';\nimport isNumber from 'lodash/isNumber';\nimport { BaseTableCol, TableRowData, TdBaseTableProps } from '../type';\nimport { on, off } from '../../utils/dom';\n\nconst DEFAULT_MIN_WIDTH = 80;\nconst DEFAULT_MAX_WIDTH = 600;\n// 当离右边框的距离不超过 8 时，显示拖拽图标\nconst distance = 8;\n\nexport default function useColumnResize(params: {\n  isWidthOverflow: Ref<boolean>;\n  tableContentRef: Ref<HTMLDivElement>;\n  showColumnShadow: {\n    left: boolean;\n    right: boolean;\n  };\n  getThWidthList: (type?: 'default' | 'calculate') => { [colKeys: string]: number };\n  updateThWidthList: (data: { [colKey: string]: number }) => void;\n  setTableElmWidth: (width: number) => void;\n  updateTableAfterColumnResize: () => void;\n  onColumnResizeChange: TdBaseTableProps['onColumnResizeChange'];\n}) {\n  const {\n    isWidthOverflow,\n    tableContentRef,\n    showColumnShadow,\n    getThWidthList,\n    updateThWidthList,\n    setTableElmWidth,\n    updateTableAfterColumnResize,\n    onColumnResizeChange,\n  } = params;\n  const resizeLineRef = ref<HTMLDivElement>();\n  const effectColMap = ref<{ [colKey: string]: any }>({});\n  const leafColumns = ref([]);\n  let originalSelectStart: (this: GlobalEventHandlers, ev: Event) => any;\n  let originalDragStart: (this: GlobalEventHandlers, ev: Event) => any;\n\n  onMounted(() => {\n    const hasDocument = typeof document !== 'undefined';\n    originalSelectStart = hasDocument ? document.onselectstart : null;\n    originalDragStart = hasDocument ? document.ondragstart : null;\n  });\n\n  const getSiblingResizableCol = (nodes: BaseTableCol<TableRowData>[], index: number, type: 'prev' | 'next') => {\n    let i = index;\n    while (nodes[i] && nodes[i].resizable === false) {\n      if (type === 'next') {\n        i += 1;\n      } else {\n        i -= 1;\n      }\n    }\n    return nodes[i];\n  };\n\n  // 递归查找列宽度变化后，受影响的相关列。前后非禁用调整列宽的列\n  const setEffectColMap = (nodes: BaseTableCol<TableRowData>[], parent: BaseTableCol<TableRowData> | null) => {\n    if (!nodes) return;\n    leafColumns.value = nodes;\n    nodes.forEach((n, index) => {\n      const prevNode = getSiblingResizableCol(nodes, index - 1, 'prev');\n      const nextNode = getSiblingResizableCol(nodes, index + 1, 'next');\n      const parentPrevCol = parent ? effectColMap.value[parent.colKey].prev : nextNode;\n      const parentNextCol = parent ? effectColMap.value[parent.colKey].next : prevNode;\n      const prev = index === 0 ? parentPrevCol : prevNode;\n      const next = index === nodes.length - 1 ? parentNextCol : nextNode;\n      effectColMap.value[n.colKey] = {\n        prev,\n        next,\n        current: {\n          prevSibling: getSiblingResizableCol(nodes, index - 1, 'prev'),\n          nextSibling: getSiblingResizableCol(nodes, index + 1, 'next'),\n        },\n      };\n      setEffectColMap(n.children, n);\n    });\n  };\n\n  const resizeLineParams = {\n    isDragging: false,\n    draggingCol: null as HTMLElement,\n    draggingStart: 0,\n    // 列宽调整类型：影响右侧列宽度、影响左侧列宽度、或者仅影响自身\n    effectCol: 'next' as 'next' | 'prev',\n  };\n\n  const resizeLineStyle = reactive({\n    display: 'none',\n    height: '10px',\n    left: '10px',\n    bottom: '0',\n  });\n\n  // 当前列是否配置右侧固定并且处于固定激活状态\n  const isColRightFixActive = (col: BaseTableCol<TableRowData>) => col.fixed === 'right' && showColumnShadow.right;\n\n  // 频繁事件，仅用于计算是否在表头显示拖拽鼠标形态\n  const onColumnMouseover = (e: MouseEvent, col: BaseTableCol<TableRowData>) => {\n    // calculate mouse cursor before drag start\n    if (!resizeLineRef.value || resizeLineParams.isDragging || !e.target) return;\n    const target = (e.target as HTMLElement).closest('th');\n    // 判断是否为叶子阶段，仅叶子结点允许拖拽\n    const colKey = target.getAttribute('data-colkey');\n    if (!leafColumns.value.find((t) => t.colKey === colKey)) return;\n    const targetBoundRect = target.getBoundingClientRect();\n    const thRightCursor = targetBoundRect.right - e.pageX <= distance;\n    const thLeftCursor = e.pageX - targetBoundRect.left <= distance;\n    const isFixedToRight = isColRightFixActive(col);\n    if (thRightCursor || isFixedToRight) {\n      const colResizable = col.resizable ?? true;\n      if (colResizable) {\n        target.style.cursor = thRightCursor || (isFixedToRight && thLeftCursor) ? 'col-resize' : '';\n        const isCurrent = (thRightCursor && !isFixedToRight) || (isFixedToRight && thLeftCursor);\n        resizeLineParams.draggingCol = isCurrent ? target : (target.nextElementSibling as HTMLElement);\n        resizeLineParams.effectCol = 'next';\n        return;\n      }\n    } else if (thLeftCursor) {\n      const prevEl = target.previousElementSibling;\n      if (prevEl) {\n        const effectPrevCol = effectColMap.value[col.colKey]?.prev;\n        const colResizable = effectPrevCol?.resizable ?? true;\n        if (colResizable) {\n          target.style.cursor = 'col-resize';\n          resizeLineParams.draggingCol = prevEl as HTMLElement;\n          resizeLineParams.effectCol = 'prev';\n          return;\n        }\n      }\n    }\n    // 重置记录值\n    target.style.cursor = '';\n    resizeLineParams.draggingCol = null;\n    resizeLineParams.effectCol = null;\n  };\n\n  const getMinMaxColWidth = (targetCol: BaseTableCol<TableRowData>) => {\n    const propMinWidth = isNumber(targetCol.minWidth) ? targetCol.minWidth : parseInt(targetCol.minWidth || '0', 10);\n    return {\n      minColWidth: Math.max(targetCol.resize?.minWidth || DEFAULT_MIN_WIDTH, propMinWidth),\n      maxColWidth: targetCol.resize?.maxWidth || DEFAULT_MAX_WIDTH,\n    };\n  };\n\n  const getNormalResizeInfo = (\n    col: BaseTableCol,\n    effectPrevCol: BaseTableCol,\n    targetBoundRect: DOMRect,\n    tableBoundRect: DOMRect,\n  ) => {\n    const resizeLinePos = targetBoundRect.right - tableBoundRect.left;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    const targetCol = resizeLineParams.effectCol === 'next' ? col : effectPrevCol;\n    const { minColWidth, maxColWidth } = getMinMaxColWidth(targetCol);\n    return {\n      resizeLinePos,\n      minResizeLineLeft: colLeft + minColWidth,\n      maxResizeLineLeft: colLeft + maxColWidth,\n    };\n  };\n\n  const getFixedToRightResizeInfo = (\n    target: HTMLElement,\n    col: BaseTableCol,\n    effectPrevCol: BaseTableCol,\n    targetBoundRect: DOMRect,\n    tableBoundRect: DOMRect,\n  ) => {\n    const resizeLinePos = targetBoundRect.left - tableBoundRect.left;\n    const targetCol = target.dataset.colkey === col.colKey ? col : effectPrevCol;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    const { minColWidth, maxColWidth } = getMinMaxColWidth(targetCol);\n    return {\n      resizeLinePos,\n      minResizeLineLeft: colLeft + (targetBoundRect.width - maxColWidth),\n      maxResizeLineLeft: colLeft + (targetBoundRect.width - minColWidth),\n    };\n  };\n\n  const getFixedToLeftResizeInfo = (targetBoundRect: DOMRect, tableBoundRect: DOMRect) => {\n    const resizeLinePos = targetBoundRect.left - tableBoundRect.left;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    return {\n      resizeLinePos,\n      minResizeLineLeft: colLeft,\n      maxResizeLineLeft: colLeft,\n    };\n  };\n\n  const getTotalTableWidth = (thWidthList: { [key: string]: number }): number => {\n    let tableWidth = 0;\n    leafColumns.value.forEach((col) => {\n      tableWidth += thWidthList[col.colKey];\n    });\n    return tableWidth;\n  };\n  const getSiblingColCanResizable = (\n    newThWidthList: { [key: string]: number },\n    effectNextCol: BaseTableCol,\n    distance: number,\n    index: number,\n  ) => {\n    let isWidthAbnormal = true;\n    if (effectNextCol) {\n      const { minColWidth, maxColWidth } = getMinMaxColWidth(effectNextCol);\n      const targetNextColWidth = newThWidthList[effectNextCol.colKey] + distance;\n      isWidthAbnormal = targetNextColWidth < minColWidth || targetNextColWidth > maxColWidth;\n    }\n    return !(isWidthAbnormal || isWidthOverflow.value || index === leafColumns.value.length - 1);\n  };\n  const getOtherResizeInfo = (\n    col: BaseTableCol<TableRowData>,\n    effectPrevCol: BaseTableCol,\n    targetBoundRect: DOMRect,\n    tableBoundRect: DOMRect,\n  ) =>\n    effectPrevCol\n      ? getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect)\n      : getFixedToLeftResizeInfo(targetBoundRect, tableBoundRect);\n\n  // 调整表格列宽\n  const onColumnMousedown = (e: MouseEvent, col: BaseTableCol<TableRowData>, index: number) => {\n    if (!resizeLineParams.draggingCol) return;\n    const target = resizeLineParams.draggingCol;\n    const targetBoundRect = target.getBoundingClientRect();\n    const tableBoundRect = tableContentRef.value?.getBoundingClientRect();\n    const effectNextCol = effectColMap.value[col.colKey]?.next;\n    const effectPrevCol = effectColMap.value[col.colKey]?.prev;\n    const { resizeLinePos, minResizeLineLeft, maxResizeLineLeft } = isColRightFixActive(col)\n      ? getFixedToRightResizeInfo(target, col, effectNextCol, targetBoundRect, tableBoundRect)\n      : getOtherResizeInfo(col, effectNextCol, targetBoundRect, tableBoundRect);\n\n    // 开始拖拽，记录下鼠标起始位置\n    resizeLineParams.isDragging = true;\n    resizeLineParams.draggingStart = e.x;\n\n    // 初始化 resizeLine 标记线\n    if (resizeLineRef?.value) {\n      resizeLineStyle.display = 'block';\n      resizeLineStyle.height = `${tableBoundRect.bottom - targetBoundRect.top}px`;\n      resizeLineStyle.left = `${resizeLinePos}px`;\n      const parent = tableContentRef.value.parentElement.getBoundingClientRect();\n      resizeLineStyle.bottom = `${parent.bottom - tableBoundRect.bottom}px`;\n    }\n\n    // 结束拖拽，更新列宽。拖拽时鼠标可能会超出 table 范围，需要给 document 绑定拖拽相关事件；\n    const onDragEnd = () => {\n      if (!resizeLineParams.isDragging) return;\n      const moveDistance = resizeLinePos - parseFloat(resizeLineStyle.left) || 0;\n      /**\n       * 计算列宽\n       *  - 若表格宽度已经超出，存在横向滚动，则直接改变当前列宽，也意味着改变表格总宽度\n       *  - 操作边框右侧，改变当前列和上一列；若上一列禁用宽度调整，则改变上一列的上一列，依次往前寻找\n       *  - 操作边框左侧，改变当前列和下一列；若下一列禁用宽度调整，则改变下一列的下一列，依次往后寻找\n       */\n      const thWidthList = getThWidthList('calculate');\n      const currentCol = effectColMap.value[col.colKey]?.current;\n      if (!currentCol) return;\n      const currentSibling = resizeLineParams.effectCol === 'next' ? currentCol.nextSibling : currentCol.prevSibling;\n      // 多行表头，列宽为最后一层的宽度，即叶子结点宽度\n      const newThWidthList = { ...thWidthList };\n      // 当前列不允许修改宽度，就调整相邻列的宽度\n      const tmpCurrentCol = col.resizable !== false ? col : currentSibling;\n      // 是否允许调整后一列的列宽：列宽未超出时，满足后一列设置的最大最小值时且并非是最后一列（最后一列的右侧拉伸会认为是表格整体宽度调整）\n      const rightCol = resizeLineParams.effectCol === 'next' ? currentCol.nextSibling : col;\n      const canResizeSiblingColWidth = getSiblingColCanResizable(newThWidthList, rightCol, moveDistance, index);\n\n      if (resizeLineParams.effectCol === 'next') {\n        // 右侧激活态的固定列，需特殊调整\n        if (isColRightFixActive(col)) {\n          // 如果不相同，则表示改变相临的右侧列宽\n          if (target.dataset.colkey !== col.colKey) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          } else {\n            newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n          }\n        } else {\n          // 非右侧激活态的固定列\n          newThWidthList[tmpCurrentCol.colKey] -= moveDistance;\n          if (canResizeSiblingColWidth) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          }\n        }\n      } else if (resizeLineParams.effectCol === 'prev') {\n        if (canResizeSiblingColWidth) {\n          newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n        }\n        effectPrevCol && (newThWidthList[effectPrevCol.colKey] -= moveDistance);\n      }\n      updateThWidthList(newThWidthList);\n      const tableWidth = getTotalTableWidth(newThWidthList);\n      setTableElmWidth(Math.round(tableWidth));\n      updateTableAfterColumnResize();\n\n      // 恢复设置\n      resizeLineParams.isDragging = false;\n      resizeLineParams.draggingCol = null;\n      resizeLineParams.effectCol = null;\n      target.style.cursor = '';\n      resizeLineStyle.display = 'none';\n      resizeLineStyle.left = '0';\n      off(document, 'mouseup', onDragEnd);\n      off(document, 'mousemove', onDragOver);\n      document.onselectstart = originalSelectStart;\n      document.ondragstart = originalDragStart;\n      onColumnResizeChange?.({ columnsWidth: newThWidthList });\n    };\n\n    // 注意前后两列最小和最大宽度限制\n    const onDragOver = (e: MouseEvent) => {\n      if (resizeLineParams.isDragging) {\n        const left = resizeLinePos + e.x - resizeLineParams.draggingStart;\n        resizeLineStyle.left = `${Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft)}px`;\n      }\n    };\n\n    on(document, 'mouseup', onDragEnd);\n    on(document, 'mousemove', onDragOver);\n\n    // 禁用鼠标的选中文字和拖放\n    document.onselectstart = () => false;\n    document.ondragstart = () => false;\n  };\n\n  return {\n    resizeLineRef,\n    resizeLineStyle,\n    onColumnMouseover,\n    onColumnMousedown,\n    setEffectColMap,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}