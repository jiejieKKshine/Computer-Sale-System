{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport axios from 'axios';\n\n// 定义响应式数据变量\n\nexport default {\n  __name: 'OrderComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const data = ref([]);\n    const total = ref(10);\n\n    // 定义表格的样式及状态控制变量\n    const stripe = ref(true);\n    const bordered = ref(true);\n    const hover = ref(false);\n    const tableLayout = ref(false);\n    const size = ref('medium');\n    const showHeader = ref(true);\n\n    // 定义表格列配置\n    const columns = ref([{\n      colKey: 'oid',\n      title: '订单号',\n      width: '100'\n    }, {\n      colKey: 'order_time',\n      title: '下单时间',\n      width: '150'\n    }, {\n      colKey: 'cid',\n      title: '顾客号',\n      width: '100'\n    }, {\n      colKey: 'status',\n      title: '订单状态',\n      width: '100'\n    },\n    // { colKey:'detail', title: '订单详细', width: '100' },\n    {\n      colKey: 'total_price',\n      title: '订单总价',\n      width: '100'\n    }\n    // { colKey:'confirm', title: '确认订单', width: '100' },\n    ]);\n\n    // 定义行点击事件处理函数\n    const handleRowClick = e => {\n      console.log(e);\n    };\n\n    // 定义分页配置\n    const pagination = {\n      defaultCurrent: 1,\n      defaultPageSize: 5,\n      total\n    };\n\n    // 请求后端数据并写入表中\n    const fetchData = async () => {\n      try {\n        console.log('开始请求数据...');\n        const response = await axios.get('/api/orders'); // 根据实际API端点替换\n        // const response = await axios.get('http://localhost:8080/orders');\n        console.log('请求数据成功:', response.data);\n        // console.log('请求数据总数:', response.data.length);\n        data.value = response.data;\n        total.value = response.data.length;\n      } catch (error) {\n        console.error('请求数据失败:', error);\n      }\n    };\n    onMounted(() => {\n      fetchData();\n    });\n    const __returned__ = {\n      data,\n      total,\n      stripe,\n      bordered,\n      hover,\n      tableLayout,\n      size,\n      showHeader,\n      columns,\n      handleRowClick,\n      pagination,\n      fetchData,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","data","total","stripe","bordered","hover","tableLayout","size","showHeader","columns","colKey","title","width","handleRowClick","e","console","log","pagination","defaultCurrent","defaultPageSize","fetchData","response","get","value","length","error"],"sources":["E:/三年级上册/ComputerSale/computersale/src/views/OrderComponent.vue"],"sourcesContent":["<template>\r\n  <t-space direction=\"vertical\">\r\n    <!-- 按钮操作区域 -->\r\n    <t-radio-group v-model=\"size\" variant=\"default-filled\">\r\n      <!-- <t-radio-button value=\"small\">小尺寸</t-radio-button> -->\r\n      <t-radio-button value=\"medium\">订单列表</t-radio-button>\r\n      <!-- <t-radio-button value=\"large\">大尺寸</t-radio-button> -->\r\n    </t-radio-group>\r\n\r\n    <!-- 当数据为空需要占位时，会显示 cellEmptyContent -->\r\n    <t-table\r\n      row-key=\"index\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      :stripe=\"stripe\"\r\n      :bordered=\"bordered\"\r\n      :hover=\"hover\"\r\n      :table-layout=\"tableLayout ? 'auto' : 'fixed'\"\r\n      :size=\"size\"\r\n      :pagination=\"pagination\"\r\n      :show-header=\"showHeader\"\r\n      cell-empty-content=\"-\"\r\n      resizable\r\n      lazy-load\r\n      @row-click=\"handleRowClick\"\r\n    >\r\n    </t-table>\r\n  </t-space>\r\n</template>\r\n\r\n<script setup lang=\"jsx\">\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\n\r\n// 定义响应式数据变量\r\nconst data = ref([]);\r\nconst total = ref(10);\r\n\r\n// 定义表格的样式及状态控制变量\r\nconst stripe = ref(true);\r\nconst bordered = ref(true);\r\nconst hover = ref(false);\r\nconst tableLayout = ref(false);\r\nconst size = ref('medium');\r\nconst showHeader = ref(true);\r\n\r\n// 定义表格列配置\r\nconst columns = ref([\r\n  { colKey: 'oid', title: '订单号', width: '100' },\r\n  { colKey: 'order_time', title: '下单时间', width: '150' },\r\n  { colKey: 'cid', title: '顾客号', width: '100' },\r\n  { colKey:'status', title: '订单状态', width: '100' },\r\n  // { colKey:'detail', title: '订单详细', width: '100' },\r\n  { colKey:'total_price', title: '订单总价', width: '100' },\r\n  // { colKey:'confirm', title: '确认订单', width: '100' },\r\n]);\r\n\r\n// 定义行点击事件处理函数\r\nconst handleRowClick = (e) => {\r\n  console.log(e);\r\n};\r\n\r\n// 定义分页配置\r\nconst pagination = {\r\n  defaultCurrent: 1,\r\n  defaultPageSize: 5,\r\n  total,\r\n};\r\n\r\n// 请求后端数据并写入表中\r\nconst fetchData = async () => {\r\n  try {\r\n    console.log('开始请求数据...');\r\n    const response = await axios.get('/api/orders'); // 根据实际API端点替换\r\n    // const response = await axios.get('http://localhost:8080/orders');\r\n    console.log('请求数据成功:', response.data);\r\n    // console.log('请求数据总数:', response.data.length);\r\n    data.value = response.data;\r\n    total.value = response.data.length;\r\n  } catch (error) {\r\n    console.error('请求数据失败:', error);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  fetchData();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 样式范围限定在当前组件 */\r\n</style>"],"mappings":"AA+BA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;;;;;;;IACA,MAAMC,IAAI,GAAGH,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMI,KAAK,GAAGJ,GAAG,CAAC,EAAE,CAAC;;IAErB;IACA,MAAMK,MAAM,GAAGL,GAAG,CAAC,IAAI,CAAC;IACxB,MAAMM,QAAQ,GAAGN,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAMO,KAAK,GAAGP,GAAG,CAAC,KAAK,CAAC;IACxB,MAAMQ,WAAW,GAAGR,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMS,IAAI,GAAGT,GAAG,CAAC,QAAQ,CAAC;IAC1B,MAAMU,UAAU,GAAGV,GAAG,CAAC,IAAI,CAAC;;IAE5B;IACA,MAAMW,OAAO,GAAGX,GAAG,CAAC,CAClB;MAAEY,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAM,CAAC,EAC7C;MAAEF,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAM,CAAC,EACrD;MAAEF,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAM,CAAC,EAC7C;MAAEF,MAAM,EAAC,QAAQ;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAM,CAAC;IAChD;IACA;MAAEF,MAAM,EAAC,aAAa;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAM;IACpD;IAAA,CACD,CAAC;;IAEF;IACA,MAAMC,cAAc,GAAIC,CAAC,IAAK;MAC5BC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB,CAAC;;IAED;IACA,MAAMG,UAAU,GAAG;MACjBC,cAAc,EAAE,CAAC;MACjBC,eAAe,EAAE,CAAC;MAClBjB;IACF,CAAC;;IAED;IACA,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFL,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxB,MAAMK,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QACjD;QACAP,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEK,QAAQ,CAACpB,IAAI,CAAC;QACrC;QACAA,IAAI,CAACsB,KAAK,GAAGF,QAAQ,CAACpB,IAAI;QAC1BC,KAAK,CAACqB,KAAK,GAAGF,QAAQ,CAACpB,IAAI,CAACuB,MAAM;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF,CAAC;IAED1B,SAAS,CAAC,MAAM;MACdqB,SAAS,CAAC,CAAC;IACb,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}