{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _slicedToArray } from '../../_chunks/dep-5efe53d1.mjs';\nimport { _ as _defineProperty } from '../../_chunks/dep-fa52aa21.mjs';\nimport { toRefs, ref, computed, watch } from 'vue';\nimport { g as get_1 } from '../../_chunks/dep-ae202bc0.mjs';\nimport { s as set_1 } from '../../_chunks/dep-ed41e004.mjs';\nimport { i as isFunction_1 } from '../../_chunks/dep-06dcbf4c.mjs';\nimport { getEditableKeysMap } from '../../_common/js/table/utils.mjs';\nimport { validate } from '../../form/form-model.mjs';\nimport { c as cloneDeep_1 } from '../../_chunks/dep-bb899bfd.mjs';\nimport { getCellKey } from './useRowspanAndColspan.mjs';\nimport '../../_chunks/dep-593f2b67.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-aeaef131.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-ab4bb9b8.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-6ab5363f.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-e9841b9e.mjs';\nimport '../../_chunks/dep-7932c2e8.mjs';\nimport '../../_chunks/dep-0e581ac0.mjs';\nimport '../../_chunks/dep-49aeee3c.mjs';\nimport '../../_chunks/dep-b5bf85f5.mjs';\nimport '../../_chunks/dep-ec0bbd9f.mjs';\nimport '../../_chunks/dep-889e457b.mjs';\nimport '../../_chunks/dep-0d047dce.mjs';\nimport '../../_chunks/dep-df472119.mjs';\nimport '../../_chunks/dep-b91a8171.mjs';\nimport '../../_chunks/dep-1b78414a.mjs';\nimport '../../_chunks/dep-1a4bb2f2.mjs';\nimport '../../_chunks/dep-cc8ebcde.mjs';\nimport '../../_chunks/dep-f5579c03.mjs';\nimport '../../_chunks/dep-d84f19b3.mjs';\nimport '../../_chunks/dep-3c65fae8.mjs';\nimport '../../_common/js/utils/helper.mjs';\nimport '../../_chunks/dep-4a990ea3.mjs';\nimport '../../_chunks/dep-5d3f7c0e.mjs';\nimport '../../_chunks/dep-03a7fb6c.mjs';\nimport '../../_chunks/dep-73384992.mjs';\nimport '../../_chunks/dep-58a62202.mjs';\nimport '../../_chunks/dep-5922c8f3.mjs';\nimport '../../_chunks/dep-92f86d1d.mjs';\nimport '../../_chunks/dep-732f0b7d.mjs';\nimport '../../_common/js/log/index.mjs';\nimport '../../_common/js/log/log.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction useRowEdit(props) {\n  var _toRefs = toRefs(props),\n    editableRowKeys = _toRefs.editableRowKeys;\n  var cellRuleMap = /* @__PURE__ */new Map();\n  var errorListMap = ref({});\n  var editableKeysMap = computed(function () {\n    return getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || \"id\");\n  });\n  var editingCells = ref({});\n  var editedFormData = ref({});\n  var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {\n    var errorMap = {};\n    errors.forEach(function (_ref) {\n      var row = _ref.row,\n        col = _ref.col,\n        errorList = _ref.errorList;\n      var rowValue = get_1(row, props.rowKey || \"id\");\n      var key = [rowValue, col.colKey].join(\"__\");\n      if (errorList !== null && errorList !== void 0 && errorList.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n  var validateOneRowData = function validateOneRowData(rowValue) {\n    var rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    var list = rowRules.map(function (item) {\n      return new Promise(function (resolve) {\n        var editedRow = item.editedRow,\n          col = item.col;\n        var rules = isFunction_1(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n        if (!col.edit || !rules || !rules.length) {\n          resolve(_objectSpread(_objectSpread({}, item), {}, {\n            errorList: []\n          }));\n          return;\n        }\n        validate(get_1(editedRow, col.colKey), rules).then(function (r) {\n          resolve(_objectSpread(_objectSpread({}, item), {}, {\n            errorList: r.filter(function (t) {\n              return !t.result;\n            })\n          }));\n        });\n      });\n    });\n    return new Promise(function (resolve, reject) {\n      Promise.all(list).then(function (errors) {\n        resolve({\n          errors: errors.filter(function (t) {\n            var _t$errorList;\n            return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;\n          }),\n          errorMap: getErrorListMapByErrors(errors)\n        });\n      }, reject);\n    });\n  };\n  var validateRowData = function validateRowData(rowValue) {\n    return new Promise(function (resolve, reject) {\n      validateOneRowData(rowValue).then(function (_ref2) {\n        var _props$onRowValidate;\n        var errors = _ref2.errors,\n          errorMap = _ref2.errorMap;\n        errorListMap.value = errorMap;\n        var tTrigger = \"parent\";\n        (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 || _props$onRowValidate.call(props, {\n          trigger: tTrigger,\n          result: errors\n        });\n        resolve({\n          trigger: tTrigger,\n          result: errors\n        });\n      }, reject);\n    });\n  };\n  var validateTableCellData = function validateTableCellData() {\n    var cellKeys = Object.keys(editingCells.value);\n    var promiseList = cellKeys.map(function (cellKey) {\n      return editingCells.value[cellKey].validateEdit(\"parent\");\n    });\n    return new Promise(function (resolve, reject) {\n      Promise.all(promiseList).then(function (arr) {\n        var _props$onValidate;\n        var allErrorListMap = {};\n        arr.forEach(function (result, index) {\n          if (result === true) return;\n          allErrorListMap[cellKeys[index]] = result;\n        });\n        (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {\n          result: allErrorListMap\n        });\n        resolve({\n          result: allErrorListMap\n        });\n      }, reject);\n    });\n  };\n  var validateTableData = function validateTableData() {\n    if (Object.keys(editingCells.value).length) {\n      return validateTableCellData();\n    }\n    var promiseList = [];\n    var data = props.data || [];\n    for (var i = 0, len = data.length; i < len; i++) {\n      var rowValue = get_1(data[i], props.rowKey || \"id\");\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise(function (resolve, reject) {\n      Promise.all(promiseList).then(function (rList) {\n        var _props$onValidate2;\n        var allErrorListMap = {};\n        rList.forEach(function () {\n          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n              errors: [],\n              errorMap: {}\n            },\n            errorMap = _ref3.errorMap;\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        errorListMap.value = allErrorListMap;\n        (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, {\n          result: allErrorListMap\n        });\n        resolve({\n          result: allErrorListMap\n        });\n      }, reject);\n    });\n  };\n  var onUpdateEditedCell = function onUpdateEditedCell(rowValue, lastRowData, data) {\n    if (!editedFormData.value[rowValue]) {\n      editedFormData.value[rowValue] = cloneDeep_1(lastRowData);\n    }\n    Object.entries(data).forEach(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n        key = _ref5[0],\n        val = _ref5[1];\n      set_1(editedFormData.value[rowValue], key, val);\n    });\n  };\n  var onRuleChange = function onRuleChange(context) {\n    if (props.editableRowKeys) {\n      var rowValue = get_1(context.row, props.rowKey || \"id\");\n      var rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        var index = rules.findIndex(function (t) {\n          return t.col.colKey === context.col.colKey;\n        });\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n  var clearValidateData = function clearValidateData() {\n    errorListMap.value = {};\n  };\n  var onPrimaryTableCellEditChange = function onPrimaryTableCellEditChange(params) {\n    var cellKey = getCellKey(params.row, props.rowKey, params.col.colKey, params.colIndex);\n    if (params.isEdit) {\n      editingCells.value[cellKey] = params;\n    } else {\n      delete editingCells.value[cellKey];\n    }\n  };\n  var getEditRowData = function getEditRowData(_ref6) {\n    var _props$editableRowKey;\n    var row = _ref6.row,\n      col = _ref6.col;\n    var rowValue = get_1(row, props.rowKey || \"id\");\n    var editedRowData = editedFormData.value[rowValue];\n    if (editedRowData && (_props$editableRowKey = props.editableRowKeys) !== null && _props$editableRowKey !== void 0 && _props$editableRowKey.includes(rowValue)) {\n      var tmpRow = _objectSpread({}, editedRowData);\n      set_1(tmpRow, col.colKey, get_1(editedRowData, col.colKey));\n      return tmpRow;\n    }\n    return row;\n  };\n  watch(function () {\n    var _editableRowKeys$valu;\n    return (_editableRowKeys$valu = editableRowKeys.value) === null || _editableRowKeys$valu === void 0 ? void 0 : _editableRowKeys$valu.join(\",\");\n  }, function (keyStr) {\n    var editableRowKeys2 = keyStr.split(\",\");\n    var rowValueList = Object.keys(editedFormData.value);\n    rowValueList.forEach(function (key) {\n      if (!editableRowKeys2.includes(key)) {\n        delete editedFormData.value[key];\n      }\n    });\n  });\n  return {\n    editedFormData: editedFormData,\n    errorListMap: errorListMap,\n    editableKeysMap: editableKeysMap,\n    validateTableData: validateTableData,\n    validateRowData: validateRowData,\n    onRuleChange: onRuleChange,\n    clearValidateData: clearValidateData,\n    onUpdateEditedCell: onUpdateEditedCell,\n    getEditRowData: getEditRowData,\n    onPrimaryTableCellEditChange: onPrimaryTableCellEditChange\n  };\n}\nexport { useRowEdit as default };","map":{"version":3,"names":["useRowEdit","props","_toRefs","toRefs","editableRowKeys","cellRuleMap","Map","errorListMap","ref","editableKeysMap","computed","getEditableKeysMap","data","rowKey","editingCells","editedFormData","getErrorListMapByErrors","errors","errorMap","forEach","_ref","row","col","errorList","rowValue","get_1","key","colKey","join","length","validateOneRowData","rowRules","get","list","map","item","Promise","resolve","editedRow","rules","isFunction_1","edit","_objectSpread","validate","then","r","filter","t","result","reject","all","_t$errorList","validateRowData","_ref2","_props$onRowValidate","value","tTrigger","onRowValidate","call","trigger","validateTableCellData","cellKeys","Object","keys","promiseList","cellKey","validateEdit","arr","_props$onValidate","allErrorListMap","index","onValidate","validateTableData","i","len","push","rList","_props$onValidate2","_ref3","arguments","undefined","assign","onUpdateEditedCell","lastRowData","cloneDeep_1","entries","_ref4","_ref5","_slicedToArray","val","set_1","onRuleChange","context","findIndex","set","clearValidateData","onPrimaryTableCellEditChange","params","getCellKey","colIndex","isEdit","getEditRowData","_ref6","_props$editableRowKey","editedRowData","includes","tmpRow","watch","_editableRowKeys$valu","keyStr","editableRowKeys2","split","rowValueList"],"sources":["../../../src/table/hooks/useEditableRow.ts"],"sourcesContent":["import { ref, computed, watch, toRefs } from 'vue';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport isFunction from 'lodash/isFunction';\nimport { PrimaryTableProps } from '../interface';\nimport { getEditableKeysMap } from '../../_common/js/table/utils';\nimport { validate } from '../../form/form-model';\nimport cloneDeep from 'lodash/cloneDeep';\nimport {\n  PrimaryTableRowEditContext,\n  TableRowData,\n  TableErrorListMap,\n  PrimaryTableInstanceFunctions,\n  ErrorListObjectType,\n  PrimaryTableCellParams,\n} from '../type';\nimport { getCellKey } from './useRowspanAndColspan';\nimport { OnEditableChangeContext } from '../editable-cell';\n\nexport interface TablePromiseErrorData {\n  errors: ErrorListObjectType<TableRowData>[];\n  errorMap: TableErrorListMap;\n}\n\nexport default function useRowEdit(props: PrimaryTableProps) {\n  const { editableRowKeys } = toRefs(props);\n  const cellRuleMap = new Map<any, PrimaryTableRowEditContext<TableRowData>[]>();\n  // 校验不通过的错误信息，其中 key 值为 [rowValue, col.colKey].join('__')\n  const errorListMap = ref<TableErrorListMap>({});\n  // 处于编辑态的表格行\n  const editableKeysMap = computed(() => getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || 'id'));\n  // 当前编辑的单元格\n  const editingCells = ref<{ [cellKey: string]: OnEditableChangeContext<TableRowData> }>({});\n  // 编辑状态的数据\n  const editedFormData = ref<{ [rowValue: string]: { [colKey: string]: any } }>({});\n\n  const getErrorListMapByErrors = (errors: ErrorListObjectType<TableRowData>[]): TableErrorListMap => {\n    const errorMap: TableErrorListMap = {};\n    errors.forEach(({ row, col, errorList }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const key = [rowValue, col.colKey].join('__');\n      if (errorList?.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n\n  // 校验一行的数据\n  const validateOneRowData = (rowValue: any) => {\n    const rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    const list = rowRules.map(\n      (item) =>\n        new Promise<ErrorListObjectType<TableRowData>>((resolve) => {\n          const { editedRow, col } = item;\n          const rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n          if (!col.edit || !rules || !rules.length) {\n            resolve({ ...item, errorList: [] });\n            return;\n          }\n          validate(get(editedRow, col.colKey), rules).then((r) => {\n            resolve({ ...item, errorList: r.filter((t) => !t.result) });\n          });\n        }),\n    );\n    return new Promise<TablePromiseErrorData>((resolve, reject) => {\n      Promise.all(list).then((errors) => {\n        resolve({\n          errors: errors.filter((t) => t.errorList?.length),\n          errorMap: getErrorListMapByErrors(errors),\n        });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验表格单行数据（对外开放方法，修改时需慎重）\n   * @param rowValue 行唯一标识\n   */\n  const validateRowData: PrimaryTableInstanceFunctions['validateRowData'] = (rowValue: any) =>\n    new Promise((resolve, reject) => {\n      validateOneRowData(rowValue).then(({ errors, errorMap }) => {\n        errorListMap.value = errorMap;\n        // 缺少校验文本显示\n        const tTrigger = 'parent';\n        props.onRowValidate?.({ trigger: tTrigger, result: errors });\n        resolve({ trigger: tTrigger, result: errors });\n      }, reject);\n    });\n\n  // 校验可编辑单元格\n  const validateTableCellData = (): Promise<{ result: TableErrorListMap }> => {\n    const cellKeys = Object.keys(editingCells.value);\n    const promiseList = cellKeys.map((cellKey) => editingCells.value[cellKey].validateEdit('parent'));\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((arr) => {\n        const allErrorListMap: TableErrorListMap = {};\n        arr.forEach((result, index) => {\n          if (result === true) return;\n          allErrorListMap[cellKeys[index]] = result;\n        });\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验整个表格数据（对外开放方法，修改时需慎重）\n   */\n  const validateTableData: PrimaryTableInstanceFunctions['validateTableData'] = () => {\n    if (Object.keys(editingCells.value).length) {\n      return validateTableCellData();\n    }\n    const promiseList: Promise<TablePromiseErrorData>[] = [];\n    const data = props.data || [];\n    for (let i = 0, len = data.length; i < len; i++) {\n      const rowValue = get(data[i], props.rowKey || 'id');\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((rList) => {\n        const allErrorListMap: TableErrorListMap = {};\n        rList.forEach(({ errorMap } = { errors: [], errorMap: {} }) => {\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        errorListMap.value = allErrorListMap;\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  /** 更新编辑态单元格数据 */\n  const onUpdateEditedCell = (rowValue: any, lastRowData: TableRowData, data: { [key: string]: any }) => {\n    if (!editedFormData.value[rowValue]) {\n      editedFormData.value[rowValue] = cloneDeep(lastRowData);\n    }\n    Object.entries(data).forEach(([key, val]) => {\n      set(editedFormData.value[rowValue], key, val);\n    });\n  };\n\n  const onRuleChange = (context: PrimaryTableRowEditContext<TableRowData>) => {\n    // 编辑行，预存校验信息，方便最终校验\n    if (props.editableRowKeys) {\n      const rowValue = get(context.row, props.rowKey || 'id');\n      const rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        const index = rules.findIndex((t) => t.col.colKey === context.col.colKey);\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n\n  const clearValidateData = () => {\n    errorListMap.value = {};\n  };\n\n  const onPrimaryTableCellEditChange = (params: OnEditableChangeContext<TableRowData>) => {\n    const cellKey = getCellKey(params.row, props.rowKey, params.col.colKey, params.colIndex);\n    if (params.isEdit) {\n      // @ts-ignore\n      editingCells.value[cellKey] = params;\n    } else {\n      delete editingCells.value[cellKey];\n    }\n  };\n\n  const getEditRowData = ({ row, col }: PrimaryTableCellParams<TableRowData>) => {\n    const rowValue = get(row, props.rowKey || 'id');\n    const editedRowData = editedFormData.value[rowValue];\n    if (editedRowData && props.editableRowKeys?.includes(rowValue)) {\n      const tmpRow = { ...editedRowData };\n      set(tmpRow, col.colKey, get(editedRowData, col.colKey));\n      return tmpRow;\n    }\n    return row;\n  };\n\n  watch(\n    () => editableRowKeys.value?.join(','),\n    (keyStr) => {\n      const editableRowKeys = keyStr.split(',');\n      const rowValueList = Object.keys(editedFormData.value);\n      rowValueList.forEach((key) => {\n        if (!editableRowKeys.includes(key)) {\n          // clear exited editable state row data\n          delete editedFormData.value[key];\n        }\n      });\n    },\n  );\n\n  return {\n    editedFormData,\n    errorListMap,\n    editableKeysMap,\n    validateTableData,\n    validateRowData,\n    onRuleChange,\n    clearValidateData,\n    onUpdateEditedCell,\n    getEditRowData,\n    onPrimaryTableCellEditChange,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}