{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { watch, onBeforeUnmount } from 'vue';\nfunction useResizeObserver(container, callback) {\n  if (typeof window === \"undefined\") return;\n  var isSupport = window && window.ResizeObserver;\n  if (!isSupport) return;\n  var containerObserver = null;\n  var cleanupObserver = function cleanupObserver() {\n    if (!containerObserver || !container.value) return;\n    containerObserver.unobserve(container.value);\n    containerObserver.disconnect();\n    containerObserver = null;\n  };\n  var addObserver = function addObserver(el) {\n    containerObserver = new ResizeObserver(callback);\n    containerObserver.observe(el);\n  };\n  container && watch(container, function (el) {\n    cleanupObserver();\n    el && addObserver(el);\n  }, {\n    immediate: true,\n    flush: \"post\"\n  });\n  onBeforeUnmount(function () {\n    cleanupObserver();\n  });\n}\nexport { useResizeObserver as default };","map":{"version":3,"names":["useResizeObserver","container","callback","window","isSupport","ResizeObserver","containerObserver","cleanupObserver","value","unobserve","disconnect","addObserver","el","observe","watch","immediate","flush","onBeforeUnmount"],"sources":["../../src/hooks/useResizeObserver.ts"],"sourcesContent":["import { Ref, watch, onBeforeUnmount } from 'vue';\n\nexport default function useResizeObserver(\n  container: Ref<HTMLElement>,\n  callback: (data: ResizeObserverEntry[]) => void,\n) {\n  if (typeof window === 'undefined') return;\n\n  const isSupport = window && (window as Window & typeof globalThis).ResizeObserver;\n  // unit tests do not need any warn console; too many warns influence focusing on more important log info\n  if (!isSupport) return;\n\n  let containerObserver: ResizeObserver = null;\n\n  const cleanupObserver = () => {\n    if (!containerObserver || !container.value) return;\n    containerObserver.unobserve(container.value);\n    containerObserver.disconnect();\n    containerObserver = null;\n  };\n\n  const addObserver = (el: HTMLElement) => {\n    containerObserver = new ResizeObserver(callback);\n    containerObserver.observe(el);\n  };\n\n  // can not use container.value to judge\n  container &&\n    watch(\n      container,\n      (el) => {\n        cleanupObserver();\n        el && addObserver(el);\n      },\n      { immediate: true, flush: 'post' },\n    );\n\n  onBeforeUnmount(() => {\n    cleanupObserver();\n  });\n}\n"],"mappings":";;;;;;;AAEwB,SAAAA,kBACtBC,SAAA,EACAC,QACA;EACA,IAAI,OAAOC,MAAW,kBAAa;EAE7B,IAAAC,SAAA,GAAYD,MAAA,IAAWA,MAAsC,CAAAE,cAAA;EAEnE,IAAI,CAACD,SAAA,EAAW;EAEhB,IAAIE,iBAAoC;EAExC,IAAMC,eAAA,GAAkB,SAAlBA,gBAAA,EAAwB;IACxB,KAACD,iBAAqB,KAACL,SAAU,CAAAO,KAAA,EAAO;IAC1BF,iBAAA,CAAAG,SAAA,CAAUR,SAAA,CAAUO,KAAK;IAC3CF,iBAAA,CAAkBI,UAAW;IACTJ,iBAAA;GACtB;EAEM,IAAAK,WAAA,GAAc,SAAdA,YAAeC,EAAoB;IACnBN,iBAAA,OAAID,cAAA,CAAeH,QAAQ;IAC/CI,iBAAA,CAAkBO,OAAA,CAAQD,EAAE;GAC9B;EAIEX,SAAA,IAAAa,KAAA,CACEb,SAAA,EACA,UAACW,EAAO;IACUL,eAAA;IAChBK,EAAA,IAAMD,WAAA,CAAYC,EAAE;EACtB,GACA;IAAEG,SAAA,EAAW,IAAM;IAAAC,KAAA,EAAO;EAAO,CACnC;EAEFC,eAAA,CAAgB,YAAM;IACJV,eAAA;EAClB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}