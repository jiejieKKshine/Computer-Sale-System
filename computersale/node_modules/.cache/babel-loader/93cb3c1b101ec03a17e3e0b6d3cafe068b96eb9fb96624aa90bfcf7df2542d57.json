{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\nvar format = function format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"\\u2318\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n};\nvar deselectCurrent = function deselectCurrent() {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n  var tagName = active.tagName.toUpperCase();\n  switch (tagName) {\n    case \"INPUT\":\n    case \"TEXTAREA\":\n      active.blur();\n      break;\n    default:\n      active = null;\n      break;\n  }\n  selection.removeAllRanges();\n  return function () {\n    selection.type === \"Caret\" && selection.removeAllRanges();\n    if (!selection.rangeCount) {\n      ranges.forEach(function (range) {\n        selection.addRange(range);\n      });\n    }\n    active && active.focus();\n  };\n};\nvar copy = function copy(text, options) {\n  var message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  try {\n    reselectPrevious = deselectCurrent();\n    range = document.createRange();\n    selection = document.getSelection();\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    mark.style.all = \"unset\";\n    mark.style.position = \"fixed\";\n    mark.style.top = \"0\";\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    mark.style.whiteSpace = \"pre\";\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function (e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n    document.body.appendChild(mark);\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err2) {\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n  return success;\n};\nexport { copy as default };","map":{"version":3,"names":["defaultMessage","format","message","copyKey","test","navigator","userAgent","replace","deselectCurrent","selection","document","getSelection","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","removeAllRanges","type","forEach","range","addRange","focus","copy","text","options","reselectPrevious","mark","success","createRange","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","userSelect","addEventListener","e","stopPropagation","preventDefault","clipboardData","clearData","setData","onCopy","body","appendChild","selectNodeContents","successful","execCommand","Error","err","window","err2","prompt","removeRange","removeChild"],"sources":["../../../../src/typography/utils/copy-to-clipboard/index.ts"],"sourcesContent":["interface Options {\n  message?: string;\n  format?: string; // MIME type\n  onCopy?: (clipboardData: object) => void;\n}\n\nconst defaultMessage = 'Copy to clipboard: #{key}, Enter';\n\nconst format = (message: string) => {\n  const copyKey = (/mac os x/i.test(navigator.userAgent) ? 'âŒ˜' : 'Ctrl') + '+C';\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n};\n\n// inspired by https://github.com/sudodoki/toggle-selection, refactor to esm\nconst deselectCurrent = () => {\n  const selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  let active = document.activeElement as any;\n\n  const ranges: Range[] = [];\n  for (let i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  const tagName = active.tagName.toUpperCase(); // toUpperCase handles XHTML\n  switch (tagName) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' && selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function (range) {\n        selection.addRange(range);\n      });\n    }\n\n    active && active.focus();\n  };\n};\n\nconst copy = (text: string, options?: Options) => {\n  let message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement('span');\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = 'unset';\n    // prevents scrolling to the end of the page\n    mark.style.position = 'fixed';\n    mark.style.top = '0';\n    mark.style.clip = 'rect(0, 0, 0, 0)';\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = 'pre';\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = 'text';\n    mark.style.userSelect = 'text';\n    mark.addEventListener('copy', function (e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    const successful = document.execCommand('copy');\n    if (!successful) {\n      throw new Error('copy command was unsuccessful');\n    }\n    success = true;\n  } catch (err) {\n    try {\n      (window as any).clipboardData.setData(options.format || 'text', text);\n      options.onCopy && options.onCopy((window as any).clipboardData);\n      success = true;\n    } catch (err) {\n      message = format('message' in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == 'function') {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n};\n\nexport default copy;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}