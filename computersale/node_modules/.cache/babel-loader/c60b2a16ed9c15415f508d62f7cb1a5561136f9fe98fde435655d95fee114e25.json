{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { i as isUndefined_1 } from '../../../_chunks/dep-58a62202.mjs';\nimport { i as isString_1 } from '../../../_chunks/dep-03a7fb6c.mjs';\nimport { i as isNumber_1 } from '../../../_chunks/dep-889e457b.mjs';\nimport { compareNumber, isInputNumber, largeNumberAdd, largeNumberSubtract, formatENumber, largeNumberToFixed } from './large-number.mjs';\nexport { compareLargeNumber, compareNumber, decimalPlacesToFixedNum, fillZero, formatDecimal, formatENumber, isInfinity, isInputNumber, isSafeNumber, largeIntNumberAdd, largeIntegerNumberSubtract, largeNumberAdd, largeNumberSubtract, largeNumberToFixed, largePositiveNumberAdd, largePositiveNumberSubtract, removeInvalidZero } from './large-number.mjs';\nimport '../log/index.mjs';\nimport log from '../log/log.mjs';\nimport '../../../_chunks/dep-eca422c3.mjs';\nimport '../../../_chunks/dep-bf7257e7.mjs';\nimport '../../../_chunks/dep-4659d73b.mjs';\nimport '../../../_chunks/dep-eae2a67e.mjs';\nimport '../../../_chunks/dep-626c497d.mjs';\nimport '../../../_chunks/dep-29ef8419.mjs';\nimport '../../../_chunks/dep-5efe53d1.mjs';\nimport '../../../_chunks/dep-593f2b67.mjs';\nimport '../../../_chunks/dep-2b09875b.mjs';\nfunction canAddNumber(num, max) {\n  var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString_1(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\nfunction canReduceNumber(num, min) {\n  var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString_1(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\nfunction putInRangeNumber(val, params) {\n  if (val === \"\") return void 0;\n  var max = params.max,\n    min = params.min,\n    lastValue = params.lastValue,\n    largeNumber = params.largeNumber;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString_1(max) || max === Infinity) && (isString_1(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\nfunction positiveAdd(num1, num2) {\n  var _num1$toString$split$, _num2$toString$split$;\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  var r1 = ((_num1$toString$split$ = num1.toString().split(\".\")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;\n  var r2 = ((_num2$toString$split$ = num2.toString().split(\".\")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;\n  if (!r1 && !r2) return num1 + num2;\n  var newNumber1 = num1;\n  var newNumber2 = num2;\n  var diff = Math.abs(r1 - r2);\n  var digit = Math.pow(10, Math.max(r1, r2));\n  if (diff > 0) {\n    var cm = Math.pow(10, diff);\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace(\".\", \"\"));\n      newNumber2 = Number(num2.toString().replace(\".\", \"\")) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace(\".\", \"\")) * cm;\n      newNumber2 = Number(num2.toString().replace(\".\", \"\"));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace(\".\", \"\"));\n    newNumber2 = Number(num2.toString().replace(\".\", \"\"));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\nfunction positiveSubtract(num1, num2) {\n  var _num1$toString$split$2, _num2$toString$split$2;\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  var r1 = ((_num1$toString$split$2 = num1.toString().split(\".\")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;\n  var r2 = ((_num2$toString$split$2 = num2.toString().split(\".\")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;\n  var digit = Math.pow(10, Math.max(r1, r2));\n  var n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\nfunction add(num1, num2) {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\nfunction subtract(num1, num2) {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\nfunction getStepValue(p) {\n  var op = p.op,\n    step = p.step,\n    lastValue = p.lastValue,\n    max = p.max,\n    min = p.min,\n    largeNumber = p.largeNumber;\n  if (Number(step) <= 0) {\n    log.error(\"InputNumber\", \"step must be larger than 0.\");\n    return lastValue;\n  }\n  var tStep = isNumber_1(step) ? String(step) : step;\n  var newVal;\n  if (op === \"add\") {\n    if (largeNumber && isString_1(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === \"reduce\") {\n    if (largeNumber && isString_1(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (isUndefined_1(lastValue)) {\n    newVal = putInRangeNumber(newVal, {\n      max: max,\n      min: min,\n      lastValue: lastValue,\n      largeNumber: largeNumber\n    });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\nfunction getMaxOrMinValidateResult(p) {\n  var largeNumber = p.largeNumber,\n    value = p.value,\n    max = p.max,\n    min = p.min;\n  if (isUndefined_1(value) || isUndefined_1(largeNumber)) return void 0;\n  if (largeNumber && isNumber_1(value)) {\n    log.warn(\"InputNumber\", \"largeNumber value must be a string.\");\n  }\n  var error;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = \"exceed-maximum\";\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = \"below-minimum\";\n  } else {\n    error = void 0;\n  }\n  return error;\n}\nvar specialCode = [\"-\", \".\", \"e\", \"E\", \"+\"];\nfunction canInputNumber(number, largeNumber) {\n  var _number$match, _number$match2;\n  if ([\"\", null, void 0].includes(number)) return true;\n  if (number.slice(0, 2) === \"00\") return false;\n  if (number.match(/\\s/g)) return false;\n  if (((_number$match = number.match(/\\./g)) === null || _number$match === void 0 ? void 0 : _number$match.length) > 1) return false;\n  if (((_number$match2 = number.match(/e/g)) === null || _number$match2 === void 0 ? void 0 : _number$match2.length) > 1) return false;\n  var tmpNumber = number.slice(1);\n  if (/(\\+|-)/.test(tmpNumber) && !/e+/i.test(tmpNumber)) return false;\n  var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));\n  if (!isNumber2 && !specialCode.includes(number.slice(-1))) return false;\n  if (/e/i.test(number) && !/\\de/i.test(number)) return false;\n  return true;\n}\nfunction canSetValue(number, lastNumber) {\n  return parseFloat(number) !== lastNumber && !Number.isNaN(Number(number));\n}\nfunction formatUnCompleteNumber(number) {\n  var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if ([\"\", null, void 0].includes(number) || !/\\d+/.test(number)) return void 0;\n  var decimalPlaces = extra.decimalPlaces,\n    largeNumber = extra.largeNumber,\n    isToFixed = extra.isToFixed;\n  var newNumber = number.replace(/[.|+|\\-|e]$/, \"\");\n  if (largeNumber) {\n    newNumber = formatENumber(newNumber);\n  }\n  if (decimalPlaces !== void 0) {\n    newNumber = largeNumberToFixed(newNumber, decimalPlaces, largeNumber);\n  }\n  if (largeNumber) return newNumber;\n  return isToFixed ? newNumber : parseFloat(newNumber);\n}\nfunction formatThousandths(number) {\n  var thousandthsRegExp = /^[-+]?\\d{1,3}(,\\d{3})*(\\.(\\d*))?$/;\n  if (thousandthsRegExp.test(number)) return number.replace(/,/g, \"\");\n  return number;\n}\nexport { add, canAddNumber, canInputNumber, canReduceNumber, canSetValue, formatThousandths, formatUnCompleteNumber, getMaxOrMinValidateResult, getStepValue, positiveAdd, positiveSubtract, putInRangeNumber, specialCode, subtract };","map":{"version":3,"names":["canAddNumber","num","max","largeNumber","arguments","length","undefined","isString_1","compareNumber","canReduceNumber","min","putInRangeNumber","val","params","lastValue","isInputNumber","Infinity","Math","Number","positiveAdd","num1","num2","_num1$toString$split$","_num2$toString$split$","r1","toString","split","r2","newNumber1","newNumber2","diff","abs","digit","pow","cm","replace","positiveSubtract","_num1$toString$split$2","_num2$toString$split$2","n","toFixed","add","subtract","getStepValue","p","op","step","log","error","tStep","isNumber_1","String","newVal","largeNumberAdd","largeNumberSubtract","isUndefined_1","getMaxOrMinValidateResult","value","warn","specialCode","canInputNumber","number","_number$match","_number$match2","includes","slice","match","tmpNumber","test","isNumber2","isNaN","canSetValue","lastNumber","parseFloat","formatUnCompleteNumber","extra","decimalPlaces","isToFixed","newNumber","formatENumber","largeNumberToFixed","formatThousandths","thousandthsRegExp"],"sources":["../../../../src/_common/js/input-number/number.ts"],"sourcesContent":["import isUndefined from 'lodash/isUndefined';\n/** 普通数相关方法 */\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport {\n  compareNumber,\n  formatENumber,\n  largeNumberToFixed,\n  isInputNumber,\n  largeNumberAdd,\n  largeNumberSubtract,\n} from './large-number';\nimport log from '../log';\nimport type { InputNumberDecimalPlaces } from './large-number';\n\nexport * from './large-number';\n\nexport type NumberType = number | string;\n\n// 小于最大值，才允许继续添加\nexport function canAddNumber(\n  num: NumberType,\n  max: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\n\n// 大于最小值，才允许继续减少\nexport function canReduceNumber(\n  num: NumberType,\n  min: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\n\n/**\n * 将数字控制在 max 和 min 之间\n */\nexport function putInRangeNumber(\n  val: NumberType,\n  params: {\n    max?: NumberType;\n    min?: NumberType;\n    lastValue?: NumberType;\n    largeNumber?: boolean;\n  }\n) {\n  if (val === '') return undefined;\n  const { max, min, lastValue, largeNumber } = params;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\n\n/**\n * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveAdd(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  // 整数不存在精度问题，直接返回\n  if (!r1 && !r2) return num1 + num2;\n  let newNumber1 = num1;\n  let newNumber2 = num2;\n  const diff = Math.abs(r1 - r2);\n  const digit = 10 ** Math.max(r1, r2);\n  if (diff > 0) {\n    const cm = 10 ** diff;\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace('.', ''));\n      newNumber2 = Number(num2.toString().replace('.', '')) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace('.', '')) * cm;\n      newNumber2 = Number(num2.toString().replace('.', ''));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace('.', ''));\n    newNumber2 = Number(num2.toString().replace('.', ''));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\n\n/**\n * 正数，小数减法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveSubtract(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  const digit = 10 ** Math.max(r1, r2);\n  const n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\n\n/**\n * 支持正数、负数、小数等全部数字的加法\n * -0.766 + 1       =>   1 - 0.766\n * -1 + (-0.766)    =>   - (1 + 0.766)\n * 1 + (-0.766)     =>   1 - 0.766\n * 1 + 0.766        =>   1 + 0.766\n */\nexport function add(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\n\n/**\n * 支持正数、负数、小数等全部数字的减法\n * -0.766 - 1       =>   - (1 + 0.766)\n * -1 - (-0.766)    =>   0.766 - 1\n * 1 - (-0.766)     =>   1 + 0.766\n * 1 - 0.766        =>   1 - 0.766\n */\nexport function subtract(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\n\nexport function getStepValue(p: {\n  op: 'add' | 'reduce';\n  step: NumberType;\n  max?: NumberType;\n  min?: NumberType;\n  lastValue?: NumberType;\n  largeNumber?: boolean;\n}) {\n  const { op, step, lastValue, max, min, largeNumber } = p;\n  if (Number(step) <= 0) {\n    log.error('InputNumber', 'step must be larger than 0.');\n    return lastValue;\n  }\n  const tStep = isNumber(step) ? String(step) : step;\n  let newVal;\n  if (op === 'add') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === 'reduce') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (isUndefined(lastValue)) {\n    newVal = putInRangeNumber(newVal, { max, min, lastValue, largeNumber });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\n\nexport type InputNumberErrorType =\n  | 'exceed-maximum'\n  | 'below-minimum'\n  | undefined;\n\n/**\n * 最大值和最小值校验\n */\nexport function getMaxOrMinValidateResult(p: {\n  largeNumber: boolean;\n  value: NumberType;\n  max: NumberType;\n  min: NumberType;\n}): InputNumberErrorType {\n  const { largeNumber, value, max, min } = p;\n  if (isUndefined(value) || isUndefined(largeNumber)) return undefined;\n  if (largeNumber && isNumber(value)) {\n    log.warn('InputNumber', 'largeNumber value must be a string.');\n  }\n  let error: InputNumberErrorType;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = 'exceed-maximum';\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = 'below-minimum';\n  } else {\n    error = undefined;\n  }\n  return error;\n}\n\nexport const specialCode = ['-', '.', 'e', 'E', '+'];\n\n/**\n * 是否允许输入当前字符，输入字符校验\n * 1.23E+08 就表示 1.23 乘 10 的 8 次方\n * 2e3 表示 2 乘 10 的 3 次方\n */\nexport function canInputNumber(number: string, largeNumber: boolean) {\n  if (['', null, undefined].includes(number)) return true;\n  // 数字最前方不允许出现连续的两个 0\n  if (number.slice(0, 2) === '00') return false;\n  // 不能出现空格\n  if (number.match(/\\s/g)) return false;\n  // 只能出现一个点（.）\n  if (number.match(/\\./g)?.length > 1) return false;\n  // 只能出现一个e（e）\n  if (number.match(/e/g)?.length > 1) return false;\n  // 只能出现一个负号（-）或 一个正号（+），并且在第一个位置；但允许 3e+10 这种形式\n  const tmpNumber = number.slice(1);\n  if (/(\\+|-)/.test(tmpNumber) && !/e+/i.test(tmpNumber)) return false;\n  // 允许输入数字字符\n  const isNumber = (largeNumber && isInputNumber(number)) || !Number.isNaN(Number(number));\n  if (!isNumber && !specialCode.includes(number.slice(-1))) return false;\n  if (/e/i.test(number) && !/\\de/i.test(number)) return false;\n  return true;\n}\n\n/**\n * 是否允许设置组件新值，触发 onChange 事件\n */\nexport function canSetValue(number: string, lastNumber: number) {\n  return parseFloat(number) !== lastNumber && !Number.isNaN(Number(number));\n}\n\n/**\n * 1. 格式化未输入完成的数字，如：如：2e/2+/2.等\n * 2. 处理小数点 decimalPlaces\n * 3. 格式化大数字 formatENumber\n */\nexport function formatUnCompleteNumber(\n  number: string,\n  extra: {\n    decimalPlaces?: InputNumberDecimalPlaces;\n    largeNumber?: boolean;\n    isToFixed?: boolean;\n  } = {}\n): number | string {\n  if (['', null, undefined].includes(number) || !/\\d+/.test(number)) return undefined;\n  const { decimalPlaces, largeNumber, isToFixed } = extra;\n  let newNumber = number.replace(/[.|+|\\-|e]$/, '');\n  if (largeNumber) {\n    newNumber = formatENumber(newNumber);\n  }\n  if (decimalPlaces !== undefined) {\n    newNumber = largeNumberToFixed(newNumber, decimalPlaces, largeNumber);\n  }\n  if (largeNumber) return newNumber;\n  return isToFixed ? newNumber : parseFloat(newNumber);\n}\n\n/**\n * 对千分位进行处理 111,111,222 -> 111111222\n */\nexport function formatThousandths(number: string) {\n  const thousandthsRegExp = /^[-+]?\\d{1,3}(,\\d{3})*(\\.(\\d*))?$/;\n  if (thousandthsRegExp.test(number)) return number.replace(/,/g, '');\n  return number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}