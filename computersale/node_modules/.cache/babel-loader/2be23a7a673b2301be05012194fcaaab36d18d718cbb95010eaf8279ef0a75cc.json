{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _defineProperty } from '../../_chunks/dep-fa52aa21.mjs';\nimport { _ as _slicedToArray } from '../../_chunks/dep-5efe53d1.mjs';\nimport { _ as _toConsumableArray } from '../../_chunks/dep-4a990ea3.mjs';\nimport { toRefs, ref, computed, watch } from 'vue';\nimport { g as get_1 } from '../../_chunks/dep-ae202bc0.mjs';\nimport { i as intersection_1 } from '../../_chunks/dep-64c2053b.mjs';\nimport useDefaultValue from '../../hooks/useDefaultValue.mjs';\nimport '../../_chunks/dep-4659d73b.mjs';\nimport '../../_chunks/dep-593f2b67.mjs';\nimport '../../_chunks/dep-eca422c3.mjs';\nimport '../../_chunks/dep-aeaef131.mjs';\nimport '../../_chunks/dep-eae2a67e.mjs';\nimport '../../_chunks/dep-626c497d.mjs';\nimport '../../_chunks/dep-ab4bb9b8.mjs';\nimport '../../_chunks/dep-bf7257e7.mjs';\nimport '../../_chunks/dep-29ef8419.mjs';\nimport '../../_chunks/dep-6ab5363f.mjs';\nimport '../../_chunks/dep-6dc3d0e1.mjs';\nimport '../../_chunks/dep-06dcbf4c.mjs';\nimport '../../_chunks/dep-2b09875b.mjs';\nimport '../../_chunks/dep-cda4f568.mjs';\nimport '../../_chunks/dep-76958824.mjs';\nimport '../../_chunks/dep-e9841b9e.mjs';\nimport '../../_chunks/dep-7932c2e8.mjs';\nimport '../../_chunks/dep-4d4e2af1.mjs';\nimport '../../_chunks/dep-3c4e4325.mjs';\nimport '../../_chunks/dep-f5579c03.mjs';\nimport '../../_chunks/dep-e065dc25.mjs';\nimport '../../_chunks/dep-cc8ebcde.mjs';\nimport '../../_chunks/dep-400ec705.mjs';\nimport '../../_chunks/dep-02f9394e.mjs';\nimport '../../_chunks/dep-b5bf85f5.mjs';\nimport '../../_chunks/dep-bad871d5.mjs';\nimport '../../_chunks/dep-5a17bf21.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar childrenMap = /* @__PURE__ */new Map();\nfunction getChildrenData(treeDataMap, data, keys, r) {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  var result = r || {\n    allChildren: [],\n    allChildrenKeys: [],\n    leafNodeKeys: []\n  };\n  var children = get_1(data, keys.childrenKey);\n  if (!children || !children.length) return result;\n  var selectableChildren = children.filter(function (item) {\n    var _treeDataMap$get;\n    return !((_treeDataMap$get = treeDataMap.get(get_1(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);\n  });\n  result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));\n  for (var i = 0, len = children.length; i < len; i++) {\n    var tItem = children[i];\n    var c = get_1(tItem, keys.childrenKey);\n    if (c !== null && c !== void 0 && c.length) {\n      var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);\n      result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));\n    }\n  }\n  for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {\n    var item = result.allChildren[_i];\n    var children2 = get_1(item, keys.childrenKey);\n    var rowValue = get_1(item, keys.rowKey);\n    result.allChildrenKeys.push(rowValue);\n    if (!children2 || !children2.length) {\n      result.leafNodeKeys.push(rowValue);\n    }\n  }\n  result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));\n  result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));\n  return result;\n}\nfunction removeChildrenKeys(p, r) {\n  var selectedRowKeys = p.selectedRowKeys,\n    removeKeys = p.removeKeys;\n  var result = r || {\n    data: [],\n    keys: []\n  };\n  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {\n    var key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\nfunction getRowDataByKeys(p) {\n  var treeDataMap = p.treeDataMap,\n    selectedRowKeys = p.selectedRowKeys;\n  var result = [];\n  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {\n    var key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\nfunction useTreeSelect(props, treeDataMap) {\n  var _toRefs = toRefs(props),\n    selectedRowKeys = _toRefs.selectedRowKeys,\n    tree = _toRefs.tree,\n    data = _toRefs.data,\n    indeterminateSelectedRowKeys = _toRefs.indeterminateSelectedRowKeys;\n  var tIndeterminateSelectedRowKeys = ref([]);\n  var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, \"selectedRowKeys\"),\n    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),\n    tSelectedRowKeys = _useDefaultValue2[0],\n    setTSelectedRowKeys = _useDefaultValue2[1];\n  var rowDataKeys = computed(function () {\n    var _props$tree;\n    return {\n      rowKey: props.rowKey || \"id\",\n      childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || \"children\"\n    };\n  });\n  watch([tree, treeDataMap, data, tSelectedRowKeys], function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      tree2 = _ref2[0],\n      treeDataMap2 = _ref2[1];\n    if (!tree2 || !treeDataMap2.size || tree2.checkStrictly) return;\n    updateIndeterminateState();\n  });\n  function updateIndeterminateState() {\n    if (!tree.value || tree.value.checkStrictly) return;\n    if (!tSelectedRowKeys.value.length) {\n      tIndeterminateSelectedRowKeys.value = [];\n      return;\n    }\n    var keys = [];\n    var parentMap = {};\n    for (var i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {\n      var rowValue = tSelectedRowKeys.value[i];\n      var state = treeDataMap.value.get(rowValue);\n      if (!state) continue;\n      var children = get_1(state.row, rowDataKeys.value.childrenKey);\n      if (!children || !children.length) {\n        var parentTmp = state.parent;\n        while (parentTmp) {\n          if (!parentMap[parentTmp.id]) {\n            parentMap[parentTmp.id] = [];\n          }\n          parentMap[parentTmp.id].push(state.row);\n          var checkedLength = parentMap[parentTmp.id].length;\n          var _getChildrenData = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),\n            allChildrenKeys = _getChildrenData.allChildrenKeys;\n          var parentTmpIndex = keys.indexOf(parentTmp.id);\n          var selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);\n          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {\n            parentTmpIndex === -1 && keys.push(parentTmp.id);\n          } else {\n            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);\n          }\n          parentTmp = parentTmp.parent;\n        }\n      }\n    }\n    tIndeterminateSelectedRowKeys.value = keys;\n  }\n  function updateParentCheckedState(selectedKeys, currentRowKey, type) {\n    if (!tree.value || tree.value.checkStrictly) return;\n    var keys = _toConsumableArray(selectedKeys);\n    var state = treeDataMap.value.get(currentRowKey);\n    var parentTmp = state.parent;\n    while (parentTmp) {\n      var _getChildrenData2 = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),\n        leafNodeKeys = _getChildrenData2.leafNodeKeys;\n      var checkedChildrenKeys = intersection_1(leafNodeKeys, selectedKeys);\n      var selectedIndex = keys.indexOf(parentTmp.id);\n      if (type === \"uncheck\") {\n        selectedIndex !== -1 && keys.splice(selectedIndex, 1);\n      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {\n        selectedIndex === -1 && keys.push(parentTmp.id);\n      }\n      parentTmp = parentTmp.parent;\n    }\n    return keys;\n  }\n  function onInnerSelectChange(rowKeys, extraData) {\n    if (!tree.value || tree.value.checkStrictly) {\n      setTSelectedRowKeys(rowKeys, extraData);\n      return;\n    }\n    if (extraData.currentRowKey === \"CHECK_ALL_BOX\") {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n  function handleSelectAll(extraData) {\n    var newRowKeys = [];\n    var newRowData = [];\n    if (extraData.type === \"check\") {\n      var arr = _toConsumableArray(treeDataMap.value.values());\n      for (var i = 0, len = arr.length; i < len; i++) {\n        var item = arr[i];\n        if (!item.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));\n        }\n      }\n    }\n    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {\n      selectedRowData: newRowData || []\n    });\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n  function handleSelect(rowKeys, extraData) {\n    var _props$tree2;\n    var newRowKeys = _toConsumableArray(rowKeys);\n    if (((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.checkStrictly) === false) {\n      if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === \"check\") {\n        var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        var allChildrenKeys = result.allChildrenKeys;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));\n      } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === \"uncheck\") {\n        var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        var _result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys\n        });\n        newRowKeys = _result.keys;\n      }\n    }\n    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);\n    var newRowData = getRowDataByKeys({\n      treeDataMap: treeDataMap.value,\n      selectedRowKeys: newRowKeys\n    });\n    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {\n      selectedRowData: newRowData\n    });\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n  return {\n    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value ? indeterminateSelectedRowKeys : tIndeterminateSelectedRowKeys,\n    onInnerSelectChange: onInnerSelectChange\n  };\n}\nexport { childrenMap, useTreeSelect as default, getChildrenData, getRowDataByKeys, removeChildrenKeys };","map":{"version":3,"names":["childrenMap","Map","getChildrenData","treeDataMap","data","keys","r","get","result","allChildren","allChildrenKeys","leafNodeKeys","children","get_1","childrenKey","length","selectableChildren","filter","item","_treeDataMap$get","rowKey","disabled","_toConsumableArray","Set","concat","i","len","tItem","c","nextLevelData","_i","_len","children2","rowValue","push","removeChildrenKeys","p","selectedRowKeys","removeKeys","key","includes","getRowDataByKeys","useTreeSelect","props","_toRefs","toRefs","tree","indeterminateSelectedRowKeys","tIndeterminateSelectedRowKeys","ref","_useDefaultValue","useDefaultValue","defaultSelectedRowKeys","onSelectChange","_useDefaultValue2","_slicedToArray","tSelectedRowKeys","setTSelectedRowKeys","rowDataKeys","computed","_props$tree","watch","_ref","_ref2","tree2","treeDataMap2","size","checkStrictly","updateIndeterminateState","value","parentMap","state","row","parentTmp","parent","id","checkedLength","_getChildrenData","parentTmpIndex","indexOf","selectedIndex","splice","updateParentCheckedState","selectedKeys","currentRowKey","type","_getChildrenData2","checkedChildrenKeys","intersection_1","onInnerSelectChange","rowKeys","extraData","handleSelectAll","handleSelect","newRowKeys","newRowData","arr","values","newExtraData","_objectSpread","selectedRowData","_props$tree2","currentRowData","set","_result"],"sources":["../../../src/table/hooks/useTreeSelect.tsx"],"sourcesContent":["import { computed, toRefs, ref, Ref, watch } from 'vue';\nimport get from 'lodash/get';\nimport intersection from 'lodash/intersection';\nimport { TdEnhancedTableProps, TdPrimaryTableProps, TableRowData, PrimaryTableCol } from '../type';\nimport { KeysType, TableTreeDataMap, TreeDataMapType } from '../../_common/js/table/tree-store';\nimport useDefaultValue from '../../hooks/useDefaultValue';\n\nexport interface GetChildrenDataReturnValue {\n  allChildren: Array<any>;\n  allChildrenKeys: Array<string | number>;\n  leafNodeKeys: Array<string | number>;\n}\n\n// 保存子节点信息，避免重复计算\nexport const childrenMap = new Map();\n\nexport function getChildrenData(\n  treeDataMap: TreeDataMapType,\n  data: TableRowData,\n  keys: { childrenKey: string; rowKey: string },\n  r?: GetChildrenDataReturnValue,\n): GetChildrenDataReturnValue {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  const result = r || { allChildren: [], allChildrenKeys: [], leafNodeKeys: [] };\n  const children = get(data, keys.childrenKey);\n  if (!children || !children.length) return result;\n  const selectableChildren = children.filter(\n    (item: TableRowData) => !treeDataMap.get(get(item, keys.rowKey))?.disabled,\n  );\n  result.allChildren = [...new Set(result.allChildren.concat(selectableChildren))];\n  for (let i = 0, len = children.length; i < len; i++) {\n    const tItem = children[i];\n    const c = get(tItem, keys.childrenKey);\n    if (c?.length) {\n      const nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);\n      result.allChildren = [...new Set(result.allChildren.concat(nextLevelData.allChildren))];\n    }\n  }\n  // 避免使用 forEach，减少上下文消耗\n  for (let i = 0, len = result.allChildren.length; i < len; i++) {\n    const item = result.allChildren[i];\n    const children = get(item, keys.childrenKey);\n    const rowValue = get(item, keys.rowKey);\n    result.allChildrenKeys.push(rowValue);\n    if (!children || !children.length) {\n      result.leafNodeKeys.push(rowValue);\n    }\n  }\n  result.allChildrenKeys = [...new Set(result.allChildrenKeys)];\n  result.leafNodeKeys = [...new Set(result.leafNodeKeys)];\n  return result;\n}\n\nexport interface RemoveParams {\n  // 当前选中的数据\n  selectedRowKeys: Array<string | number>;\n  // 需要移除的数据\n  removeKeys: Array<string | number>;\n}\n\nexport interface RemainData {\n  data: Array<any>;\n  keys: Array<string | number>;\n}\n\nexport function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData {\n  const { selectedRowKeys, removeKeys } = p;\n  const result = r || { data: [], keys: [] };\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\n\nexport interface GetKeyDataParams {\n  treeDataMap: TreeDataMapType;\n  data: Array<any>;\n  column: PrimaryTableCol;\n  keys: KeysType;\n}\n\nexport interface GetRowDataParams {\n  treeDataMap: TreeDataMapType;\n  selectedRowKeys: Array<string | number>;\n}\n\nexport function getRowDataByKeys(p: GetRowDataParams) {\n  const { treeDataMap, selectedRowKeys } = p;\n  const result = [];\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\n\ntype SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;\n\nexport default function useTreeSelect(props: TdEnhancedTableProps, treeDataMap: Ref<TableTreeDataMap>) {\n  const { selectedRowKeys, tree, data, indeterminateSelectedRowKeys } = toRefs(props);\n  // 半选状态的节点：子节点选中至少一个，且没有全部选中\n  const tIndeterminateSelectedRowKeys = ref<(string | number)[]>([]);\n\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useDefaultValue(\n    selectedRowKeys,\n    props.defaultSelectedRowKeys || [],\n    props.onSelectChange,\n    'selectedRowKeys',\n  );\n  const rowDataKeys = computed(() => ({\n    rowKey: props.rowKey || 'id',\n    childrenKey: props.tree?.childrenKey || 'children',\n  }));\n\n  watch([tree, treeDataMap, data, tSelectedRowKeys], ([tree, treeDataMap]) => {\n    if (!tree || !treeDataMap.size || tree.checkStrictly) return;\n    updateIndeterminateState();\n  });\n\n  function updateIndeterminateState() {\n    if (!tree.value || tree.value.checkStrictly) return;\n    if (!tSelectedRowKeys.value.length) {\n      tIndeterminateSelectedRowKeys.value = [];\n      return;\n    }\n    const keys: Array<string | number> = [];\n    const parentMap: { [key: string | number]: any[] } = {};\n    for (let i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {\n      const rowValue = tSelectedRowKeys.value[i];\n      const state = treeDataMap.value.get(rowValue);\n      if (!state) continue;\n      const children = get(state.row, rowDataKeys.value.childrenKey);\n      // 根据选中的叶子结点计算父节点半选状态\n      if (!children || !children.length) {\n        let parentTmp = state.parent;\n        while (parentTmp) {\n          if (!parentMap[parentTmp.id]) {\n            parentMap[parentTmp.id] = [];\n          }\n          parentMap[parentTmp.id].push(state.row);\n          const checkedLength = parentMap[parentTmp.id].length;\n          const { allChildrenKeys } = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value);\n          const parentTmpIndex = keys.indexOf(parentTmp.id);\n          const selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);\n          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {\n            parentTmpIndex === -1 && keys.push(parentTmp.id);\n          } else {\n            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);\n          }\n          parentTmp = parentTmp.parent;\n        }\n      }\n    }\n    tIndeterminateSelectedRowKeys.value = keys;\n  }\n\n  function updateParentCheckedState(\n    selectedKeys: (string | number)[],\n    currentRowKey: string | number,\n    type: 'check' | 'uncheck',\n  ) {\n    if (!tree.value || tree.value.checkStrictly) return;\n    const keys = [...selectedKeys];\n    const state = treeDataMap.value.get(currentRowKey);\n    let parentTmp = state.parent;\n    while (parentTmp) {\n      const { leafNodeKeys } = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value);\n      const checkedChildrenKeys = intersection(leafNodeKeys, selectedKeys);\n      const selectedIndex = keys.indexOf(parentTmp.id);\n      if (type === 'uncheck') {\n        selectedIndex !== -1 && keys.splice(selectedIndex, 1);\n      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {\n        selectedIndex === -1 && keys.push(parentTmp.id);\n      }\n      parentTmp = parentTmp.parent;\n    }\n    return keys;\n  }\n\n  function onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    if (!tree.value || tree.value.checkStrictly) {\n      setTSelectedRowKeys(rowKeys, extraData);\n      return;\n    }\n    if (extraData.currentRowKey === 'CHECK_ALL_BOX') {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n\n  function handleSelectAll(extraData: SelectChangeParams[1]) {\n    const newRowKeys: Array<string | number> = [];\n    const newRowData: TableRowData[] = [];\n    if (extraData.type === 'check') {\n      const arr = [...treeDataMap.value.values()];\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const item = arr[i];\n        if (!item.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get(item.row, rowDataKeys.value.rowKey));\n        }\n      }\n    }\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData || [],\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  function handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    let newRowKeys = [...rowKeys];\n    if (props.tree?.checkStrictly === false) {\n      if (extraData?.type === 'check') {\n        const result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        const { allChildrenKeys } = result;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = [...new Set(newRowKeys.concat(allChildrenKeys))];\n      } else if (extraData?.type === 'uncheck') {\n        const children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        const result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys,\n        });\n        newRowKeys = result.keys;\n      }\n    }\n    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);\n    const newRowData = getRowDataByKeys({ treeDataMap: treeDataMap.value, selectedRowKeys: newRowKeys });\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData,\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  return {\n    // 如果存在受控属性 indeterminateSelectedRowKeys 则优先使用；否则使用内部状态：tIndeterminateSelectedRowKeys\n    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value\n      ? indeterminateSelectedRowKeys\n      : tIndeterminateSelectedRowKeys,\n    onInnerSelectChange,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}