{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _toConsumableArray } from '../../_chunks/dep-4a990ea3.mjs';\nimport { ref } from 'vue';\nimport '../../_chunks/dep-593f2b67.mjs';\nfunction useDragSort(currentValue, curPageData, handleDataChange) {\n  var draggingIndex = ref(null);\n  var dragoverIndex = ref(null);\n  var dragoverPos = ref(null);\n  var onDragStart = function onDragStart(e) {\n    var index = Number(e.target.dataset.index);\n    draggingIndex.value = index;\n  };\n  var onDragOver = function onDragOver(e) {\n    e.preventDefault();\n    if (e.currentTarget) {\n      var currentElement = e.currentTarget;\n      var index = Number(currentElement.dataset.index);\n      var elemHeight = currentElement.offsetHeight;\n      var dragY = e.clientY - currentElement.getBoundingClientRect().top;\n      var insertAreaPercent = 0.3;\n      var insertAreaHeight = elemHeight * insertAreaPercent;\n      dragoverIndex.value = index;\n      if (dragoverIndex.value === draggingIndex.value) {\n        dragoverPos.value = \"\";\n        return;\n      }\n      if (dragY < insertAreaHeight) {\n        dragoverPos.value = \"top\";\n      } else if (dragY > elemHeight - insertAreaHeight) {\n        dragoverPos.value = \"bottom\";\n      } else {\n        dragoverPos.value = \"center\";\n      }\n    }\n  };\n  var onDragLeave = function onDragLeave() {\n    dragoverPos.value = \"\";\n    dragoverIndex.value = null;\n  };\n  var onDragEnd = function onDragEnd() {\n    draggingIndex.value = null;\n    dragoverIndex.value = null;\n    dragoverPos.value = \"\";\n  };\n  var onDrop = function onDrop(e) {\n    e.preventDefault();\n    var currentDraggingIndex = draggingIndex.value;\n    var currentDragoverIndex = dragoverIndex.value;\n    draggingIndex.value = null;\n    dragoverIndex.value = null;\n    dragoverPos.value = \"\";\n    if (currentDraggingIndex === currentDragoverIndex) {\n      return;\n    }\n    var newData = _toConsumableArray(currentValue.value);\n    var sourceItem = curPageData.value[currentDraggingIndex].value;\n    var targetItem = curPageData.value[currentDragoverIndex].value;\n    var sourceIndex = newData.indexOf(sourceItem);\n    var targetIndex = newData.indexOf(targetItem);\n    newData.splice(sourceIndex, 1);\n    if (dragoverPos.value === \"bottom\") {\n      targetIndex += 1;\n    }\n    newData.splice(targetIndex, 0, sourceItem);\n    handleDataChange === null || handleDataChange === void 0 || handleDataChange(newData, [sourceItem, targetItem]);\n  };\n  return {\n    onDragStart: onDragStart,\n    onDragEnd: onDragEnd,\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    onDragLeave: onDragLeave\n  };\n}\nexport { useDragSort as default };","map":{"version":3,"names":["useDragSort","currentValue","curPageData","handleDataChange","draggingIndex","ref","dragoverIndex","dragoverPos","onDragStart","e","index","Number","target","dataset","value","onDragOver","preventDefault","currentTarget","currentElement","elemHeight","offsetHeight","dragY","clientY","getBoundingClientRect","top","insertAreaPercent","insertAreaHeight","onDragLeave","onDragEnd","onDrop","currentDraggingIndex","currentDragoverIndex","newData","_toConsumableArray","sourceItem","targetItem","sourceIndex","indexOf","targetIndex","splice"],"sources":["../../../src/transfer/hooks/useDragSort.ts"],"sourcesContent":["import { ref, ComputedRef, Ref } from 'vue';\nimport type { TransferValue } from '../type';\nimport type { TransferItemOption } from '../interface';\nexport default function useDragSort(\n  currentValue: Ref<Array<TransferValue>>,\n  curPageData: ComputedRef<TransferItemOption[]>,\n  handleDataChange: (data: Array<TransferValue>, movedValue: Array<TransferValue>) => void,\n) {\n  const draggingIndex = ref(null);\n  const dragoverIndex = ref(null);\n  const dragoverPos = ref(null);\n\n  const onDragStart = (e: DragEvent) => {\n    const index = Number((e.target as HTMLElement).dataset.index);\n    draggingIndex.value = index;\n  };\n\n  const onDragOver = (e: DragEvent) => {\n    e.preventDefault();\n    if (e.currentTarget) {\n      const currentElement = e.currentTarget as HTMLElement;\n      const index = Number(currentElement.dataset.index);\n      const elemHeight = currentElement.offsetHeight;\n      const dragY = e.clientY - currentElement.getBoundingClientRect().top;\n      const insertAreaPercent = 0.3;\n      const insertAreaHeight = elemHeight * insertAreaPercent;\n\n      dragoverIndex.value = index;\n\n      if (dragoverIndex.value === draggingIndex.value) {\n        dragoverPos.value = '';\n        return;\n      }\n      if (dragY < insertAreaHeight) {\n        dragoverPos.value = 'top';\n      } else if (dragY > elemHeight - insertAreaHeight) {\n        dragoverPos.value = 'bottom';\n      } else {\n        dragoverPos.value = 'center';\n      }\n    }\n  };\n\n  const onDragLeave = () => {\n    dragoverPos.value = '';\n    dragoverIndex.value = null;\n  };\n\n  const onDragEnd = () => {\n    draggingIndex.value = null;\n    dragoverIndex.value = null;\n    dragoverPos.value = '';\n  };\n\n  const onDrop = (e: DragEvent) => {\n    e.preventDefault();\n    const currentDraggingIndex = draggingIndex.value;\n    const currentDragoverIndex = dragoverIndex.value;\n\n    draggingIndex.value = null;\n    dragoverIndex.value = null;\n    dragoverPos.value = '';\n    if (currentDraggingIndex === currentDragoverIndex) {\n      return;\n    }\n\n    const newData = [...currentValue.value];\n\n    const sourceItem = curPageData.value[currentDraggingIndex].value;\n    const targetItem = curPageData.value[currentDragoverIndex].value;\n    const sourceIndex = newData.indexOf(sourceItem);\n    let targetIndex = newData.indexOf(targetItem);\n\n    newData.splice(sourceIndex, 1);\n\n    if (dragoverPos.value === 'bottom') {\n      targetIndex += 1;\n    }\n    newData.splice(targetIndex, 0, sourceItem);\n    handleDataChange?.(newData, [sourceItem, targetItem]);\n  };\n\n  return {\n    onDragStart,\n    onDragEnd,\n    onDrop,\n    onDragOver,\n    onDragLeave,\n  };\n}\n"],"mappings":";;;;;;;;;AAGwB,SAAAA,YACtBC,YACA,EAAAC,WAAA,EACAC,gBACA;EACM,IAAAC,aAAA,GAAgBC,GAAA,CAAI,IAAI;EACxB,IAAAC,aAAA,GAAgBD,GAAA,CAAI,IAAI;EACxB,IAAAE,WAAA,GAAcF,GAAA,CAAI,IAAI;EAEtB,IAAAG,WAAA,GAAc,SAAdA,YAAeC,CAAiB;IACpC,IAAMC,KAAQ,GAAAC,MAAA,CAAQF,CAAE,CAAAG,MAAA,CAAuBC,OAAA,CAAQH,KAAK;IAC5DN,aAAA,CAAcU,KAAQ,GAAAJ,KAAA;GACxB;EAEM,IAAAK,UAAA,GAAa,SAAbA,WAAcN,CAAiB;IACnCA,CAAA,CAAEO,cAAe;IACjB,IAAIP,CAAA,CAAEQ,aAAe;MACnB,IAAMC,cAAA,GAAiBT,CAAE,CAAAQ,aAAA;MACzB,IAAMP,KAAQ,GAAAC,MAAA,CAAOO,cAAe,CAAAL,OAAA,CAAQH,KAAK;MACjD,IAAMS,UAAA,GAAaD,cAAe,CAAAE,YAAA;MAClC,IAAMC,KAAQ,GAAAZ,CAAA,CAAEa,OAAU,GAAAJ,cAAA,CAAeK,qBAAA,EAAwB,CAAAC,GAAA;MACjE,IAAMC,iBAAoB;MAC1B,IAAMC,gBAAA,GAAmBP,UAAa,GAAAM,iBAAA;MAEtCnB,aAAA,CAAcQ,KAAQ,GAAAJ,KAAA;MAElB,IAAAJ,aAAA,CAAcQ,KAAU,KAAAV,aAAA,CAAcU,KAAO;QAC/CP,WAAA,CAAYO,KAAQ;QACpB;MACF;MACA,IAAIO,KAAA,GAAQK,gBAAkB;QAC5BnB,WAAA,CAAYO,KAAQ;MACtB,WAAWO,KAAQ,GAAAF,UAAA,GAAaO,gBAAkB;QAChDnB,WAAA,CAAYO,KAAQ;MACtB,CAAO;QACLP,WAAA,CAAYO,KAAQ;MACtB;IACF;GACF;EAEA,IAAMa,WAAA,GAAc,SAAdA,YAAA,EAAoB;IACxBpB,WAAA,CAAYO,KAAQ;IACpBR,aAAA,CAAcQ,KAAQ;GACxB;EAEA,IAAMc,SAAA,GAAY,SAAZA,UAAA,EAAkB;IACtBxB,aAAA,CAAcU,KAAQ;IACtBR,aAAA,CAAcQ,KAAQ;IACtBP,WAAA,CAAYO,KAAQ;GACtB;EAEM,IAAAe,MAAA,GAAS,SAATA,OAAUpB,CAAiB;IAC/BA,CAAA,CAAEO,cAAe;IACjB,IAAMc,oBAAA,GAAuB1B,aAAc,CAAAU,KAAA;IAC3C,IAAMiB,oBAAA,GAAuBzB,aAAc,CAAAQ,KAAA;IAE3CV,aAAA,CAAcU,KAAQ;IACtBR,aAAA,CAAcQ,KAAQ;IACtBP,WAAA,CAAYO,KAAQ;IACpB,IAAIgB,oBAAA,KAAyBC,oBAAsB;MACjD;IACF;IAEA,IAAMC,OAAU,GAAAC,kBAAA,CAAIhC,YAAA,CAAaa,KAAK;IAEhC,IAAAoB,UAAA,GAAahC,WAAY,CAAAY,KAAA,CAAMgB,oBAAsB,EAAAhB,KAAA;IACrD,IAAAqB,UAAA,GAAajC,WAAY,CAAAY,KAAA,CAAMiB,oBAAsB,EAAAjB,KAAA;IACrD,IAAAsB,WAAA,GAAcJ,OAAQ,CAAAK,OAAA,CAAQH,UAAU;IAC1C,IAAAI,WAAA,GAAcN,OAAQ,CAAAK,OAAA,CAAQF,UAAU;IAEpCH,OAAA,CAAAO,MAAA,CAAOH,WAAA,EAAa,CAAC;IAEzB,IAAA7B,WAAA,CAAYO,KAAA,KAAU,QAAU;MACnBwB,WAAA;IACjB;IACQN,OAAA,CAAAO,MAAA,CAAOD,WAAa,KAAGJ,UAAU;IACzC/B,gBAAA,aAAAA,gBAAA,eAAAA,gBAAA,CAAmB6B,OAAS,GAACE,UAAY,EAAAC,UAAU,CAAC;GACtD;EAEO;IACL3B,WAAA,EAAAA,WAAA;IACAoB,SAAA,EAAAA,SAAA;IACAC,MAAA,EAAAA,MAAA;IACAd,UAAA,EAAAA,UAAA;IACAY,WAAA,EAAAA;GACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}