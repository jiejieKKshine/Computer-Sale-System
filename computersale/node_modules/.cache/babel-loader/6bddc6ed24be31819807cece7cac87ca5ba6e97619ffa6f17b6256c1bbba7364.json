{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport './dep-eca422c3.mjs';\nimport { _ as _SetCache, a as _cacheHas } from './dep-4d4e2af1.mjs';\nimport { _ as _arrayIncludes, a as _arrayIncludesWith } from './dep-3c4e4325.mjs';\nimport { _ as _arrayMap } from './dep-7932c2e8.mjs';\nimport { _ as _baseUnary } from './dep-f5579c03.mjs';\nvar SetCache = _SetCache,\n  arrayIncludes = _arrayIncludes,\n  arrayIncludesWith = _arrayIncludesWith,\n  arrayMap = _arrayMap,\n  baseUnary = _baseUnary,\n  cacheHas = _cacheHas;\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n    includes = arrayIncludes,\n    isCommon = true,\n    length = array.length,\n    result = [],\n    valuesLength = values.length;\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  } else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer: while (++index < length) {\n    var value = array[index],\n      computed = iteratee == null ? value : iteratee(value);\n    value = comparator || value !== 0 ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    } else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\nvar _baseDifference = baseDifference;\nexport { _baseDifference as _ };","map":{"version":3,"names":["SetCache","_SetCache","arrayIncludes","_arrayIncludes","arrayIncludesWith","_arrayIncludesWith","arrayMap","_arrayMap","baseUnary","_baseUnary","cacheHas","_cacheHas","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push","_baseDifference"],"sources":["../../node_modules/lodash/_baseDifference.js"],"sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,QAAQ,GAAGC,SAAsB;EACjCC,aAAa,GAAGC,cAA2B;EAC3CC,iBAAiB,GAAGC,kBAA+B;EACnDC,QAAQ,GAAGC,SAAsB;EACjCC,SAAS,GAAGC,UAAuB;EACnCC,QAAQ,GAAGC,SAAsB;;AAErC;AACA,IAAIC,gBAAgB,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC3D,IAAIC,KAAK,GAAG,CAAC,CAAC;IACVC,QAAQ,GAAGjB,aAAa;IACxBkB,QAAQ,GAAG,IAAI;IACfC,MAAM,GAAGP,KAAK,CAACO,MAAM;IACrBC,MAAM,GAAG,EAAE;IACXC,YAAY,GAAGR,MAAM,CAACM,MAAM;EAEhC,IAAI,CAACA,MAAM,EAAE;IACX,OAAOC,MAAM;EACd;EACD,IAAIN,QAAQ,EAAE;IACZD,MAAM,GAAGT,QAAQ,CAACS,MAAM,EAAEP,SAAS,CAACQ,QAAQ,CAAC,CAAC;EAC/C;EACD,IAAIC,UAAU,EAAE;IACdE,QAAQ,GAAGf,iBAAiB;IAC5BgB,QAAQ,GAAG,KAAK;EACjB,OACI,IAAIL,MAAM,CAACM,MAAM,IAAIT,gBAAgB,EAAE;IAC1CO,QAAQ,GAAGT,QAAQ;IACnBU,QAAQ,GAAG,KAAK;IAChBL,MAAM,GAAG,IAAIf,QAAQ,CAACe,MAAM,CAAC;EAC9B;EACDS,KAAK,EACL,OAAO,EAAEN,KAAK,GAAGG,MAAM,EAAE;IACvB,IAAII,KAAK,GAAGX,KAAK,CAACI,KAAK,CAAC;MACpBQ,QAAQ,GAAGV,QAAQ,IAAI,IAAI,GAAGS,KAAK,GAAGT,QAAQ,CAACS,KAAK,CAAC;IAEzDA,KAAK,GAAIR,UAAU,IAAIQ,KAAK,KAAK,CAAC,GAAIA,KAAK,GAAG,CAAC;IAC/C,IAAIL,QAAQ,IAAIM,QAAQ,KAAKA,QAAQ,EAAE;MACrC,IAAIC,WAAW,GAAGJ,YAAY;MAC9B,OAAOI,WAAW,EAAE,EAAE;QACpB,IAAIZ,MAAM,CAACY,WAAW,CAAC,KAAKD,QAAQ,EAAE;UACpC,SAASF,KAAK;QACf;MACF;MACDF,MAAM,CAACM,IAAI,CAACH,KAAK,CAAC;KACnB,MACI,IAAI,CAACN,QAAQ,CAACJ,MAAM,EAAEW,QAAQ,EAAET,UAAU,CAAC,EAAE;MAChDK,MAAM,CAACM,IAAI,CAACH,KAAK,CAAC;IACnB;EACF;EACD,OAAOH,MAAM;AACf;AAEA,IAAAO,eAAc,GAAGhB,cAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}