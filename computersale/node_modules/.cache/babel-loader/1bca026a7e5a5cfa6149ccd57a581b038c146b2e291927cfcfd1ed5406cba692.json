{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _toArray } from '../../../_chunks/dep-b874078b.mjs';\nimport { _ as _slicedToArray } from '../../../_chunks/dep-5efe53d1.mjs';\nimport { _ as _defineProperty } from '../../../_chunks/dep-fa52aa21.mjs';\nimport { i as isFunction_1 } from '../../../_chunks/dep-06dcbf4c.mjs';\nimport { i as isNumber_1 } from '../../../_chunks/dep-889e457b.mjs';\nimport { isOverSizeLimit, getCurrentDate } from './utils.mjs';\nimport xhr from './xhr.mjs';\nimport log from '../log/log.mjs';\nimport '../../../_chunks/dep-4a990ea3.mjs';\nimport '../../../_chunks/dep-593f2b67.mjs';\nimport '../../../_chunks/dep-4659d73b.mjs';\nimport '../../../_chunks/dep-eca422c3.mjs';\nimport '../../../_chunks/dep-bf7257e7.mjs';\nimport '../../../_chunks/dep-2b09875b.mjs';\nimport '../../../_chunks/dep-cda4f568.mjs';\nimport '../../../_chunks/dep-29ef8419.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction handleBeforeUpload(file, params) {\n  var sizeLimit = params.sizeLimit,\n    beforeUpload = params.beforeUpload;\n  var sizePromise = new Promise(function (resolve) {\n    var result = null;\n    if (sizeLimit) {\n      var sizeLimitObj = isNumber_1(sizeLimit) ? {\n        size: sizeLimit,\n        unit: \"KB\"\n      } : sizeLimit;\n      var limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);\n      if (limit) {\n        result = sizeLimitObj;\n      }\n    }\n    resolve(result);\n  });\n  var promiseList = [sizePromise, void 0];\n  if (isFunction_1(beforeUpload)) {\n    var r = beforeUpload(file);\n    var p = r instanceof Promise ? r : new Promise(function (resolve) {\n      return resolve(r);\n    });\n    promiseList[1] = p;\n  }\n  return new Promise(function (resolve) {\n    Promise.all(promiseList).then(function (r) {\n      resolve(r);\n    });\n  });\n}\nfunction handleError(options) {\n  var event = options.event,\n    files = options.files,\n    response = options.response,\n    XMLHttpRequest = options.XMLHttpRequest,\n    formatResponse = options.formatResponse;\n  var res = response;\n  if (isFunction_1(formatResponse)) {\n    res = formatResponse(response, {\n      file: files[0],\n      currentFiles: files\n    });\n  }\n  files.forEach(function (file) {\n    file.status = \"fail\";\n    file.response = res;\n  });\n  return {\n    response: res,\n    event: event,\n    files: files,\n    XMLHttpRequest: XMLHttpRequest\n  };\n}\nfunction handleSuccess(params) {\n  var event = params.event,\n    files = params.files,\n    response = params.response,\n    XMLHttpRequest = params.XMLHttpRequest;\n  if ((files === null || files === void 0 ? void 0 : files.length) <= 0) {\n    log.error(\"Upload\", \"Empty File in Success Callback\");\n  }\n  files.forEach(function (file) {\n    var _file$response;\n    file.percent = 100;\n    file.status = \"success\";\n    (_file$response = file.response) === null || _file$response === void 0 || delete _file$response.error;\n  });\n  var res = response;\n  files[0].url = res.url || files[0].url;\n  return {\n    response: res,\n    event: event,\n    files: files,\n    XMLHttpRequest: XMLHttpRequest\n  };\n}\nfunction handleRequestMethodResponse(res) {\n  if (!res) {\n    log.error(\"Upload\", \"`requestMethodResponse` is required.\");\n    return false;\n  }\n  if (!res.status) {\n    log.error(\"Upload\", \"`requestMethodResponse.status` is missing, which value only can be `success` or `fail`\");\n    return false;\n  }\n  if (![\"success\", \"fail\"].includes(res.status)) {\n    log.error(\"Upload\", \"`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: 'success', response: { url: '' } }`\");\n    return false;\n  }\n  if (res.status === \"success\" && (!res.response || !res.response.url && !res.response.files)) {\n    log.warn(\"Upload\", \"`requestMethodResponse.response.url` or `requestMethodResponse.response.files` is required if `status` is `success`\");\n  }\n  return true;\n}\nfunction uploadOneRequest(params) {\n  var action = params.action,\n    toUploadFiles = params.toUploadFiles,\n    requestMethod = params.requestMethod;\n  return new Promise(function (resolve) {\n    if (!action && !requestMethod) {\n      log.error(\"Upload\", \"one of action and requestMethod must be exist.\");\n      resolve({});\n      return;\n    }\n    if (!toUploadFiles || !toUploadFiles.length) {\n      log.warn(\"Upload\", \"No files need to be uploaded\");\n      resolve({});\n      return;\n    }\n    toUploadFiles.forEach(function (file) {\n      file.status = \"progress\";\n    });\n    if (requestMethod) {\n      requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then(function (res) {\n        if (!handleRequestMethodResponse(res)) {\n          resolve({});\n          return;\n        }\n        var response = res.response || {};\n        if (isFunction_1(params.formatResponse)) {\n          response = params.formatResponse(response, {\n            file: toUploadFiles[0],\n            currentFiles: toUploadFiles\n          });\n        }\n        if (res.status === \"fail\") {\n          response.error = res.error || response.error;\n        }\n        var resultFiles = [];\n        if (res.status === \"success\" && response.files) {\n          resultFiles = response.files.map(function (file) {\n            var fileInfo = toUploadFiles.find(function (toFile) {\n              return file.name && toFile.name === file.name || file.raw && toFile.raw === file.raw;\n            });\n            return _objectSpread(_objectSpread(_objectSpread({}, fileInfo), file), {}, {\n              status: res.status,\n              response: response\n            });\n          });\n        } else {\n          toUploadFiles.forEach(function (file) {\n            var _response;\n            file.status = res.status;\n            file.response = response;\n            file.url = response.url;\n            file.percent = res.status === \"success\" ? 100 : 0;\n            file.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();\n          });\n          resultFiles = toUploadFiles;\n        }\n        var result = {\n          response: response,\n          file: resultFiles[0],\n          files: resultFiles\n        };\n        if (res.status === \"success\") {\n          var _params$onResponseSuc;\n          (_params$onResponseSuc = params.onResponseSuccess) === null || _params$onResponseSuc === void 0 || _params$onResponseSuc.call(params, result);\n        } else if (res.status === \"fail\") {\n          var _params$onResponseErr;\n          (_params$onResponseErr = params.onResponseError) === null || _params$onResponseErr === void 0 || _params$onResponseErr.call(params, result);\n        }\n        resolve({\n          status: res.status,\n          data: result\n        });\n      });\n    } else {\n      var _params$setXhrObject;\n      var xhrReq = xhr({\n        action: params.action,\n        files: params.toUploadFiles,\n        useMockProgress: params.useMockProgress,\n        mockProgressDuration: params.mockProgressDuration,\n        onError: function onError(p) {\n          var _params$onResponseErr2;\n          var r = handleError(_objectSpread(_objectSpread({}, p), {}, {\n            formatResponse: params.formatResponse\n          }));\n          (_params$onResponseErr2 = params.onResponseError) === null || _params$onResponseErr2 === void 0 || _params$onResponseErr2.call(params, r);\n          resolve({\n            status: \"fail\",\n            data: r\n          });\n        },\n        onProgress: params.onResponseProgress,\n        onSuccess: function onSuccess(p) {\n          var formatResponse = params.formatResponse;\n          var res = p.response;\n          if (isFunction_1(formatResponse)) {\n            res = formatResponse(p.response, {\n              file: p.file,\n              currentFiles: p.files\n            });\n          }\n          if (res.error) {\n            var _params$onResponseErr3;\n            var r = handleError(_objectSpread(_objectSpread({}, p), {}, {\n              response: res\n            }));\n            (_params$onResponseErr3 = params.onResponseError) === null || _params$onResponseErr3 === void 0 || _params$onResponseErr3.call(params, r);\n            resolve({\n              status: \"fail\",\n              data: r\n            });\n          } else {\n            var _params$onResponseSuc2;\n            p.file.response = res;\n            p.files[0].response = res;\n            var _r = handleSuccess(_objectSpread(_objectSpread({}, p), {}, {\n              response: res\n            }));\n            (_params$onResponseSuc2 = params.onResponseSuccess) === null || _params$onResponseSuc2 === void 0 || _params$onResponseSuc2.call(params, _r);\n            resolve({\n              status: \"success\",\n              data: _r\n            });\n          }\n        },\n        formatRequest: params.formatRequest,\n        data: params.data,\n        name: params.name,\n        headers: params.headers,\n        withCredentials: params.withCredentials,\n        method: params.method\n      });\n      (_params$setXhrObject = params.setXhrObject) === null || _params$setXhrObject === void 0 || _params$setXhrObject.call(params, {\n        files: params.toUploadFiles,\n        xhrReq: xhrReq\n      });\n    }\n  });\n}\nfunction updateUploadedFiles(uploadFiles, resultFiles) {\n  var existFiles = uploadFiles.filter(function (t) {\n    return t.url;\n  });\n  var newFiles = existFiles;\n  var _loop = function _loop() {\n    var file = resultFiles[i];\n    var index = uploadFiles.findIndex(function (item) {\n      return item.raw && item.raw === file.raw || item.name && item.name === file.name;\n    });\n    var tmpFile = index >= 0 ? _objectSpread(_objectSpread({}, uploadFiles[index]), file) : file;\n    newFiles.push(tmpFile);\n  };\n  for (var i = 0, len = resultFiles.length; i < len; i++) {\n    _loop();\n  }\n  return newFiles;\n}\nfunction upload(params) {\n  var uploadAllFilesInOneRequest = params.uploadAllFilesInOneRequest,\n    toUploadFiles = params.toUploadFiles,\n    uploadedFiles = params.uploadedFiles,\n    isBatchUpload = params.isBatchUpload;\n  var thisUploadFiles = toUploadFiles.filter(function (t) {\n    return !t.response || t.response && !t.response.error;\n  });\n  return new Promise(function (resolve) {\n    if (uploadAllFilesInOneRequest || !params.multiple) {\n      uploadOneRequest(params).then(function (r) {\n        if (r.status === \"success\") {\n          r.data.files = isBatchUpload || !params.multiple ? r.data.files : updateUploadedFiles(uploadedFiles, r.data.files);\n        }\n        var failedFiles = r.status === \"fail\" ? r.data.files : [];\n        resolve(_objectSpread(_objectSpread({}, r), {}, {\n          failedFiles: failedFiles\n        }));\n      });\n      return;\n    }\n    var list = thisUploadFiles.map(function (file) {\n      return uploadOneRequest(_objectSpread(_objectSpread({}, params), {}, {\n        toUploadFiles: [file]\n      }));\n    });\n    Promise.all(list).then(function (arr) {\n      var files = [];\n      var failedFiles = [];\n      arr.forEach(function (one) {\n        if (one.status === \"success\") {\n          files.push(one.data.files[0]);\n        } else if (one.status === \"fail\") {\n          failedFiles.push(one.data.files[0]);\n        }\n      });\n      var tFiles = params.autoUpload ? uploadedFiles.concat(files) : uploadedFiles;\n      var newFiles = isBatchUpload || !params.multiple ? files : tFiles;\n      resolve({\n        status: files.length ? \"success\" : \"fail\",\n        data: {\n          files: newFiles\n        },\n        failedFiles: failedFiles,\n        list: arr\n      });\n    });\n  });\n}\nfunction formatToUploadFile(files, format) {\n  var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;\n  var percent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return files.map(function (fileRaw) {\n    var file = fileRaw;\n    if (isFunction_1(format)) {\n      file = format(fileRaw);\n    }\n    var uploadFile = _objectSpread({\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent: percent,\n      status: status\n    }, file);\n    return uploadFile;\n  });\n}\nfunction validateFile(params) {\n  var files = params.files,\n    uploadValue = params.uploadValue,\n    max = params.max,\n    allowUploadDuplicateFile = params.allowUploadDuplicateFile;\n  return new Promise(function (resolve) {\n    var tmpFiles = files.filter(function (file) {\n      var sameNameFile = uploadValue.find(function (t) {\n        return t.name === file.name;\n      });\n      return allowUploadDuplicateFile || !sameNameFile;\n    });\n    var hasSameNameFile = false;\n    if (tmpFiles.length < files.length) {\n      hasSameNameFile = true;\n    }\n    if (!tmpFiles.length) {\n      var tFiles = formatToUploadFile(files, params.format, params.autoUpload ? \"progress\" : \"waiting\");\n      resolve({\n        hasSameNameFile: hasSameNameFile,\n        file: tFiles === null || tFiles === void 0 ? void 0 : tFiles[0],\n        files: tFiles,\n        validateResult: {\n          type: \"FILTER_FILE_SAME_NAME\"\n        }\n      });\n      return;\n    }\n    var lengthOverLimit = false;\n    if (max && tmpFiles.length && !params.isBatchUpload) {\n      var tmpFilesLenToBeAdded = tmpFiles.length;\n      tmpFiles = tmpFiles.slice(0, max - uploadValue.length);\n      if (tmpFilesLenToBeAdded + uploadValue.length > max) {\n        lengthOverLimit = true;\n      }\n    }\n    var formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload ? \"progress\" : \"waiting\");\n    var allFileValidatePromise;\n    if (params.beforeAllFilesUpload) {\n      var _params$beforeAllFile;\n      var r = (_params$beforeAllFile = params.beforeAllFilesUpload) === null || _params$beforeAllFile === void 0 ? void 0 : _params$beforeAllFile.call(params, formattedFiles);\n      allFileValidatePromise = r instanceof Promise ? r : new Promise(function (resolve2) {\n        return resolve2(r);\n      });\n    }\n    var promiseList = formattedFiles.map(function (file) {\n      return new Promise(function (resolve2) {\n        handleBeforeUpload(file, {\n          beforeUpload: params.beforeUpload,\n          sizeLimit: params.sizeLimit\n        }).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            sizeResult = _ref2[0],\n            customResult = _ref2[1];\n          if (sizeResult) {\n            resolve2({\n              file: file,\n              validateResult: {\n                type: \"FILE_OVER_SIZE_LIMIT\",\n                extra: sizeResult\n              }\n            });\n          } else if (customResult === false) {\n            resolve2({\n              file: file,\n              validateResult: {\n                type: \"CUSTOM_BEFORE_UPLOAD\"\n              }\n            });\n          }\n          resolve2({\n            file: file\n          });\n        });\n      });\n    });\n    Promise.all([allFileValidatePromise].concat(promiseList)).then(function (results) {\n      var _results = _toArray(results),\n        allFilesResult = _results[0],\n        others = _results.slice(1);\n      if (allFilesResult === false) {\n        resolve({\n          lengthOverLimit: lengthOverLimit,\n          hasSameNameFile: hasSameNameFile,\n          validateResult: {\n            type: \"BEFORE_ALL_FILES_UPLOAD\"\n          },\n          files: formattedFiles\n        });\n      } else {\n        resolve({\n          lengthOverLimit: lengthOverLimit,\n          hasSameNameFile: hasSameNameFile,\n          fileValidateList: others,\n          files: formattedFiles\n        });\n      }\n    });\n  });\n}\nfunction getFilesAndErrors(fileValidateList, getError) {\n  var sizeLimitErrors = [];\n  var beforeUploadErrorFiles = [];\n  var toFiles = [];\n  fileValidateList.forEach(function (oneFile) {\n    var _oneFile$validateResu, _oneFile$validateResu2;\n    if (((_oneFile$validateResu = oneFile.validateResult) === null || _oneFile$validateResu === void 0 ? void 0 : _oneFile$validateResu.type) === \"CUSTOM_BEFORE_UPLOAD\") {\n      beforeUploadErrorFiles.push(oneFile.file);\n      return;\n    }\n    if (((_oneFile$validateResu2 = oneFile.validateResult) === null || _oneFile$validateResu2 === void 0 ? void 0 : _oneFile$validateResu2.type) === \"FILE_OVER_SIZE_LIMIT\") {\n      if (!oneFile.file.response) {\n        oneFile.file.response = {};\n      }\n      oneFile.file.response.error = oneFile.file.response.error || getError(oneFile.validateResult.extra);\n      sizeLimitErrors.push(oneFile);\n      return;\n    }\n    toFiles.push(oneFile.file);\n  });\n  return {\n    sizeLimitErrors: sizeLimitErrors,\n    beforeUploadErrorFiles: beforeUploadErrorFiles,\n    toFiles: toFiles\n  };\n}\nfunction getTriggerTextField(p) {\n  if (p.isBatchUpload && p.status) return \"reupload\";\n  if (p.status === \"fail\") return \"reupload\";\n  if (p.status === \"progress\") return \"uploading\";\n  if (p.status === \"success\" || !p.autoUpload && p.status === \"waiting\") {\n    return p.multiple ? \"continueUpload\" : \"reupload\";\n  }\n  return \"fileInput\";\n}\nfunction getDisplayFiles(params) {\n  var multiple = params.multiple,\n    uploadValue = params.uploadValue,\n    toUploadFiles = params.toUploadFiles,\n    autoUpload = params.autoUpload;\n  var waitingUploadFiles = autoUpload ? toUploadFiles : toUploadFiles.filter(function (file) {\n    return file.status !== \"success\";\n  });\n  if (multiple && !params.isBatchUpload) {\n    if (!autoUpload) return uploadValue;\n    return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];\n  }\n  return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];\n}\nexport { formatToUploadFile, getDisplayFiles, getFilesAndErrors, getTriggerTextField, handleBeforeUpload, handleError, handleRequestMethodResponse, handleSuccess, upload, uploadOneRequest, validateFile };","map":{"version":3,"names":["handleBeforeUpload","file","params","sizeLimit","beforeUpload","sizePromise","Promise","resolve","result","sizeLimitObj","isNumber_1","size","unit","limit","isOverSizeLimit","promiseList","isFunction_1","r","p","all","then","handleError","options","event","files","response","XMLHttpRequest","formatResponse","res","currentFiles","forEach","status","handleSuccess","length","log","error","_file$response","percent","url","handleRequestMethodResponse","includes","warn","uploadOneRequest","action","toUploadFiles","requestMethod","multiple","resultFiles","map","fileInfo","find","toFile","name","raw","_objectSpread","_response","uploadTime","getCurrentDate","_params$onResponseSuc","onResponseSuccess","call","_params$onResponseErr","onResponseError","data","_params$setXhrObject","xhrReq","xhr","useMockProgress","mockProgressDuration","onError","_params$onResponseErr2","onProgress","onResponseProgress","onSuccess","_params$onResponseErr3","_params$onResponseSuc2","_r","formatRequest","headers","withCredentials","method","setXhrObject","updateUploadedFiles","uploadFiles","existFiles","filter","t","newFiles","_loop","i","index","findIndex","item","tmpFile","push","len","upload","uploadAllFilesInOneRequest","uploadedFiles","isBatchUpload","thisUploadFiles","failedFiles","list","arr","one","tFiles","autoUpload","concat","formatToUploadFile","format","arguments","undefined","fileRaw","uploadFile","lastModified","type","validateFile","uploadValue","max","allowUploadDuplicateFile","tmpFiles","sameNameFile","hasSameNameFile","validateResult","lengthOverLimit","tmpFilesLenToBeAdded","slice","formattedFiles","allFileValidatePromise","beforeAllFilesUpload","_params$beforeAllFile","resolve2","_ref","_ref2","_slicedToArray","sizeResult","customResult","extra","results","_results","_toArray","allFilesResult","others","fileValidateList","getFilesAndErrors","getError","sizeLimitErrors","beforeUploadErrorFiles","toFiles","oneFile","_oneFile$validateResu","_oneFile$validateResu2","getTriggerTextField","getDisplayFiles","waitingUploadFiles"],"sources":["../../../../src/_common/js/upload/main.ts"],"sourcesContent":["import isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\n/* eslint-disable no-param-reassign */\nimport { getCurrentDate, isOverSizeLimit } from './utils';\nimport xhr from './xhr';\nimport log from '../log/log';\nimport {\n  UploadFile,\n  SizeLimitObj,\n  FileChangeParams,\n  FileChangeReturn,\n  RequestMethodResponse,\n  HandleUploadParams,\n  SuccessContext,\n  handleSuccessParams,\n  UploadTriggerUploadText,\n  ErrorContext,\n  ResponseType,\n} from './types';\n\nexport interface BeforeUploadExtra {\n  /** 图片文件大小限制 */\n  sizeLimit?: number | SizeLimitObj;\n  /** 上传文件之前的钩子，参数为上传的文件，返回值决定是否上传 */\n  beforeUpload?: (file: UploadFile) => boolean | Promise<boolean>;\n}\n\nexport type BeforeUploadPromiseList = [Promise<SizeLimitObj>, undefined | Promise<boolean>]\n\nexport function handleBeforeUpload(\n  file: UploadFile, params: BeforeUploadExtra,\n): Promise<[SizeLimitObj, boolean]> {\n  const { sizeLimit, beforeUpload } = params;\n  // 文件大小校验\n  const sizePromise = new Promise<SizeLimitObj>((resolve) => {\n    let result: SizeLimitObj = null;\n    if (sizeLimit) {\n      const sizeLimitObj: SizeLimitObj = isNumber(sizeLimit)\n        ? { size: sizeLimit, unit: 'KB' }\n        : sizeLimit;\n      const limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);\n      if (limit) {\n        result = sizeLimitObj;\n      }\n    }\n    resolve(result);\n  });\n\n  // 自定义校验\n  const promiseList: BeforeUploadPromiseList = [sizePromise, undefined];\n  if (isFunction(beforeUpload)) {\n    const r = beforeUpload(file);\n    const p = r instanceof Promise ? r : (new Promise<boolean>((resolve) => resolve(r)));\n    promiseList[1] = p;\n  }\n\n  // 同时进行文件大小校验和自定义校验函数\n  return new Promise((resolve) => {\n    Promise.all(promiseList).then((r) => {\n      resolve(r);\n    });\n  });\n}\n\nexport interface OnErrorParams extends ErrorContext {\n  formatResponse?: HandleUploadParams['formatResponse'];\n}\n\nexport function handleError(options: OnErrorParams) {\n  const { event, files, response, XMLHttpRequest, formatResponse } = options;\n  let res = response;\n  if (isFunction(formatResponse)) {\n    res = formatResponse(response, { file: files[0], currentFiles: files });\n  }\n  files.forEach((file) => {\n    file.status = 'fail';\n    file.response = res;\n  });\n  return { response: res, event, files, XMLHttpRequest };\n}\n\nexport function handleSuccess(params: handleSuccessParams) {\n  const { event, files, response, XMLHttpRequest } = params;\n  if (files?.length <= 0) {\n    log.error('Upload', 'Empty File in Success Callback');\n  }\n  files.forEach((file) => {\n    file.percent = 100;\n    file.status = 'success';\n    delete file.response?.error;\n  });\n  const res = response;\n  files[0].url = res.url || files[0].url;\n  return { response: res, event, files, XMLHttpRequest };\n}\n\nexport type UploadRequestReturn = {\n  status?: 'fail' | 'success';\n  /** 上传失败的文件，需等待继续上传 */\n  failedFiles?: UploadFile[];\n  data?: SuccessContext;\n  /** 批量文件上传，一个文件一个请求的场景下，响应结果的列表 */\n  list?: UploadRequestReturn[];\n}\n\nexport function handleRequestMethodResponse(res: RequestMethodResponse) {\n  if (!res) {\n    log.error('Upload', '`requestMethodResponse` is required.');\n    return false;\n  }\n  if (!res.status) {\n    log.error('Upload', '`requestMethodResponse.status` is missing, which value only can be `success` or `fail`');\n    return false;\n  }\n  if (!['success', 'fail'].includes(res.status)) {\n    log.error('Upload', '`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: \\'success\\', response: { url: \\'\\' } }`');\n    return false;\n  }\n  if (res.status === 'success' && (!res.response || (!res.response.url && !res.response.files))) {\n    log.warn('Upload', '`requestMethodResponse.response.url` or `requestMethodResponse.response.files` is required if `status` is `success`');\n  }\n  return true;\n}\n\n/**\n * 一次上传请求的返回结果\n */\nexport function uploadOneRequest(params: HandleUploadParams): Promise<UploadRequestReturn> {\n  const { action, toUploadFiles, requestMethod } = params;\n  return new Promise<UploadRequestReturn>((resolve) => {\n    if (!action && !requestMethod) {\n      log.error('Upload', 'one of action and requestMethod must be exist.');\n      resolve({});\n      return;\n    }\n    if (!toUploadFiles || !toUploadFiles.length) {\n      log.warn('Upload', 'No files need to be uploaded');\n      resolve({});\n      return;\n    }\n    toUploadFiles.forEach((file) => {\n      file.status = 'progress';\n    });\n    // 自定义上传方法\n    if (requestMethod) {\n      requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then((res) => {\n        if (!handleRequestMethodResponse(res)) {\n          resolve({});\n          return;\n        }\n        let response = (res.response || {}) as ResponseType;\n        if (isFunction(params.formatResponse)) {\n          response = params.formatResponse(response, { file: toUploadFiles[0], currentFiles: toUploadFiles });\n        }\n        if (res.status === 'fail') {\n          response.error = res.error || response.error;\n        }\n        let resultFiles: UploadFile[] = [];\n        if (res.status === 'success' && response.files) {\n          // 一个请求上传并返回多个文件\n          resultFiles = response.files.map((file: UploadFile) => {\n            const fileInfo = toUploadFiles.find((toFile) => (\n              (file.name && toFile.name === file.name) || (file.raw && toFile.raw === file.raw)\n            ));\n            return {\n              ...fileInfo,\n              ...file,\n              status: res.status,\n              response,\n            };\n          });\n        } else {\n          // 一个请求上传并返回一个文件\n          toUploadFiles.forEach((file) => {\n            file.status = res.status;\n            file.response = response;\n            file.url = response.url;\n            file.percent = res.status === 'success' ? 100 : 0;\n            // 如果上传请求返回结果没有上传日期，则使用电脑当前日期显示\n            file.uploadTime = response?.uploadTime || getCurrentDate();\n          });\n          resultFiles = toUploadFiles;\n        }\n        const result = {\n          response,\n          file: resultFiles[0],\n          files: resultFiles,\n        };\n        if (res.status === 'success') {\n          params.onResponseSuccess?.(result);\n        } else if (res.status === 'fail') {\n          params.onResponseError?.(result);\n        }\n        resolve({\n          status: res.status,\n          data: result,\n        });\n      });\n    } else {\n      const xhrReq = xhr({\n        action: params.action,\n        files: params.toUploadFiles,\n        useMockProgress: params.useMockProgress,\n        mockProgressDuration: params.mockProgressDuration,\n        onError: (p: ErrorContext) => {\n          const r = handleError({ ...p, formatResponse: params.formatResponse });\n          params.onResponseError?.(r);\n          resolve({ status: 'fail', data: r });\n        },\n        onProgress: params.onResponseProgress,\n        onSuccess: (p: SuccessContext) => {\n          const { formatResponse } = params;\n          let res = p.response;\n          if (isFunction(formatResponse)) {\n            res = formatResponse(p.response, {\n              file: p.file,\n              currentFiles: p.files,\n            });\n          }\n          if (res.error) {\n            const r = handleError({ ...p, response: res });\n            params.onResponseError?.(r);\n            resolve({ status: 'fail', data: r });\n          } else {\n            p.file.response = res;\n            p.files[0].response = res;\n            const r = handleSuccess({ ...p, response: res });\n            params.onResponseSuccess?.(r);\n            resolve({ status: 'success', data: r });\n          }\n        },\n        formatRequest: params.formatRequest,\n        data: params.data,\n        name: params.name,\n        headers: params.headers,\n        withCredentials: params.withCredentials,\n        method: params.method,\n      });\n      params.setXhrObject?.({\n        files: params.toUploadFiles,\n        xhrReq,\n      });\n    }\n  });\n}\n\nfunction updateUploadedFiles(uploadFiles: UploadFile[], resultFiles: UploadFile[]) {\n  const existFiles = uploadFiles.filter((t) => t.url);\n  const newFiles = existFiles;\n  for (let i = 0, len = resultFiles.length; i < len; i++) {\n    const file = resultFiles[i];\n    const index = uploadFiles.findIndex((item) => (\n      (item.raw && item.raw === file.raw) || (item.name && item.name === file.name)\n    ));\n    const tmpFile = index >= 0 ? { ...uploadFiles[index], ...file } : file;\n    newFiles.push(tmpFile);\n  }\n  return newFiles;\n}\n\n/**\n * 可能单个文件上传，也可能批量文件一次性上传\n * 返回上传成功或上传失败的文件列表\n */\nexport function upload(params: HandleUploadParams):\nPromise<UploadRequestReturn> {\n  const { uploadAllFilesInOneRequest, toUploadFiles, uploadedFiles, isBatchUpload } = params;\n  // 一批文件上传，部分文件失败，重新上传失败的文件\n  const thisUploadFiles = toUploadFiles.filter((t) => (\n    !t.response || (t.response && !t.response.error)\n  ));\n  return new Promise((resolve) => {\n    // 所有文件一次性上传\n    if (uploadAllFilesInOneRequest || !params.multiple) {\n      uploadOneRequest(params).then((r) => {\n        if (r.status === 'success') {\n          r.data.files = isBatchUpload || !params.multiple\n            ? r.data.files\n            : updateUploadedFiles(uploadedFiles, r.data.files);\n        }\n        const failedFiles = r.status === 'fail' ? r.data.files : [];\n        resolve({ ...r, failedFiles });\n      });\n      return;\n    }\n    // 一个文件一个文件上传\n    const list = thisUploadFiles.map((file) => (\n      uploadOneRequest({ ...params, toUploadFiles: [file] })\n    ));\n    Promise.all(list).then((arr) => {\n      const files: UploadFile[] = [];\n      const failedFiles: UploadFile[] = [];\n      arr.forEach((one) => {\n        if (one.status === 'success') {\n          files.push(one.data.files[0]);\n        } else if (one.status === 'fail') {\n          failedFiles.push(one.data.files[0]);\n        }\n      });\n      const tFiles = params.autoUpload\n        ? uploadedFiles.concat(files)\n        : uploadedFiles;\n      const newFiles = isBatchUpload || !params.multiple ? files : tFiles;\n      resolve({\n        status: files.length ? 'success' : 'fail',\n        data: {\n          files: newFiles,\n        },\n        // 上传失败的文件，需等待继续上传\n        failedFiles,\n        list: arr,\n      });\n    });\n  });\n}\n\nexport function formatToUploadFile(\n  files: File[],\n  format: FileChangeParams['format'],\n  status: UploadFile['status'] = undefined,\n  percent = 0,\n) {\n  return files.map((fileRaw: File) => {\n    let file: UploadFile = fileRaw;\n    if (isFunction(format)) {\n      file = format(fileRaw);\n    }\n    const uploadFile: UploadFile = {\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent,\n      status,\n      ...file,\n    };\n    return uploadFile;\n  });\n}\n\nexport function validateFile(\n  params: FileChangeParams\n): Promise<FileChangeReturn> {\n  const { files, uploadValue, max, allowUploadDuplicateFile } = params;\n  return new Promise((resolve) => {\n    // 是否允许相同的文件名存在\n    let tmpFiles = files.filter((file) => {\n      const sameNameFile = uploadValue.find((t) => t.name === file.name);\n      return allowUploadDuplicateFile || !sameNameFile;\n    });\n\n    let hasSameNameFile = false;\n    if (tmpFiles.length < files.length) {\n      hasSameNameFile = true;\n    }\n    if (!tmpFiles.length) {\n      const tFiles = formatToUploadFile(files, params.format, params.autoUpload ? 'progress' : 'waiting');\n      resolve({ hasSameNameFile, file: tFiles?.[0], files: tFiles, validateResult: { type: 'FILTER_FILE_SAME_NAME' } });\n      return;\n    }\n    // 上传文件数量限制\n    let lengthOverLimit = false;\n    if (max && tmpFiles.length && !params.isBatchUpload) {\n      const tmpFilesLenToBeAdded = tmpFiles.length;\n      tmpFiles = tmpFiles.slice(0, max - uploadValue.length);\n      if (tmpFilesLenToBeAdded + uploadValue.length > max) {\n        lengthOverLimit = true;\n      }\n    }\n\n    // 格式化文件对象\n    const formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload ? 'progress' : 'waiting');\n\n    // 全量文件，一波校验，整体上传 或 终止上传\n    let allFileValidatePromise;\n    if (params.beforeAllFilesUpload) {\n      const r = params.beforeAllFilesUpload?.(formattedFiles);\n      allFileValidatePromise = r instanceof Promise ? r : new Promise((resolve) => resolve(r));\n    }\n\n    // 单文件合法性校验，一个文件校验不通过其他文件可继续上传\n    const promiseList = formattedFiles.map((file: UploadFile) => new Promise((resolve) => {\n      handleBeforeUpload(\n        file,\n        { beforeUpload: params.beforeUpload, sizeLimit: params.sizeLimit },\n      ).then(([sizeResult, customResult]) => {\n        if (sizeResult) {\n          resolve({ file, validateResult: { type: 'FILE_OVER_SIZE_LIMIT', extra: sizeResult } });\n        } else if (customResult === false) {\n          resolve({ file, validateResult: { type: 'CUSTOM_BEFORE_UPLOAD' } });\n        }\n        resolve({ file });\n      });\n    }));\n    Promise.all([allFileValidatePromise].concat(promiseList)).then((results) => {\n      const [allFilesResult, ...others] = results;\n      // 如果 beforeAllFilesUpload 校验未通过\n      if (allFilesResult === false) {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          validateResult: { type: 'BEFORE_ALL_FILES_UPLOAD' },\n          files: formattedFiles,\n        });\n      } else {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          fileValidateList: others,\n          files: formattedFiles,\n        });\n      }\n    });\n  });\n}\n\nexport function getFilesAndErrors(fileValidateList: FileChangeReturn[], getError: (p: {[key: string]: any }) => string) {\n  const sizeLimitErrors: FileChangeReturn[] = [];\n  const beforeUploadErrorFiles: UploadFile[] = [];\n  const toFiles: UploadFile[] = [];\n  fileValidateList.forEach((oneFile) => {\n    if (oneFile.validateResult?.type === 'CUSTOM_BEFORE_UPLOAD') {\n      beforeUploadErrorFiles.push(oneFile.file);\n      return;\n    }\n    if (oneFile.validateResult?.type === 'FILE_OVER_SIZE_LIMIT') {\n      if (!oneFile.file.response) {\n        oneFile.file.response = {};\n      }\n      oneFile.file.response.error = oneFile.file.response.error\n      || getError(oneFile.validateResult.extra);\n      sizeLimitErrors.push(oneFile);\n      return;\n    }\n    toFiles.push(oneFile.file);\n  });\n\n  return { sizeLimitErrors, beforeUploadErrorFiles, toFiles };\n}\n\n/**\n * 获取文件上传触发元素文本 在全局配置中的字段\n */\nexport function getTriggerTextField(p: {\n  status: 'success' | 'fail' | 'progress' | 'waiting',\n  multiple: boolean,\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n}): keyof UploadTriggerUploadText {\n  if (p.isBatchUpload && p.status) return 'reupload';\n  if (p.status === 'fail') return 'reupload';\n  if (p.status === 'progress') return 'uploading';\n  if (p.status === 'success' || (!p.autoUpload && p.status === 'waiting')) {\n    return p.multiple ? 'continueUpload' : 'reupload';\n  }\n  return 'fileInput';\n}\n\nexport interface GetDisplayFilesParams {\n  multiple: boolean;\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n  uploadValue: UploadFile[];\n  toUploadFiles: UploadFile[];\n}\n\n/**\n * 获取文件列表显示\n */\nexport function getDisplayFiles(params: GetDisplayFilesParams) {\n  const { multiple, uploadValue, toUploadFiles, autoUpload } = params;\n  const waitingUploadFiles = autoUpload\n    ? toUploadFiles\n    : toUploadFiles.filter((file) => file.status !== 'success');\n  if (multiple && !params.isBatchUpload) {\n    if (!autoUpload) return uploadValue;\n    return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];\n  }\n  return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}