{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _slicedToArray } from '../../../_chunks/dep-5efe53d1.mjs';\nimport { i as isString_1 } from '../../../_chunks/dep-03a7fb6c.mjs';\nimport { i as isNumber_1 } from '../../../_chunks/dep-889e457b.mjs';\nimport { i as isObject_1 } from '../../../_chunks/dep-2b09875b.mjs';\nimport log from '../log/log.mjs';\nimport '../../../_chunks/dep-593f2b67.mjs';\nimport '../../../_chunks/dep-eca422c3.mjs';\nimport '../../../_chunks/dep-bf7257e7.mjs';\nimport '../../../_chunks/dep-4659d73b.mjs';\nimport '../../../_chunks/dep-eae2a67e.mjs';\nimport '../../../_chunks/dep-626c497d.mjs';\nimport '../../../_chunks/dep-29ef8419.mjs';\nfunction fillZero(length) {\n  return new Array(length).fill(0).join(\"\");\n}\nfunction isInputNumber(num) {\n  if (!num) return true;\n  if (isNumber_1(num)) return !Number.isNaN(num);\n  var r = /^[0-9|e|E|-]+\\.*[0-9|e|E|-]*$/.test(num);\n  if (!r) return false;\n  var eCount = 0;\n  var negativeCount = 0;\n  var dotCount = 0;\n  for (var i = 0, len = num.length; i < len; i++) {\n    if (num[i] === \".\") {\n      dotCount += 1;\n      if (dotCount > 1) return false;\n    }\n    if (/(e|E)+/.test(num[i])) {\n      eCount += 1;\n      if (eCount > 1) return false;\n    }\n    if (num[i] === \"-\") {\n      negativeCount += 1;\n      if (negativeCount > 2) return false;\n    }\n  }\n  return true;\n}\nfunction removeInvalidZero(num) {\n  var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (num.indexOf(\".\") !== -1) {\n    log.error(\"InputNumber\", \"num is not a integer number.\");\n    return num;\n  }\n  if (!num || num === \"0\" && decimal) return \"\";\n  if (num === \"0\") return num;\n  return (decimal ? num.replace(/0+$/, \"\") : num.replace(/^0+/, \"\")) || \"0\";\n}\nfunction largeIntNumberAdd(num1, num2) {\n  var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var number1 = removeInvalidZero(num1, decimal);\n  var number2 = removeInvalidZero(num2, decimal);\n  var isFirstLarger = number1.length > number2.length;\n  var maxNumber = isFirstLarger ? number1 : number2;\n  var minNumber = isFirstLarger ? number2 : number1;\n  var newNumber = [];\n  var step = [];\n  var diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  var len = decimal ? minNumber.length : maxNumber.length;\n  for (var i = len - 1; i >= 0; i--) {\n    var minIndex = i - diff;\n    var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);\n    if (count >= 10) {\n      step[i - 1] = 1;\n    }\n    newNumber.unshift(String(count % 10));\n  }\n  if (step[-1]) {\n    newNumber.unshift(\"1\");\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join(\"\");\n  }\n  return newNumber.join(\"\");\n}\nfunction largePositiveNumberAdd(num1, num2) {\n  var _num1$split = num1.split(\".\"),\n    _num1$split2 = _slicedToArray(_num1$split, 2),\n    _num1$split2$ = _num1$split2[0],\n    intNumber1 = _num1$split2$ === void 0 ? \"0\" : _num1$split2$,\n    _num1$split2$2 = _num1$split2[1],\n    decimalNumber1 = _num1$split2$2 === void 0 ? \"0\" : _num1$split2$2;\n  var _num2$split = num2.split(\".\"),\n    _num2$split2 = _slicedToArray(_num2$split, 2),\n    _num2$split2$ = _num2$split2[0],\n    intNumber2 = _num2$split2$ === void 0 ? \"0\" : _num2$split2$,\n    _num2$split2$2 = _num2$split2[1],\n    decimalNumber2 = _num2$split2$2 === void 0 ? \"0\" : _num2$split2$2;\n  var integerSum = largeIntNumberAdd(intNumber1, intNumber2);\n  if (decimalNumber1 === \"0\" && decimalNumber2 === \"0\") return integerSum;\n  var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);\n  var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);\n  var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);\n  var decimalLength = decimalNumberSum.length;\n  if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {\n    return [removeInvalidZero(largeIntNumberAdd(integerSum, \"1\")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {\n      return v;\n    }).join(\".\");\n  }\n  return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {\n    return v;\n  }).join(\".\");\n}\nfunction compareLargeIntegerNumber(num1, num2) {\n  var number1 = removeInvalidZero(num1);\n  var number2 = removeInvalidZero(num2);\n  if (number1.length === number2.length) {\n    for (var i = 0, len = number1.length; i < len; i++) {\n      if (number1[i] > number2[i]) return 1;\n      if (number1[i] < number2[i]) return -1;\n    }\n    return 0;\n  }\n  return number1.length > number2.length ? 1 : -1;\n}\nfunction compareLargeDecimalNumber(num1, num2) {\n  var number1 = num1 && num1 !== \"0\" ? num1.replace(/0+$/, \"\") : \"0\";\n  var number2 = num2 && num2 !== \"0\" ? num2.replace(/0+$/, \"\") : \"0\";\n  var maxLength = Math.max(number1.length, number2.length);\n  for (var i = 0, len = maxLength; i < len; i++) {\n    if ((number1[i] || 0) > (number2[i] || 0)) return 1;\n    if ((number1[i] || 0) < (number2[i] || 0)) return -1;\n  }\n  return 0;\n}\nfunction formatENumber(num) {\n  var _num$split = num.split(\"e\"),\n    _num$split2 = _slicedToArray(_num$split, 2),\n    num1 = _num$split2[0],\n    num2 = _num$split2[1];\n  if (!num2) return num;\n  var _num$split3 = num.split(\".\"),\n    _num$split4 = _slicedToArray(_num$split3, 2),\n    integer = _num$split4[0],\n    _num$split4$ = _num$split4[1],\n    initDecimal = _num$split4$ === void 0 ? \"\" : _num$split4$;\n  var zeroCount = Number(num2);\n  var _initDecimal$split = initDecimal.split(\"e\"),\n    _initDecimal$split2 = _slicedToArray(_initDecimal$split, 1),\n    decimal = _initDecimal$split2[0];\n  if (zeroCount > decimal.length) {\n    var multipleZero = fillZero(zeroCount - decimal.length);\n    return num1.replace(/(^0+|\\.)/g, \"\") + multipleZero;\n  }\n  var n1 = integer.replace(/^0+/, \"\") + decimal.slice(0, zeroCount);\n  var d2 = decimal.slice(zeroCount);\n  return d2 ? [n1, d2].join(\".\") : n1;\n}\nfunction compareLargeNumber(num1, num2) {\n  var _formatENumber$split = formatENumber(num1).split(\".\"),\n    _formatENumber$split2 = _slicedToArray(_formatENumber$split, 2),\n    integer1 = _formatENumber$split2[0],\n    decimal1 = _formatENumber$split2[1];\n  var _formatENumber$split3 = formatENumber(num2).split(\".\"),\n    _formatENumber$split4 = _slicedToArray(_formatENumber$split3, 2),\n    integer2 = _formatENumber$split4[0],\n    decimal2 = _formatENumber$split4[1];\n  var result = compareLargeIntegerNumber(integer1.replace(\"-\", \"\"), integer2.replace(\"-\", \"\"));\n  var integer1IsNegative = integer1.includes(\"-\");\n  var integer2IsNegative = integer2.includes(\"-\");\n  if (integer1IsNegative && !integer2IsNegative) return -1;\n  if (!integer1IsNegative && integer2IsNegative) return 1;\n  if (integer1IsNegative && integer2IsNegative) {\n    if (result === 0) return 0;\n    return result > 0 ? -1 : 1;\n  }\n  if (result === 0) {\n    return compareLargeDecimalNumber(decimal1, decimal2);\n  }\n  return result;\n}\nfunction isInfinity(num) {\n  return [-Infinity, Infinity].includes(Number(num));\n}\nfunction isSafeNumber(num) {\n  return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;\n}\nfunction compareNumber(num1, num2, largeNumber) {\n  var isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;\n  var isInfinityCompare = isInfinity(num1) || isInfinity(num2);\n  if (isSafeNumberCompare || isInfinityCompare) {\n    if (Number(num1) === Number(num2)) return 0;\n    return Number(num1) > Number(num2) ? 1 : -1;\n  }\n  return compareLargeNumber(String(num1), String(num2));\n}\nfunction largeIntegerNumberSubtract(num1, num2, p) {\n  if (num1 === num2) return \"0\";\n  var _ref = p || {},\n    decimal = _ref.decimal,\n    stayZero = _ref.stayZero;\n  var number1 = removeInvalidZero(num1);\n  var number2 = removeInvalidZero(num2);\n  var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;\n  var maxNumber = isFirstLarger ? number1 : number2;\n  var minNumber = isFirstLarger ? number2 : number1;\n  var newNumber = [];\n  var step = [];\n  var diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  var len = decimal ? minNumber.length : maxNumber.length;\n  for (var i = len - 1; i >= 0; i--) {\n    var minIndex = i - diff;\n    var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);\n    if (count < 0) {\n      step[i - 1] = 1;\n      count += 10;\n    }\n    newNumber.unshift(String(count));\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join(\"\");\n  }\n  var finalNumber = newNumber.join(\"\");\n  if (!stayZero) {\n    finalNumber = finalNumber.replace(/^0+/, \"\");\n  }\n  return removeInvalidZero(isFirstLarger ? finalNumber : \"-\".concat(finalNumber));\n}\nfunction largePositiveNumberSubtract(num1, num2) {\n  if (num1 === num2) return \"0\";\n  var isFirstLarger = compareNumber(num1, num2, true) > 0;\n  var maxNumber = isFirstLarger ? num1 : num2;\n  var minNumber = isFirstLarger ? num2 : num1;\n  var _maxNumber$split = maxNumber.split(\".\"),\n    _maxNumber$split2 = _slicedToArray(_maxNumber$split, 2),\n    intNumber1 = _maxNumber$split2[0],\n    _maxNumber$split2$ = _maxNumber$split2[1],\n    decimalNumber1 = _maxNumber$split2$ === void 0 ? \"0\" : _maxNumber$split2$;\n  var _minNumber$split = minNumber.split(\".\"),\n    _minNumber$split2 = _slicedToArray(_minNumber$split, 2),\n    intNumber2 = _minNumber$split2[0],\n    _minNumber$split2$ = _minNumber$split2[1],\n    decimalNumber2 = _minNumber$split2$ === void 0 ? \"0\" : _minNumber$split2$;\n  var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);\n  if (decimalNumber1 === \"0\" && decimalNumber2 === \"0\") {\n    return isFirstLarger ? integerNumber : \"-\".concat(integerNumber);\n  }\n  var decimalNumber = \"\";\n  var addOneNumber = decimalNumber1;\n  if (decimalNumber1.length < decimalNumber2.length) {\n    addOneNumber = \"\".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));\n  }\n  if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {\n    decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {\n      decimal: true\n    });\n  } else {\n    if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === \"0\") {\n      decimalNumber = largeIntegerNumberSubtract(\"1\".concat(addOneNumber), decimalNumber2, {\n        stayZero: true\n      });\n      decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;\n    } else {\n      decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {\n        decimal: true\n      });\n    }\n    integerNumber = largeIntegerNumberSubtract(integerNumber, \"1\");\n  }\n  var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(\".\") : integerNumber;\n  return isFirstLarger ? finalNumber : \"-\".concat(finalNumber);\n}\nfunction largeNumberSubtract(num1, num2) {\n  var isFirstNegative = num1[0] === \"-\";\n  var isSecondNegative = num2[0] === \"-\";\n  if (isFirstNegative && !isSecondNegative) {\n    var r = largePositiveNumberAdd(num1.slice(1), num2);\n    return \"-\".concat(r);\n  }\n  if (isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberAdd(num1, num2.slice(1));\n  }\n  return largePositiveNumberSubtract(num1, num2);\n}\nfunction largeNumberAdd(num1, num2) {\n  var isFirstNegative = num1[0] === \"-\";\n  var isSecondNegative = num2[0] === \"-\";\n  if (isFirstNegative && !isSecondNegative) {\n    return largePositiveNumberSubtract(num2, num1.slice(1));\n  }\n  if (isFirstNegative && isSecondNegative) {\n    var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));\n    return \"-\".concat(r);\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num1, num2.slice(1));\n  }\n  return largePositiveNumberAdd(num1, num2);\n}\nfunction formatDecimal(num, places) {\n  var enableRound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (enableRound) {\n    return num.toFixed(places);\n  }\n  var _num$toString$split = num.toString().split(\".\"),\n    _num$toString$split2 = _slicedToArray(_num$toString$split, 2),\n    integer = _num$toString$split2[0],\n    decimal = _num$toString$split2[1];\n  if (places === 0) {\n    return integer;\n  }\n  var decimalNumber = decimal.slice(0, places);\n  if (decimal.length < places) {\n    decimalNumber += fillZero(places - decimal.length);\n  }\n  return [integer, decimalNumber].join(\".\");\n}\nfunction decimalPlacesToFixedNum(num, decimalPlaces) {\n  if (isObject_1(decimalPlaces)) {\n    var _decimalPlaces$enable;\n    return formatDecimal(num, decimalPlaces.places, (_decimalPlaces$enable = decimalPlaces.enableRound) !== null && _decimalPlaces$enable !== void 0 ? _decimalPlaces$enable : true);\n  }\n  return formatDecimal(num, decimalPlaces, true);\n}\nfunction largeNumberToFixed(number) {\n  var _decimalPlaces$enable2;\n  var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (Number.isNaN(Number(number))) return \"\";\n  if (!largeNumber) {\n    return decimalPlacesToFixedNum(Number(number), decimalPlaces);\n  }\n  var places = isObject_1(decimalPlaces) ? decimalPlaces.places : decimalPlaces;\n  var enableRound = isObject_1(decimalPlaces) ? (_decimalPlaces$enable2 = decimalPlaces.enableRound) !== null && _decimalPlaces$enable2 !== void 0 ? _decimalPlaces$enable2 : true : true;\n  if (!isString_1(number)) return String(number);\n  var _number$split = number.split(\".\"),\n    _number$split2 = _slicedToArray(_number$split, 2),\n    num1 = _number$split2[0],\n    num2 = _number$split2[1];\n  if (!num2) {\n    return places > 0 && enableRound ? [number, fillZero(places)].join(\".\") : number;\n  }\n  if (places === 0) {\n    return enableRound && Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, \"1\") : num1;\n  }\n  var decimalNumber = num2.slice(0, places);\n  if (num2.length < places) {\n    decimalNumber += fillZero(places - num2.length);\n  } else if (enableRound) {\n    var _decimalNumber$match;\n    var leadZeroNum = (_decimalNumber$match = decimalNumber.match(/^0+/)) === null || _decimalNumber$match === void 0 ? void 0 : _decimalNumber$match[0].length;\n    var leadNineNum = decimalNumber.match(/^9+/);\n    var needAdded = Number(num2[places]) >= 5;\n    decimalNumber = needAdded ? largePositiveNumberAdd(decimalNumber, \"1\") : decimalNumber;\n    if (leadZeroNum && needAdded && leadZeroNum + decimalNumber.length >= places) {\n      decimalNumber = \"\".concat(fillZero(places - decimalNumber.length)).concat(decimalNumber);\n    }\n    if (leadNineNum && decimalNumber.length > places) {\n      num1 = (Number(num1) + 1).toString();\n      decimalNumber = fillZero(places);\n    }\n  }\n  return [num1, decimalNumber].join(\".\");\n}\nexport { compareLargeNumber, compareNumber, decimalPlacesToFixedNum, fillZero, formatDecimal, formatENumber, isInfinity, isInputNumber, isSafeNumber, largeIntNumberAdd, largeIntegerNumberSubtract, largeNumberAdd, largeNumberSubtract, largeNumberToFixed, largePositiveNumberAdd, largePositiveNumberSubtract, removeInvalidZero };","map":{"version":3,"names":["fillZero","length","Array","fill","join","isInputNumber","num","isNumber_1","Number","isNaN","r","test","eCount","negativeCount","dotCount","i","len","removeInvalidZero","decimal","arguments","undefined","indexOf","log","error","replace","largeIntNumberAdd","num1","num2","number1","number2","isFirstLarger","maxNumber","minNumber","newNumber","step","diff","minIndex","count","unshift","String","concat","slice","largePositiveNumberAdd","_num1$split","split","_num1$split2","_slicedToArray","_num1$split2$","intNumber1","_num1$split2$2","decimalNumber1","_num2$split","_num2$split2","_num2$split2$","intNumber2","_num2$split2$2","decimalNumber2","integerSum","newDecimalNumber1","newDecimalNumber2","decimalNumberSum","decimalLength","filter","v","compareLargeIntegerNumber","compareLargeDecimalNumber","maxLength","Math","max","formatENumber","_num$split","_num$split2","_num$split3","_num$split4","integer","_num$split4$","initDecimal","zeroCount","_initDecimal$split","_initDecimal$split2","multipleZero","n1","d2","compareLargeNumber","_formatENumber$split","_formatENumber$split2","integer1","decimal1","_formatENumber$split3","_formatENumber$split4","integer2","decimal2","result","integer1IsNegative","includes","integer2IsNegative","isInfinity","Infinity","isSafeNumber","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","compareNumber","largeNumber","isSafeNumberCompare","isInfinityCompare","largeIntegerNumberSubtract","p","_ref","stayZero","finalNumber","largePositiveNumberSubtract","_maxNumber$split","_maxNumber$split2","_maxNumber$split2$","_minNumber$split","_minNumber$split2","_minNumber$split2$","integerNumber","decimalNumber","addOneNumber","largeNumberSubtract","isFirstNegative","isSecondNegative","largeNumberAdd","formatDecimal","places","enableRound","toFixed","_num$toString$split","toString","_num$toString$split2","decimalPlacesToFixedNum","decimalPlaces","isObject_1","_decimalPlaces$enable","largeNumberToFixed","number","_decimalPlaces$enable2","isString_1","_number$split","_number$split2","_decimalNumber$match","leadZeroNum","match","leadNineNum","needAdded"],"sources":["../../../../src/_common/js/input-number/large-number.ts"],"sourcesContent":["import isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isObject from 'lodash/isObject';\nimport log from '../log/log';\n\nexport type InputNumberDecimalPlaces = number | { enableRound: boolean, places: number };\n\nexport function fillZero(length: number) {\n  return new Array(length).fill(0).join('');\n}\n\n/**\n * 大数，是否是一个数字，数字字符包括 - . e [0-9]\n */\nexport function isInputNumber(num: number | string): boolean {\n  if (!num) return true;\n  if (isNumber(num)) return !Number.isNaN(num);\n  const r = /^[0-9|e|E|-]+\\.*[0-9|e|E|-]*$/.test(num);\n  if (!r) return false;\n  // only allow one [.e] and two [-]\n  let eCount = 0;\n  let negativeCount = 0;\n  let dotCount = 0;\n  for (let i = 0, len = num.length; i < len; i++) {\n    if (num[i] === '.') {\n      dotCount += 1;\n      if (dotCount > 1) return false;\n    }\n    if (/(e|E)+/.test(num[i])) {\n      eCount += 1;\n      if (eCount > 1) return false;\n    }\n    if (num[i] === '-') {\n      negativeCount += 1;\n      if (negativeCount > 2) return false;\n    }\n  }\n  return true;\n}\n\n// 整数，去除前面的无效 0（本身是 0 除外）；小数去除末尾的无效 0\nexport function removeInvalidZero(num: string, decimal = false) {\n  if (num.indexOf('.') !== -1) {\n    log.error('InputNumber', 'num is not a integer number.');\n    return num;\n  }\n  if (!num || (num === '0' && decimal)) return '';\n  if (num === '0') return num;\n  return (decimal ? num.replace(/0+$/, '') : num.replace(/^0+/, '')) || '0';\n}\n\n/**\n * 大数加法，仅支持正整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largeIntNumberAdd(num1: string, num2: string, decimal = false): string {\n  const number1 = removeInvalidZero(num1, decimal);\n  const number2 = removeInvalidZero(num2, decimal);\n  const isFirstLarger = number1.length > number2.length;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，加第二个数，加进位\n    const count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);\n    if (count >= 10) {\n      step[i - 1] = 1;\n    }\n    newNumber.unshift(String(count % 10));\n  }\n  // 999 + 1 = 1000，之类的进位\n  if (step[-1]) {\n    newNumber.unshift('1');\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  return newNumber.join('');\n}\n\n/**\n * 大数加法，支持小数和整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largePositiveNumberAdd(num1: string, num2: string): string {\n  const [intNumber1 = '0', decimalNumber1 = '0'] = num1.split('.');\n  const [intNumber2 = '0', decimalNumber2 = '0'] = num2.split('.');\n  const integerSum = largeIntNumberAdd(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') return integerSum;\n  const newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);\n  const newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);\n  // 小数点相加\n  const decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);\n  // 组合整数部分和小数部分\n  const decimalLength = decimalNumberSum.length;\n  // 如果小数相加进位\n  if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {\n    return [\n      removeInvalidZero(largeIntNumberAdd(integerSum, '1')),\n      removeInvalidZero(decimalNumberSum.slice(1), true),\n    ].filter((v: string) => v).join('.');\n  }\n  return [\n    removeInvalidZero(integerSum),\n    removeInvalidZero(decimalNumberSum, true)\n  ].filter((v: string) => v).join('.');\n}\n\n/**\n * 比较两个大数的大小，仅正整数有效\n */\nfunction compareLargeIntegerNumber(num1: string, num2: string): 1 | -1 | 0 {\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  if (number1.length === number2.length) {\n    for (let i = 0, len = number1.length; i < len; i++) {\n      if (number1[i] > number2[i]) return 1;\n      if (number1[i] < number2[i]) return -1;\n    }\n    return 0;\n  }\n  return number1.length > number2.length ? 1 : -1;\n}\n\nfunction compareLargeDecimalNumber(num1: string, num2: string) {\n  const number1 = num1 && num1 !== '0' ? num1.replace(/0+$/, '') : '0';\n  const number2 = num2 && num2 !== '0' ? num2.replace(/0+$/, '') : '0';\n  const maxLength = Math.max(number1.length, number2.length);\n  for (let i = 0, len = maxLength; i < len; i++) {\n    if ((number1[i] || 0) > (number2[i] || 0)) return 1;\n    if ((number1[i] || 0) < (number2[i] || 0)) return -1;\n  }\n  return 0;\n}\n\n/**\n * 2e3 => 2000\n * 0.2e3 => 200\n */\nexport function formatENumber(num: string): string {\n  const [num1, num2] = num.split('e');\n  if (!num2) return num;\n  const [integer, initDecimal = ''] = num.split('.');\n  const zeroCount = Number(num2);\n  const [decimal] = initDecimal.split('e');\n  if (zeroCount > decimal.length) {\n    const multipleZero = fillZero(zeroCount - decimal.length);\n    return num1.replace(/(^0+|\\.)/g, '') + multipleZero;\n  }\n  const n1 = integer.replace(/^0+/, '') + decimal.slice(0, zeroCount);\n  const d2 = decimal.slice(zeroCount);\n  return d2 ? [n1, d2].join('.') : n1;\n}\n\n/**\n * 比较两个大数的大小\n */\nexport function compareLargeNumber(\n  num1: string,\n  num2: string,\n): 1 | -1 | 0 {\n  const [integer1, decimal1] = formatENumber(num1).split('.');\n  const [integer2, decimal2] = formatENumber(num2).split('.');\n  const result = compareLargeIntegerNumber(integer1.replace('-', ''), integer2.replace('-', ''));\n  const integer1IsNegative = integer1.includes('-');\n  const integer2IsNegative = integer2.includes('-');\n  if (integer1IsNegative && !integer2IsNegative) return -1;\n  if (!integer1IsNegative && integer2IsNegative) return 1;\n  if (integer1IsNegative && integer2IsNegative) {\n    if (result === 0) return 0;\n    return result > 0 ? -1 : 1;\n  }\n  if (result === 0) {\n    return compareLargeDecimalNumber(decimal1, decimal2);\n  }\n  return result;\n}\n\n// 确认是否为无限大/小\nexport function isInfinity(num: number| string) {\n  return [-Infinity, Infinity].includes(Number(num));\n}\n\n// 确认是否是大数\nexport function isSafeNumber(num: string | number) {\n  return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;\n}\n\n/**\n * 比较两个数的大小\n */\nexport function compareNumber(\n  num1: string | number,\n  num2: string | number,\n  largeNumber?: boolean,\n) {\n  const isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;\n  const isInfinityCompare = isInfinity(num1) || isInfinity(num2);\n  if (isSafeNumberCompare || isInfinityCompare) {\n    // 比较两个非大数或涉及无穷的大小\n    if (Number(num1) === Number(num2)) return 0;\n    return Number(num1) > Number(num2) ? 1 : -1;\n  }\n  // 比较两个大数的大小\n  return compareLargeNumber(String(num1), String(num2));\n}\n\n/**\n * 大数减法，仅支持整数\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largeIntegerNumberSubtract(\n  num1: string, num2: string, p?: { decimal?: boolean, stayZero?: boolean }\n): string {\n  if (num1 === num2) return '0';\n  const { decimal, stayZero } = p || {};\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  const isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  // step 存储借位信息\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，减第二个数，减借位\n    let count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);\n    if (count < 0) {\n      step[i - 1] = 1;\n      count += 10;\n    }\n    newNumber.unshift(String(count));\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  let finalNumber = newNumber.join('');\n  if (!stayZero) {\n    finalNumber = finalNumber.replace(/^0+/, '');\n  }\n  return removeInvalidZero(isFirstLarger ? finalNumber : `-${finalNumber}`);\n}\n\n/**\n * 大数减法，支持整数和小数（无精度问题）\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largePositiveNumberSubtract(num1: string, num2: string): string {\n  if (num1 === num2) return '0';\n  const isFirstLarger = compareNumber(num1, num2, true) > 0;\n  const maxNumber = isFirstLarger ? num1 : num2;\n  const minNumber = isFirstLarger ? num2 : num1;\n  // 整数部分和小数部分分开处理\n  const [intNumber1, decimalNumber1 = '0'] = maxNumber.split('.');\n  const [intNumber2, decimalNumber2 = '0'] = minNumber.split('.');\n  let integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') {\n    return isFirstLarger ? integerNumber : `-${integerNumber}`;\n  }\n  // 小数点相减\n  let decimalNumber = '';\n  let addOneNumber = decimalNumber1;\n  // 第一个数字的小数位数比第二个少，需补足 0\n  if (decimalNumber1.length < decimalNumber2.length) {\n    addOneNumber = `${decimalNumber1}${fillZero(decimalNumber2.length - decimalNumber1.length)}`;\n  }\n  // 第一个小数位更小，是否需要借位\n  if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {\n    decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, { decimal: true });\n  } else {\n    if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === '0') {\n      decimalNumber = largeIntegerNumberSubtract(`1${addOneNumber}`, decimalNumber2, { stayZero: true });\n      decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;\n    } else {\n      decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, { decimal: true });\n    }\n    integerNumber = largeIntegerNumberSubtract(integerNumber, '1');\n  }\n  const finalNumber = decimalNumber ? [integerNumber, decimalNumber].join('.') : integerNumber;\n  return isFirstLarger ? finalNumber : `-${finalNumber}`;\n}\n\n/**\n * -0.6 - 0.8        =>  -(0.6 + 0.8)\n * -0.6 - (-0.8)     =>  0.8 - 0.6\n * 0.6 - (-0.8)      => 0.6 + 0.8\n * 0.6 - 0.8         => 0.6 - 0.8\n */\nexport function largeNumberSubtract(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    const r = largePositiveNumberAdd(num1.slice(1), num2);\n    return `-${r}`;\n  }\n  if (isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberAdd(num1, num2.slice(1));\n  }\n  return largePositiveNumberSubtract(num1, num2);\n}\n\n/**\n * -0.6 + 0.8        =>  0.8 - 0.6\n * -0.6 + (-0.8)     =>  -(0.6 + 0.8)\n * 0.6 + (-0.8)      => 0.6 - 0.8\n * 0.6 + 0.8         => 0.6 + 0.8\n */\nexport function largeNumberAdd(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    return largePositiveNumberSubtract(num2, num1.slice(1));\n  }\n  if (isFirstNegative && isSecondNegative) {\n    const r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));\n    return `-${r}`;\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num1, num2.slice(1));\n  }\n  return largePositiveNumberAdd(num1, num2);\n}\n\n/**\n * 格式化小数，并且可以控制小数点后的位数和是否进行四舍五入。\n *\n * @param {number} num - 要格式化的数字。\n * @param {number} places - 小数点后的位数。\n * @param {boolean} rounding - 是否进行四舍五入。\n * @returns {string} 格式化后的数字字符串。\n */\nexport function formatDecimal(num: number, places: number, enableRound: boolean = true) {\n  // 开启四舍五入 直接用 toFixed\n  if (enableRound) {\n    return num.toFixed(places);\n  }\n\n  const [integer, decimal] = num.toString().split('.');\n  // 保留 0 位小数\n  if (places === 0) {\n    return integer;\n  }\n  // 补足小数位数\n  let decimalNumber = decimal.slice(0, places);\n  if (decimal.length < places) {\n    decimalNumber += (fillZero(places - decimal.length));\n  }\n  return [integer, decimalNumber].join('.');\n}\n\nexport function decimalPlacesToFixedNum(num: number, decimalPlaces: InputNumberDecimalPlaces) {\n  if (isObject(decimalPlaces)) {\n    return formatDecimal(num, decimalPlaces.places, decimalPlaces.enableRound ?? true);\n  }\n  return formatDecimal(num, decimalPlaces, true);\n}\n\n/**\n * 大数保留 N 位小数（没有精度问题）\n * @param {String} number 大数（只能使用字符串表示）\n * @param {Number} decimalPlaces 保留的小数位数\n * @param {Boolean} largeNumber 是否为大数\n */\nexport function largeNumberToFixed(\n  number: string | number,\n  decimalPlaces: InputNumberDecimalPlaces = 0,\n  largeNumber: boolean = true,\n): string {\n  if (Number.isNaN(Number(number))) return '';\n  if (!largeNumber) {\n    return decimalPlacesToFixedNum(Number(number), decimalPlaces);\n  }\n  const places = isObject(decimalPlaces) ? decimalPlaces.places : decimalPlaces;\n  const enableRound = isObject(decimalPlaces) ? (decimalPlaces.enableRound ?? true) : true;\n  if (!isString(number)) return String(number);\n  // eslint-disable-next-line prefer-const\n  let [num1, num2] = number.split('.');\n  // 如果不存在小数点，则补足位数\n  if (!num2) {\n    return (places > 0 && enableRound) ? [number, (fillZero(places))].join('.') : number;\n  }\n  // 存在小数点，保留 0 位小数，灵活配置四舍五入\n  if (places === 0) {\n    return (enableRound && Number(num2[0]) >= 5) ? largePositiveNumberAdd(num1, '1') : num1;\n  }\n  // 存在小数点，保留 > 0 位小数，灵活配置四舍五入\n  let decimalNumber = num2.slice(0, places);\n  if (num2.length < places) {\n    decimalNumber += (fillZero(places - num2.length));\n  } else if (enableRound) {\n    // 用于判断是否处于 1.08 这种小数为0开始的边界情况\n    const leadZeroNum = decimalNumber.match(/^0+/)?.[0].length;\n    // 用于判断是否处于 0.99/1.99 等需要往非0位进位的场景\n    const leadNineNum = decimalNumber.match(/^9+/);\n    // 决定是否需要四舍五入\n    const needAdded = Number(num2[places]) >= 5;\n\n    // 四舍五入后的结果\n    decimalNumber = needAdded\n      ? largePositiveNumberAdd(decimalNumber, '1')\n      : decimalNumber;\n\n    // 边界场景1（1.08 这种小数为0开始的边界情况）：计算后有误判的可能，如008 +1 误判为 8+1，需要手动补 0\n    if (\n      leadZeroNum\n      && needAdded\n      && leadZeroNum + decimalNumber.length >= places\n    ) {\n      decimalNumber = `${fillZero(\n        places - decimalNumber.length\n      )}${decimalNumber}`;\n    }\n    // 边界场景2:（0.99 这种可能进位的边界情况）：计算后有误判的可能，如995 四舍五入后需进位\n    if (leadNineNum && decimalNumber.length > places) {\n      num1 = (Number(num1) + 1).toString();\n      decimalNumber = fillZero(places);\n    }\n  }\n  return [num1, decimalNumber].join('.');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}