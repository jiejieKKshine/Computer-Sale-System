{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _slicedToArray } from '../../../_chunks/dep-5efe53d1.mjs';\nimport { _ as _classCallCheck, a as _createClass } from '../../../_chunks/dep-f909a041.mjs';\nimport { _ as _defineProperty } from '../../../_chunks/dep-fa52aa21.mjs';\nimport { t as tinycolor } from '../../../_chunks/dep-9ac991f3.mjs';\nimport { cmykInputToColor, rgb2cmyk } from './cmyk.mjs';\nimport { parseGradientString, isGradientColor } from './gradient.mjs';\nimport '../../../_chunks/dep-593f2b67.mjs';\nimport '../../../_chunks/dep-4659d73b.mjs';\nimport '../../../_chunks/dep-03a7fb6c.mjs';\nimport '../../../_chunks/dep-eca422c3.mjs';\nimport '../../../_chunks/dep-bf7257e7.mjs';\nimport '../../../_chunks/dep-eae2a67e.mjs';\nimport '../../../_chunks/dep-626c497d.mjs';\nimport '../../../_chunks/dep-29ef8419.mjs';\nimport '../../../_chunks/dep-73384992.mjs';\nvar _Color;\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar mathRound = Math.round;\nvar hsv2rgba = function hsv2rgba(states) {\n  return tinycolor(states).toRgb();\n};\nvar hsv2hsva = function hsv2hsva(states) {\n  return tinycolor(states).toHsv();\n};\nvar hsv2hsla = function hsv2hsla(states) {\n  return tinycolor(states).toHsl();\n};\nvar gradientColors2string = function gradientColors2string(object) {\n  var points = object.points,\n    degree = object.degree;\n  var colorsStop = points.sort(function (pA, pB) {\n    return pA.left - pB.left;\n  }).map(function (p) {\n    return \"\".concat(p.color, \" \").concat(Math.round(p.left * 100) / 100, \"%\");\n  });\n  return \"linear-gradient(\".concat(degree, \"deg,\").concat(colorsStop.join(\",\"), \")\");\n};\nvar getColorWithoutAlpha = function getColorWithoutAlpha(color) {\n  return tinycolor(color).setAlpha(1).toHexString();\n};\nvar genId = function genId() {\n  return (1 + Math.random() * 4294967295).toString(16);\n};\nvar genGradientPoint = function genGradientPoint(left, color) {\n  return {\n    id: genId(),\n    left: left,\n    color: color\n  };\n};\nvar Color = /*#__PURE__*/function () {\n  function Color(input) {\n    _classCallCheck(this, Color);\n    _defineProperty(this, \"states\", {\n      s: 100,\n      v: 100,\n      h: 100,\n      a: 1\n    });\n    _defineProperty(this, \"originColor\", void 0);\n    _defineProperty(this, \"isGradient\", void 0);\n    _defineProperty(this, \"gradientStates\", {\n      colors: [],\n      degree: 0,\n      selectedId: null,\n      css: \"\"\n    });\n    this.update(input);\n  }\n  return _createClass(Color, [{\n    key: \"update\",\n    value: function update(input) {\n      if (input === this.originColor) {\n        return;\n      }\n      var gradientColors = parseGradientString(input);\n      if (this.isGradient && !gradientColors) {\n        var colorHsv = tinycolor(input).toHsv();\n        this.states = colorHsv;\n        this.updateCurrentGradientColor();\n        return;\n      }\n      this.originColor = input;\n      this.isGradient = false;\n      var colorInput = input;\n      if (gradientColors) {\n        var _points$, _this$gradientSelecte;\n        this.isGradient = true;\n        var object = gradientColors;\n        var points = object.points.map(function (c) {\n          return genGradientPoint(c.left, c.color);\n        });\n        this.gradientStates = {\n          colors: points,\n          degree: object.degree,\n          selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null\n        };\n        this.gradientStates.css = this.linearGradient;\n        colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;\n      }\n      this.updateStates(colorInput);\n    }\n  }, {\n    key: \"saturation\",\n    get: function get() {\n      return this.states.s;\n    },\n    set: function set(value) {\n      this.states.s = Math.max(0, Math.min(100, value));\n      this.updateCurrentGradientColor();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.states.v;\n    },\n    set: function set(value) {\n      this.states.v = Math.max(0, Math.min(100, value));\n      this.updateCurrentGradientColor();\n    }\n  }, {\n    key: \"hue\",\n    get: function get() {\n      return this.states.h;\n    },\n    set: function set(value) {\n      this.states.h = Math.max(0, Math.min(360, value));\n      this.updateCurrentGradientColor();\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.states.a;\n    },\n    set: function set(value) {\n      this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));\n      this.updateCurrentGradientColor();\n    }\n  }, {\n    key: \"rgb\",\n    get: function get() {\n      var _hsv2rgba = hsv2rgba(this.states),\n        r = _hsv2rgba.r,\n        g = _hsv2rgba.g,\n        b = _hsv2rgba.b;\n      return \"rgb(\".concat(mathRound(r), \", \").concat(mathRound(g), \", \").concat(mathRound(b), \")\");\n    }\n  }, {\n    key: \"rgba\",\n    get: function get() {\n      var _hsv2rgba2 = hsv2rgba(this.states),\n        r = _hsv2rgba2.r,\n        g = _hsv2rgba2.g,\n        b = _hsv2rgba2.b,\n        a = _hsv2rgba2.a;\n      return \"rgba(\".concat(mathRound(r), \", \").concat(mathRound(g), \", \").concat(mathRound(b), \", \").concat(a, \")\");\n    }\n  }, {\n    key: \"hsv\",\n    get: function get() {\n      var _this$getHsva = this.getHsva(),\n        h = _this$getHsva.h,\n        s = _this$getHsva.s,\n        v = _this$getHsva.v;\n      return \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\");\n    }\n  }, {\n    key: \"hsva\",\n    get: function get() {\n      var _this$getHsva2 = this.getHsva(),\n        h = _this$getHsva2.h,\n        s = _this$getHsva2.s,\n        v = _this$getHsva2.v,\n        a = _this$getHsva2.a;\n      return \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(a, \")\");\n    }\n  }, {\n    key: \"hsl\",\n    get: function get() {\n      var _this$getHsla = this.getHsla(),\n        h = _this$getHsla.h,\n        s = _this$getHsla.s,\n        l = _this$getHsla.l;\n      return \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\");\n    }\n  }, {\n    key: \"hsla\",\n    get: function get() {\n      var _this$getHsla2 = this.getHsla(),\n        h = _this$getHsla2.h,\n        s = _this$getHsla2.s,\n        l = _this$getHsla2.l,\n        a = _this$getHsla2.a;\n      return \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(a, \")\");\n    }\n  }, {\n    key: \"hex\",\n    get: function get() {\n      return tinycolor(this.states).toHexString();\n    }\n  }, {\n    key: \"hex8\",\n    get: function get() {\n      return tinycolor(this.states).toHex8String();\n    }\n  }, {\n    key: \"cmyk\",\n    get: function get() {\n      var _this$getCmyk = this.getCmyk(),\n        c = _this$getCmyk.c,\n        m = _this$getCmyk.m,\n        y = _this$getCmyk.y,\n        k = _this$getCmyk.k;\n      return \"cmyk(\".concat(c, \", \").concat(m, \", \").concat(y, \", \").concat(k, \")\");\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      if (this.isGradient) {\n        return this.linearGradient;\n      }\n      return this.rgba;\n    }\n  }, {\n    key: \"linearGradient\",\n    get: function get() {\n      var gradientColors = this.gradientColors,\n        gradientDegree = this.gradientDegree;\n      return gradientColors2string({\n        points: gradientColors,\n        degree: gradientDegree\n      });\n    }\n  }, {\n    key: \"gradientColors\",\n    get: function get() {\n      return this.gradientStates.colors;\n    },\n    set: function set(colors) {\n      this.gradientStates.colors = colors;\n      this.gradientStates.css = this.linearGradient;\n    }\n  }, {\n    key: \"gradientSelectedId\",\n    get: function get() {\n      return this.gradientStates.selectedId;\n    },\n    set: function set(id) {\n      var _this$gradientSelecte2;\n      if (id === this.gradientSelectedId) {\n        return;\n      }\n      this.gradientStates.selectedId = id;\n      this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);\n    }\n  }, {\n    key: \"gradientDegree\",\n    get: function get() {\n      return this.gradientStates.degree;\n    },\n    set: function set(degree) {\n      this.gradientStates.degree = Math.max(0, Math.min(360, degree));\n      this.gradientStates.css = this.linearGradient;\n    }\n  }, {\n    key: \"gradientSelectedPoint\",\n    get: function get() {\n      var gradientColors = this.gradientColors,\n        gradientSelectedId = this.gradientSelectedId;\n      return gradientColors.find(function (color) {\n        return color.id === gradientSelectedId;\n      });\n    }\n  }, {\n    key: \"getFormatsColorMap\",\n    value: function getFormatsColorMap() {\n      return {\n        HEX: this.hex,\n        CMYK: this.cmyk,\n        RGB: this.rgb,\n        RGBA: this.rgba,\n        HSL: this.hsl,\n        HSLA: this.hsla,\n        HSV: this.hsv,\n        HSVA: this.hsva,\n        CSS: this.css,\n        HEX8: this.hex8\n      };\n    }\n  }, {\n    key: \"updateCurrentGradientColor\",\n    value: function updateCurrentGradientColor() {\n      var isGradient = this.isGradient,\n        gradientColors = this.gradientColors,\n        gradientSelectedId = this.gradientSelectedId;\n      var length = gradientColors.length;\n      var current = this.gradientSelectedPoint;\n      if (!isGradient || length === 0 || !current) {\n        return false;\n      }\n      var index = gradientColors.findIndex(function (color) {\n        return color.id === gradientSelectedId;\n      });\n      var newColor = _objectSpread(_objectSpread({}, current), {}, {\n        color: this.rgba\n      });\n      gradientColors.splice(index, 1, newColor);\n      this.gradientColors = gradientColors.slice();\n      return this;\n    }\n  }, {\n    key: \"updateStates\",\n    value: function updateStates(input) {\n      var color = tinycolor(cmykInputToColor(input));\n      var hsva = color.toHsv();\n      this.states = hsva;\n    }\n  }, {\n    key: \"getRgba\",\n    value: function getRgba() {\n      var _hsv2rgba3 = hsv2rgba(this.states),\n        r = _hsv2rgba3.r,\n        g = _hsv2rgba3.g,\n        b = _hsv2rgba3.b,\n        a = _hsv2rgba3.a;\n      return {\n        r: mathRound(r),\n        g: mathRound(g),\n        b: mathRound(b),\n        a: a\n      };\n    }\n  }, {\n    key: \"getCmyk\",\n    value: function getCmyk() {\n      var _this$getRgba = this.getRgba(),\n        r = _this$getRgba.r,\n        g = _this$getRgba.g,\n        b = _this$getRgba.b;\n      var _rgb2cmyk = rgb2cmyk(r, g, b),\n        _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),\n        c = _rgb2cmyk2[0],\n        m = _rgb2cmyk2[1],\n        y = _rgb2cmyk2[2],\n        k = _rgb2cmyk2[3];\n      return {\n        c: mathRound(c * 100),\n        m: mathRound(m * 100),\n        y: mathRound(y * 100),\n        k: mathRound(k * 100)\n      };\n    }\n  }, {\n    key: \"getHsva\",\n    value: function getHsva() {\n      var _hsv2hsva = hsv2hsva(this.states),\n        h = _hsv2hsva.h,\n        s = _hsv2hsva.s,\n        v = _hsv2hsva.v,\n        a = _hsv2hsva.a;\n      h = mathRound(h);\n      s = mathRound(s * 100);\n      v = mathRound(v * 100);\n      a *= 1;\n      return {\n        h: h,\n        s: s,\n        v: v,\n        a: a\n      };\n    }\n  }, {\n    key: \"getHsla\",\n    value: function getHsla() {\n      var _hsv2hsla = hsv2hsla(this.states),\n        h = _hsv2hsla.h,\n        s = _hsv2hsla.s,\n        l = _hsv2hsla.l,\n        a = _hsv2hsla.a;\n      h = mathRound(h);\n      s = mathRound(s * 100);\n      l = mathRound(l * 100);\n      a *= 1;\n      return {\n        h: h,\n        s: s,\n        l: l,\n        a: a\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      return tinycolor.equals(this.rgba, color);\n    }\n  }], [{\n    key: \"isValid\",\n    value: function isValid(color) {\n      if (parseGradientString(color)) {\n        return true;\n      }\n      return tinycolor(color).isValid();\n    }\n  }, {\n    key: \"hsva2color\",\n    value: function hsva2color(h, s, v, a) {\n      return tinycolor({\n        h: h,\n        s: s,\n        v: v,\n        a: a\n      }).toHsvString();\n    }\n  }, {\n    key: \"hsla2color\",\n    value: function hsla2color(h, s, l, a) {\n      return tinycolor({\n        h: h,\n        s: s,\n        l: l,\n        a: a\n      }).toHslString();\n    }\n  }, {\n    key: \"rgba2color\",\n    value: function rgba2color(r, g, b, a) {\n      return tinycolor({\n        r: r,\n        g: g,\n        b: b,\n        a: a\n      }).toHsvString();\n    }\n  }, {\n    key: \"hex2color\",\n    value: function hex2color(hex, a) {\n      var color = tinycolor(hex);\n      color.setAlpha(a);\n      return color.toHexString();\n    }\n  }, {\n    key: \"object2color\",\n    value: function object2color(object, format) {\n      if (format === \"CMYK\") {\n        var c = object.c,\n          m = object.m,\n          y = object.y,\n          k = object.k;\n        return \"cmyk(\".concat(c, \", \").concat(m, \", \").concat(y, \", \").concat(k, \")\");\n      }\n      var color = tinycolor(object, {\n        format: format\n      });\n      return color.toRgbString();\n    }\n  }]);\n}();\n_Color = Color;\n_defineProperty(Color, \"isGradientColor\", function (input) {\n  return !!isGradientColor(input);\n});\n_defineProperty(Color, \"compare\", function (color1, color2) {\n  var isGradientColor1 = _Color.isGradientColor(color1);\n  var isGradientColor2 = _Color.isGradientColor(color2);\n  if (isGradientColor1 && isGradientColor2) {\n    var gradientColor1 = gradientColors2string(parseGradientString(color1));\n    var gradientColor2 = gradientColors2string(parseGradientString(color2));\n    return gradientColor1 === gradientColor2;\n  }\n  if (!isGradientColor1 && !isGradientColor2) {\n    return tinycolor.equals(color1, color2);\n  }\n  return false;\n});\nvar COLOR_OBJECT_OUTPUT_KEYS = [\"alpha\", \"css\", \"hex\", \"hex8\", \"hsl\", \"hsla\", \"hsv\", \"hsva\", \"rgb\", \"rgba\", \"saturation\", \"value\", \"isGradient\"];\nvar getColorObject = function getColorObject(color) {\n  if (!color) {\n    return null;\n  }\n  var colorObject = /* @__PURE__ */Object.create(null);\n  COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {\n    return colorObject[key] = color[key];\n  });\n  if (color.isGradient) {\n    colorObject.linearGradient = color.linearGradient;\n  }\n  return colorObject;\n};\nexport { Color, Color as default, genGradientPoint, genId, getColorObject, getColorWithoutAlpha, gradientColors2string };","map":{"version":3,"names":["mathRound","Math","round","hsv2rgba","states","tinycolor","toRgb","hsv2hsva","toHsv","hsv2hsla","toHsl","gradientColors2string","object","points","degree","colorsStop","sort","pA","pB","left","map","p","concat","color","join","getColorWithoutAlpha","setAlpha","toHexString","genId","random","toString","genGradientPoint","id","Color","input","_classCallCheck","_defineProperty","s","v","h","a","colors","selectedId","css","update","_createClass","key","value","originColor","gradientColors","parseGradientString","isGradient","colorHsv","updateCurrentGradientColor","colorInput","_points$","_this$gradientSelecte","c","gradientStates","linearGradient","gradientSelectedPoint","updateStates","get","set","max","min","_hsv2rgba","r","g","b","_hsv2rgba2","_this$getHsva","getHsva","_this$getHsva2","_this$getHsla","getHsla","l","_this$getHsla2","toHex8String","_this$getCmyk","getCmyk","m","y","k","rgba","gradientDegree","_this$gradientSelecte2","gradientSelectedId","find","getFormatsColorMap","HEX","hex","CMYK","cmyk","RGB","rgb","RGBA","HSL","hsl","HSLA","hsla","HSV","hsv","HSVA","hsva","CSS","HEX8","hex8","length","current","index","findIndex","newColor","_objectSpread","splice","slice","cmykInputToColor","getRgba","_hsv2rgba3","_this$getRgba","_rgb2cmyk","rgb2cmyk","_rgb2cmyk2","_slicedToArray","_hsv2hsva","_hsv2hsla","equals","isValid","hsva2color","toHsvString","hsla2color","toHslString","rgba2color","hex2color","object2color","format","toRgbString","_Color","isGradientColor","color1","color2","isGradientColor1","isGradientColor2","gradientColor1","gradientColor2","COLOR_OBJECT_OUTPUT_KEYS","getColorObject","colorObject","Object","create","forEach"],"sources":["../../../../src/_common/js/color-picker/color.ts"],"sourcesContent":["import tinyColor from 'tinycolor2';\nimport { cmykInputToColor, rgb2cmyk } from './cmyk';\nimport {\n  parseGradientString, GradientColors, GradientColorPoint, isGradientColor\n} from './gradient';\n\nexport interface ColorObject {\n  alpha: number;\n  css: string;\n  hex: string;\n  hex8: string;\n  hsl: string;\n  hsla: string;\n  hsv: string;\n  hsva: string;\n  rgb: string;\n  rgba: string;\n  saturation: number;\n  value: number;\n  isGradient: boolean;\n  linearGradient?: string;\n}\n\ninterface ColorStates {\n  s: number;\n  v: number;\n  h: number;\n  a: number;\n}\n\ninterface GradientStates {\n  colors: GradientColorPoint[];\n  degree: number;\n  selectedId: string;\n  css?: string;\n}\n\nconst mathRound = Math.round;\nconst hsv2rgba = (states: ColorStates): tinyColor.ColorFormats.RGBA => tinyColor(states).toRgb();\nconst hsv2hsva = (states: ColorStates): tinyColor.ColorFormats.HSVA => tinyColor(states).toHsv();\nconst hsv2hsla = (states: ColorStates): tinyColor.ColorFormats.HSLA => tinyColor(states).toHsl();\n\n/**\n * 将渐变对象转换成字符串\n * @param object\n * @returns\n */\nexport const gradientColors2string = (object: GradientColors): string => {\n  const { points, degree } = object;\n  const colorsStop = points\n    .sort((pA, pB) => pA.left - pB.left)\n    .map((p) => `${p.color} ${Math.round(p.left * 100) / 100}%`);\n\n  return `linear-gradient(${degree}deg,${colorsStop.join(',')})`;\n};\n\n/**\n * 去除颜色的透明度\n * @param color\n * @returns\n */\nexport const getColorWithoutAlpha = (color: string) => tinyColor(color).setAlpha(1).toHexString();\n\n// 生成一个随机ID\nexport const genId = () => (1 + Math.random() * 4294967295).toString(16);\n\n/**\n * 生成一个渐变颜色\n * @param left\n * @param color\n * @returns\n */\nexport const genGradientPoint = (left: number, color: string): GradientColorPoint => ({\n  id: genId(),\n  left,\n  color,\n});\n\nexport class Color {\n  states: ColorStates = {\n    s: 100,\n    v: 100,\n    h: 100,\n    a: 1,\n  };\n\n  originColor: string;\n\n  isGradient: boolean;\n\n  gradientStates: GradientStates = {\n    colors: [],\n    degree: 0,\n    selectedId: null,\n    css: '',\n  };\n\n  constructor(input: string) {\n    this.update(input);\n  }\n\n  update(input: string) {\n    if (input === this.originColor) {\n      return;\n    }\n    const gradientColors = parseGradientString(input);\n    if (this.isGradient && !gradientColors) {\n      // 处理gradient模式下切换不同格式时的交互问题，输入的不是渐变字符串才使用当前处理\n      const colorHsv = tinyColor(input).toHsv();\n      this.states = colorHsv;\n      this.updateCurrentGradientColor();\n      return;\n    }\n    this.originColor = input;\n    this.isGradient = false;\n    let colorInput = input;\n    if (gradientColors) {\n      this.isGradient = true;\n      const object = gradientColors as GradientColors;\n      const points = object.points.map((c) => genGradientPoint(c.left, c.color));\n      this.gradientStates = {\n        colors: points,\n        degree: object.degree,\n        selectedId: points[0]?.id || null,\n      };\n      this.gradientStates.css = this.linearGradient;\n      colorInput = this.gradientSelectedPoint?.color;\n    }\n\n    this.updateStates(colorInput);\n  }\n\n  get saturation() {\n    return this.states.s;\n  }\n\n  set saturation(value) {\n    this.states.s = Math.max(0, Math.min(100, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get value() {\n    return this.states.v;\n  }\n\n  set value(value) {\n    this.states.v = Math.max(0, Math.min(100, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get hue() {\n    return this.states.h;\n  }\n\n  set hue(value) {\n    this.states.h = Math.max(0, Math.min(360, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get alpha() {\n    return this.states.a;\n  }\n\n  set alpha(value) {\n    this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));\n    this.updateCurrentGradientColor();\n  }\n\n  get rgb() {\n    const { r, g, b } = hsv2rgba(this.states);\n    return `rgb(${mathRound(r)}, ${mathRound(g)}, ${mathRound(b)})`;\n  }\n\n  get rgba() {\n    const {\n      r, g, b, a\n    } = hsv2rgba(this.states);\n    return `rgba(${mathRound(r)}, ${mathRound(g)}, ${mathRound(b)}, ${a})`;\n  }\n\n  get hsv() {\n    const { h, s, v } = this.getHsva();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  get hsva() {\n    const {\n      h, s, v, a\n    } = this.getHsva();\n    return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n  }\n\n  get hsl() {\n    const { h, s, l } = this.getHsla();\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  get hsla() {\n    const {\n      h, s, l, a\n    } = this.getHsla();\n    return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  }\n\n  get hex() {\n    return tinyColor(this.states).toHexString();\n  }\n\n  get hex8() {\n    return tinyColor(this.states).toHex8String();\n  }\n\n  get cmyk() {\n    const {\n      c, m, y, k\n    } = this.getCmyk();\n    return `cmyk(${c}, ${m}, ${y}, ${k})`;\n  }\n\n  get css() {\n    if (this.isGradient) {\n      return this.linearGradient;\n    }\n    return this.rgba;\n  }\n\n  get linearGradient() {\n    const { gradientColors, gradientDegree } = this;\n    return gradientColors2string({\n      points: gradientColors,\n      degree: gradientDegree,\n    });\n  }\n\n  get gradientColors() {\n    return this.gradientStates.colors;\n  }\n\n  set gradientColors(colors: GradientColorPoint[]) {\n    this.gradientStates.colors = colors;\n    this.gradientStates.css = this.linearGradient;\n  }\n\n  get gradientSelectedId() {\n    return this.gradientStates.selectedId;\n  }\n\n  set gradientSelectedId(id: string) {\n    if (id === this.gradientSelectedId) {\n      return;\n    }\n    this.gradientStates.selectedId = id;\n    this.updateStates(this.gradientSelectedPoint?.color);\n  }\n\n  get gradientDegree() {\n    return this.gradientStates.degree;\n  }\n\n  set gradientDegree(degree: number) {\n    this.gradientStates.degree = Math.max(0, Math.min(360, degree));\n    this.gradientStates.css = this.linearGradient;\n  }\n\n  get gradientSelectedPoint() {\n    const { gradientColors, gradientSelectedId } = this;\n    return gradientColors.find((color) => color.id === gradientSelectedId);\n  }\n\n  getFormatsColorMap() {\n    return {\n      HEX: this.hex,\n      CMYK: this.cmyk,\n      RGB: this.rgb,\n      RGBA: this.rgba,\n      HSL: this.hsl,\n      HSLA: this.hsla,\n      HSV: this.hsv,\n      HSVA: this.hsva,\n      CSS: this.css,\n      HEX8: this.hex8,\n    };\n  }\n\n  updateCurrentGradientColor() {\n    const { isGradient, gradientColors, gradientSelectedId } = this;\n    const { length } = gradientColors;\n    const current = this.gradientSelectedPoint;\n    if (!isGradient || length === 0 || !current) {\n      return false;\n    }\n    const index = gradientColors.findIndex((color) => color.id === gradientSelectedId);\n    const newColor = {\n      ...current,\n      color: this.rgba,\n    };\n    gradientColors.splice(index, 1, newColor);\n    this.gradientColors = gradientColors.slice();\n    return this;\n  }\n\n  updateStates(input: string) {\n    const color = tinyColor(cmykInputToColor(input));\n    const hsva = color.toHsv();\n    this.states = hsva;\n  }\n\n  getRgba() {\n    const {\n      r, g, b, a\n    } = hsv2rgba(this.states);\n    return {\n      r: mathRound(r),\n      g: mathRound(g),\n      b: mathRound(b),\n      a,\n    };\n  }\n\n  getCmyk() {\n    const { r, g, b } = this.getRgba();\n    const [c, m, y, k] = rgb2cmyk(r, g, b);\n    return {\n      c: mathRound(c * 100),\n      m: mathRound(m * 100),\n      y: mathRound(y * 100),\n      k: mathRound(k * 100),\n    };\n  }\n\n  getHsva(): tinyColor.ColorFormats.HSVA {\n    let {\n      h, s, v, a\n    } = hsv2hsva(this.states);\n    h = mathRound(h);\n    s = mathRound(s * 100);\n    v = mathRound(v * 100);\n    a *= 1;\n    return {\n      h,\n      s,\n      v,\n      a,\n    };\n  }\n\n  getHsla(): tinyColor.ColorFormats.HSLA {\n    let {\n      h, s, l, a\n    } = hsv2hsla(this.states);\n    h = mathRound(h);\n    s = mathRound(s * 100);\n    l = mathRound(l * 100);\n    a *= 1;\n    return {\n      h,\n      s,\n      l,\n      a,\n    };\n  }\n\n  /**\n   * 判断输入色是否与当前色相同\n   * @param color\n   * @returns\n   */\n  equals(color: string): boolean {\n    return tinyColor.equals(this.rgba, color);\n  }\n\n  /**\n   * 校验输入色是否是一个有效颜色\n   * @param color\n   * @returns\n   */\n  static isValid(color: string): boolean {\n    if (parseGradientString(color)) {\n      return true;\n    }\n    return tinyColor(color).isValid();\n  }\n\n  static hsva2color(h: number, s: number, v: number, a: number) {\n    return tinyColor({\n      h, s, v, a\n    }).toHsvString();\n  }\n\n  static hsla2color(h: number, s: number, l: number, a: number) {\n    return tinyColor({\n      h, s, l, a\n    }).toHslString();\n  }\n\n  static rgba2color(r: number, g: number, b: number, a: number) {\n    return tinyColor({\n      r, g, b, a\n    }).toHsvString();\n  }\n\n  static hex2color(hex: string, a: number) {\n    const color = tinyColor(hex);\n    color.setAlpha(a);\n    return color.toHexString();\n  }\n\n  /**\n   * 对象转颜色字符串\n   * @param object\n   * @param format\n   * @returns\n   */\n  static object2color(object: any, format: string) {\n    if (format === 'CMYK') {\n      const {\n        c, m, y, k\n      } = object;\n      return `cmyk(${c}, ${m}, ${y}, ${k})`;\n    }\n    const color = tinyColor(object, {\n      format,\n    });\n    return color.toRgbString();\n  }\n\n  /**\n   * 是否是渐变色\n   * @param input\n   * @returns\n   */\n  static isGradientColor = (input: string) => !!isGradientColor(input);\n\n  /**\n   * 比较两个颜色是否相同\n   * @param color1\n   * @param color2\n   * @returns\n   */\n  static compare = (color1: string, color2: string): boolean => {\n    const isGradientColor1 = Color.isGradientColor(color1);\n    const isGradientColor2 = Color.isGradientColor(color2);\n    if (isGradientColor1 && isGradientColor2) {\n      const gradientColor1 = gradientColors2string(parseGradientString(color1) as GradientColors);\n      const gradientColor2 = gradientColors2string(parseGradientString(color2) as GradientColors);\n      return gradientColor1 === gradientColor2;\n    }\n    if (!isGradientColor1 && !isGradientColor2) {\n      return tinyColor.equals(color1, color2);\n    }\n    return false;\n  };\n}\n\nconst COLOR_OBJECT_OUTPUT_KEYS = [\n  'alpha',\n  'css',\n  'hex',\n  'hex8',\n  'hsl',\n  'hsla',\n  'hsv',\n  'hsva',\n  'rgb',\n  'rgba',\n  'saturation',\n  'value',\n  'isGradient',\n];\n\n/**\n * 获取对外输出的color对象\n * @param color\n * @returns\n */\nexport const getColorObject = (color: Color): ColorObject => {\n  if (!color) {\n    return null;\n  }\n  const colorObject = Object.create(null);\n  // eslint-disable-next-line no-return-assign\n  COLOR_OBJECT_OUTPUT_KEYS.forEach((key) => (colorObject[key] = color[key]));\n  if (color.isGradient) {\n    colorObject.linearGradient = color.linearGradient;\n  }\n  return colorObject;\n};\n\nexport default Color;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}