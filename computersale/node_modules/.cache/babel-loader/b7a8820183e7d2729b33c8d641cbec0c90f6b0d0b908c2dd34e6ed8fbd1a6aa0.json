{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { ref, provide, onUpdated } from 'vue';\nvar TDisplayNoneElementRefresh = \"t-display-none-element-refresh\";\nfunction useDestroyOnClose() {\n  var refresh = ref(0);\n  provide(TDisplayNoneElementRefresh, refresh);\n  onUpdated(function () {\n    refresh.value += 1;\n  });\n}\nexport { TDisplayNoneElementRefresh, useDestroyOnClose as default };","map":{"version":3,"names":["TDisplayNoneElementRefresh","useDestroyOnClose","refresh","ref","provide","onUpdated","value"],"sources":["../../src/hooks/useDestroyOnClose.ts"],"sourcesContent":["import { ref, provide, onUpdated } from 'vue';\n\nexport const TDisplayNoneElementRefresh = 't-display-none-element-refresh';\n\n// destroyOnClose=false 时，父元素为 display: none，此时的子元素无法获取到自身元素的任何宽度\n// 因此，需在父元素 display: none 发生变化时主动更新子元素\nexport default function useDestroyOnClose() {\n  const refresh = ref(0);\n  provide(TDisplayNoneElementRefresh, refresh);\n  onUpdated(() => {\n    refresh.value += 1;\n  });\n}\n"],"mappings":";;;;;;;AAEO,IAAMA,0BAA6B;AAI1C,SAAwBC,iBAAoBA,CAAA;EACpC,IAAAC,OAAA,GAAUC,GAAA,CAAI,CAAC;EACrBC,OAAA,CAAQJ,0BAAA,EAA4BE,OAAO;EAC3CG,SAAA,CAAU,YAAM;IACdH,OAAA,CAAQI,KAAS;EACnB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}