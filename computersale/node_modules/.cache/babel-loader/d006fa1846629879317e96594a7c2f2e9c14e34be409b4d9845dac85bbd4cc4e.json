{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _defineProperty } from '../_chunks/dep-fa52aa21.mjs';\nimport { c as cloneDeep_1 } from '../_chunks/dep-bb899bfd.mjs';\nimport { i as isUndefined_1 } from '../_chunks/dep-58a62202.mjs';\nimport { i as isArray_1 } from '../_chunks/dep-eae2a67e.mjs';\nexport { emitEvent } from '../utils/event.mjs';\nimport '../_chunks/dep-4659d73b.mjs';\nimport '../_chunks/dep-eca422c3.mjs';\nimport '../_chunks/dep-5922c8f3.mjs';\nimport '../_chunks/dep-92f86d1d.mjs';\nimport '../_chunks/dep-6ab5363f.mjs';\nimport '../_chunks/dep-6dc3d0e1.mjs';\nimport '../_chunks/dep-06dcbf4c.mjs';\nimport '../_chunks/dep-bf7257e7.mjs';\nimport '../_chunks/dep-2b09875b.mjs';\nimport '../_chunks/dep-cda4f568.mjs';\nimport '../_chunks/dep-76958824.mjs';\nimport '../_chunks/dep-e9841b9e.mjs';\nimport '../_chunks/dep-1a4bb2f2.mjs';\nimport '../_chunks/dep-cc8ebcde.mjs';\nimport '../_chunks/dep-29ef8419.mjs';\nimport '../_chunks/dep-f5579c03.mjs';\nimport '../_chunks/dep-49aeee3c.mjs';\nimport '../_chunks/dep-b5bf85f5.mjs';\nimport '../_chunks/dep-3c65fae8.mjs';\nimport '../_chunks/dep-626c497d.mjs';\nimport '../_chunks/dep-ec0bbd9f.mjs';\nimport '../_chunks/dep-1b78414a.mjs';\nimport '../_chunks/dep-d84f19b3.mjs';\nimport '../_chunks/dep-732f0b7d.mjs';\nimport '../_chunks/dep-03a7fb6c.mjs';\nimport '../utils/helper.mjs';\nimport '../_chunks/dep-5d3f7c0e.mjs';\nimport '../_chunks/dep-5efe53d1.mjs';\nimport '../_chunks/dep-593f2b67.mjs';\nimport '../_chunks/dep-03ad9cda.mjs';\nimport '../_chunks/dep-7932c2e8.mjs';\nimport '../_chunks/dep-ab4bb9b8.mjs';\nimport '../_chunks/dep-d8a34055.mjs';\nimport '../_chunks/dep-2f6e28a0.mjs';\nimport '../_chunks/dep-5a17bf21.mjs';\nimport '../_chunks/dep-73384992.mjs';\nimport '../_chunks/dep-889e457b.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar TRANSFER_NAME = \"TTransfer\";\nvar SOURCE = \"source\";\nvar TARGET = \"target\";\nfunction findTopNode(vm) {\n  if (vm.$options.name === \"t-transfer\") {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\nfunction getTransferListOption(prop) {\n  if (isArray_1(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1]\n    };\n  }\n  return {\n    source: prop,\n    target: prop\n  };\n}\nfunction getDataValues(data, filterValues) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$isTreeMode = _ref.isTreeMode,\n    isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,\n    _ref$include = _ref.include,\n    include = _ref$include === void 0 ? true : _ref$include,\n    _ref$remainValue = _ref.remainValue,\n    remainValue = _ref$remainValue === void 0 ? [] : _ref$remainValue;\n  if (isTreeMode) {\n    var result = [];\n    if (data) {\n      for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        var isInclude = filterValues.includes(item.value) && !item.disabled;\n        if (!include && isInclude) {\n          continue;\n        }\n        if (item.children && item.children.length > 0) {\n          var childResult = getDataValues(item.children, filterValues, {\n            isTreeMode: isTreeMode,\n            include: include\n          });\n          result = result.concat(childResult);\n        } else if (include && isInclude || !include && !isInclude) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data.filter(function (item) {\n    if (!item) return false;\n    var isInclude = filterValues.includes(item.value);\n    return (include && isInclude || !include && !isInclude) && (!item.disabled || remainValue.includes(item.value));\n  }).map(function (item) {\n    return item.value;\n  });\n}\nfunction getTransferData(data, keys) {\n  var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var list = data.map(function (transferDataItem, index) {\n    var _transferDataItem$dis;\n    var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || \"label\";\n    var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || \"value\";\n    var disabledKey = (keys === null || keys === void 0 ? void 0 : keys.disabled) || \"disabled\";\n    if (isUndefined_1(transferDataItem[labelKey])) {\n      throw new Error(\"\".concat(labelKey, \" is not in DataOption \").concat(JSON.stringify(transferDataItem)));\n    }\n    if (isUndefined_1(transferDataItem[valueKey])) {\n      throw new Error(\"\".concat(valueKey, \" is not in DataOption \").concat(JSON.stringify(transferDataItem)));\n    }\n    var result = {\n      label: transferDataItem[labelKey],\n      value: transferDataItem[valueKey],\n      key: \"key__value_\".concat(transferDataItem[valueKey], \"_index_\").concat(index),\n      disabled: (_transferDataItem$dis = transferDataItem[disabledKey]) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,\n      data: transferDataItem\n    };\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\nfunction isAllNodeValid(data, filterValues, needMatch) {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\nfunction isTreeNodeValid(data, filterValues, needMatch) {\n  var _data$children;\n  if (!data) return !needMatch;\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  if ((_data$children = data.children) !== null && _data$children !== void 0 && _data$children.length) {\n    return data.children.some(function (item) {\n      return isTreeNodeValid(item, filterValues, needMatch);\n    });\n  }\n  return !needMatch;\n}\nfunction cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {\n  sourceTree.forEach(function (item) {\n    var newNode;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      newNode = cloneDeep_1(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      newNode = _objectSpread({}, item);\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\nfunction filterTransferData(data, filterValues) {\n  var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!isTreeMode) {\n    if (needMatch) {\n      return filterValues.map(function (value) {\n        return data.find(function (item) {\n          return item.value === value;\n        });\n      }).filter(function (item) {\n        return !!item;\n      });\n    }\n    return data.filter(function (item) {\n      var isMatch = filterValues.includes(item.value);\n      return !isMatch;\n    });\n  }\n  var result = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\nfunction getLefCount(nodes) {\n  var total = 0;\n  nodes.forEach(function (child) {\n    if (child.children && child.children.length > 0) {\n      total += getLefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\nexport { SOURCE, TARGET, TRANSFER_NAME, cloneTreeWithFilter, filterTransferData, findTopNode, getDataValues, getLefCount, getTransferData, getTransferListOption };","map":{"version":3,"names":["TRANSFER_NAME","SOURCE","TARGET","findTopNode","vm","$options","name","$parent","getTransferListOption","prop","isArray_1","source","target","getDataValues","data","filterValues","_ref","arguments","length","undefined","_ref$isTreeMode","isTreeMode","_ref$include","include","_ref$remainValue","remainValue","result","i","item","isInclude","includes","value","disabled","children","childResult","concat","push","filter","map","getTransferData","keys","list","transferDataItem","index","_transferDataItem$dis","labelKey","label","valueKey","disabledKey","isUndefined_1","Error","JSON","stringify","key","isAllNodeValid","needMatch","isTreeNodeValid","_data$children","some","cloneTreeWithFilter","sourceTree","targetTree","forEach","newNode","cloneDeep_1","_objectSpread","filterTransferData","find","isMatch","getLefCount","nodes","total","child"],"sources":["../../src/transfer/utils.ts"],"sourcesContent":["import { ComponentPublicInstance } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isUndefined from 'lodash/isUndefined';\nimport isArray from 'lodash/isArray';\n\nimport { TransferListOptionBase, TransferItemOption, TdTransferProps, TransferValue, DataOption } from './interface';\n\nexport { emitEvent } from '../utils/event';\n\nexport const TRANSFER_NAME = 'TTransfer';\n\nexport const SOURCE = 'source';\nexport const TARGET = 'target';\n\ninterface TreeNode {\n  children?: Array<TreeNode>;\n}\n\nfunction findTopNode(vm: ComponentPublicInstance): ComponentPublicInstance {\n  // 找到t-transfer这层父节点\n  if (vm.$options.name === 't-transfer') {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\n\nfunction getTransferListOption<T>(prop: T | Array<T>): TransferListOptionBase<T> {\n  if (isArray(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1],\n    };\n  }\n  return {\n    source: prop,\n    target: prop,\n  };\n}\n\nfunction getDataValues(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  {\n    isTreeMode = false,\n    include = true, // true=保留filterValues，false=删除filterValues中元素\n    remainValue = [] as Array<TransferValue>,\n  } = {},\n): Array<TransferValue> {\n  // 用于处理 tree 组件这种数据结构是树形的\n  if (isTreeMode) {\n    let result: Array<TransferValue> = [];\n    if (data) {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const isInclude = filterValues.includes(item.value) && !item.disabled;\n        if (!include && isInclude) {\n          continue; // 排除模式下子元素一律排除\n        }\n\n        // 只找叶子节点\n        if (item.children && item.children.length > 0) {\n          const childResult = getDataValues(item.children, filterValues, {\n            isTreeMode,\n            include,\n          });\n          result = result.concat(childResult);\n        } else if ((include && isInclude) || (!include && !isInclude)) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data\n    .filter((item) => {\n      if (!item) return false;\n      const isInclude = filterValues.includes(item.value);\n      return (\n        ((include && isInclude) || (!include && !isInclude)) && (!item.disabled || remainValue.includes(item.value))\n      );\n    })\n    .map((item) => item.value);\n}\n\nfunction getTransferData(\n  data: Array<DataOption>,\n  keys: TdTransferProps['keys'],\n  isTreeMode = false,\n): Array<TransferItemOption> {\n  const list: Array<TransferItemOption> = data.map((transferDataItem, index): TransferItemOption => {\n    const labelKey = keys?.label || 'label';\n    const valueKey = keys?.value || 'value';\n    const disabledKey = keys?.disabled || 'disabled';\n    if (isUndefined(transferDataItem[labelKey])) {\n      throw new Error(`${labelKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    if (isUndefined(transferDataItem[valueKey])) {\n      throw new Error(`${valueKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    const result: TransferItemOption = {\n      label: transferDataItem[labelKey] as string,\n      value: transferDataItem[valueKey],\n      key: `key__value_${transferDataItem[valueKey]}_index_${index}`,\n      disabled: transferDataItem[disabledKey] ?? false,\n      data: transferDataItem,\n    };\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\n\nfunction isAllNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\n\nfunction isTreeNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (!data) return !needMatch;\n\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n\n  if (data.children?.length) {\n    return data.children.some((item) => isTreeNodeValid(item, filterValues, needMatch));\n  }\n  return !needMatch;\n}\n\n// 复制树并过滤节点\nfunction cloneTreeWithFilter(\n  sourceTree: TransferItemOption[],\n  targetTree: TransferItemOption[],\n  filterValues: Array<TransferValue>,\n  needMatch: boolean,\n) {\n  sourceTree.forEach((item) => {\n    let newNode: TransferItemOption;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      // 如果当前节点直接命中，则复制所有子节点\n      newNode = cloneDeep<TransferItemOption>(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      // 如果有合法子节点，就复制这个节点\n      newNode = {\n        ...item,\n      };\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\n\n// 过滤列表，如果是树的话需要保持树的结构\nfunction filterTransferData(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  needMatch = true,\n  isTreeMode = false,\n) {\n  if (!isTreeMode) {\n    if (needMatch) {\n      // 正向过滤。要保持filterValues顺序\n      return filterValues.map((value) => data.find((item) => item.value === value)).filter((item) => !!item);\n    }\n    // 反向过滤\n    return data.filter((item) => {\n      const isMatch = filterValues.includes(item.value);\n      return !isMatch;\n    });\n  }\n\n  const result: Array<TransferItemOption> = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\n\n// 获取树节点的叶子数量\nfunction getLefCount(nodes: Array<TreeNode>): number {\n  let total = 0;\n  nodes.forEach((child) => {\n    if (child.children && child.children.length > 0) {\n      total += getLefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nexport {\n  findTopNode,\n  getTransferListOption,\n  getDataValues,\n  getTransferData,\n  cloneTreeWithFilter,\n  filterTransferData,\n  getLefCount,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}