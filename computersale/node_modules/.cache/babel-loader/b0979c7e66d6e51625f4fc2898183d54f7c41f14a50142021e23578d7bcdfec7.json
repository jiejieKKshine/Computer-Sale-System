{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport './dep-eca422c3.mjs';\nimport { a as _copyObject, k as keysIn_1, b as _cloneBuffer, c as _cloneTypedArray, d as _copyArray, e as _initCloneObject, _ as _Stack } from './dep-92f86d1d.mjs';\nimport { _ as _baseAssignValue } from './dep-49aeee3c.mjs';\nimport { e as eq_1 } from './dep-e9841b9e.mjs';\nimport { i as isArguments_1 } from './dep-3c65fae8.mjs';\nimport { i as isArray_1 } from './dep-eae2a67e.mjs';\nimport './dep-626c497d.mjs';\nimport { i as isArrayLikeObject_1, _ as _baseRest } from './dep-e065dc25.mjs';\nimport { i as isBuffer$1, a as isTypedArray_1 } from './dep-1a4bb2f2.mjs';\nimport { i as isFunction_1 } from './dep-06dcbf4c.mjs';\nimport './dep-76958824.mjs';\nimport { i as isObject_1 } from './dep-2b09875b.mjs';\nimport './dep-cda4f568.mjs';\nimport { i as isPlainObject_1 } from './dep-1725b1c7.mjs';\nimport { _ as _isIterateeCall } from './dep-532409c5.mjs';\nimport defaultConfig from '../_common/js/global-config/default-config.mjs';\nimport zhCn from '../_common/js/global-config/locale/zh_CN.mjs';\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor$1(fromRight) {\n  return function (object, iteratee, keysFunc) {\n    var index = -1,\n      iterable = Object(object),\n      props = keysFunc(object),\n      length = props.length;\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\nvar _createBaseFor = createBaseFor$1;\nvar createBaseFor = _createBaseFor;\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor$1 = createBaseFor();\nvar _baseFor = baseFor$1;\nvar baseAssignValue = _baseAssignValue,\n  eq = eq_1;\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue$2(object, key, value) {\n  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n    baseAssignValue(object, key, value);\n  }\n}\nvar _assignMergeValue = assignMergeValue$2;\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet$2(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n  if (key == '__proto__') {\n    return;\n  }\n  return object[key];\n}\nvar _safeGet = safeGet$2;\nvar copyObject = _copyObject,\n  keysIn$1 = keysIn_1;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject$1(value) {\n  return copyObject(value, keysIn$1(value));\n}\nvar toPlainObject_1 = toPlainObject$1;\nvar assignMergeValue$1 = _assignMergeValue,\n  cloneBuffer = _cloneBuffer.exports,\n  cloneTypedArray = _cloneTypedArray,\n  copyArray = _copyArray,\n  initCloneObject = _initCloneObject,\n  isArguments = isArguments_1,\n  isArray = isArray_1,\n  isArrayLikeObject = isArrayLikeObject_1,\n  isBuffer = isBuffer$1.exports,\n  isFunction = isFunction_1,\n  isObject$1 = isObject_1,\n  isPlainObject = isPlainObject_1,\n  isTypedArray = isTypedArray_1,\n  safeGet$1 = _safeGet,\n  toPlainObject = toPlainObject_1;\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet$1(object, key),\n    srcValue = safeGet$1(source, key),\n    stacked = stack.get(srcValue);\n  if (stacked) {\n    assignMergeValue$1(object, key, stacked);\n    return;\n  }\n  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n  var isCommon = newValue === undefined;\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n      isBuff = !isArr && isBuffer(srcValue),\n      isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      } else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      } else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      } else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      } else {\n        newValue = [];\n      }\n    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      } else if (!isObject$1(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    } else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue$1(object, key, newValue);\n}\nvar _baseMergeDeep = baseMergeDeep$1;\nvar Stack = _Stack,\n  assignMergeValue = _assignMergeValue,\n  baseFor = _baseFor,\n  baseMergeDeep = _baseMergeDeep,\n  isObject = isObject_1,\n  keysIn = keysIn_1,\n  safeGet = _safeGet;\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge$2(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function (srcValue, key) {\n    stack || (stack = new Stack());\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);\n    } else {\n      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\nvar _baseMerge = baseMerge$2;\nvar baseRest = _baseRest,\n  isIterateeCall = _isIterateeCall;\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner$2(assigner) {\n  return baseRest(function (object, sources) {\n    var index = -1,\n      length = sources.length,\n      customizer = length > 1 ? sources[length - 1] : undefined,\n      guard = length > 2 ? sources[2] : undefined;\n    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\nvar _createAssigner = createAssigner$2;\nvar baseMerge$1 = _baseMerge,\n  createAssigner$1 = _createAssigner;\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner$1(function (object, source, srcIndex) {\n  baseMerge$1(object, source, srcIndex);\n});\nvar merge_1 = merge;\nvar baseMerge = _baseMerge,\n  createAssigner = _createAssigner;\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith$1 = createAssigner(function (object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\nvar mergeWith_1 = mergeWith$1;\nvar EAnimationType = /* @__PURE__ */function (EAnimationType2) {\n  EAnimationType2[\"ripple\"] = \"ripple\";\n  EAnimationType2[\"expand\"] = \"expand\";\n  EAnimationType2[\"fade\"] = \"fade\";\n  return EAnimationType2;\n}(EAnimationType || {});\nvar defaultGlobalConfig = merge_1(defaultConfig, zhCn);\nvar configProviderInjectKey = Symbol(\"configProvide\");\nvar mergeWith = function mergeWith(defaultGlobalConfig2, injectConfig) {\n  return mergeWith_1(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {\n    if (isArray_1(objValue)) {\n      return srcValue;\n    }\n  });\n};\nexport { EAnimationType as E, _baseFor as _, mergeWith as a, configProviderInjectKey as c, defaultGlobalConfig as d, merge_1 as m };","map":{"version":3,"names":["createBaseFor$1","fromRight","object","iteratee","keysFunc","index","iterable","Object","props","length","key","_createBaseFor","createBaseFor","baseFor$1","_baseFor","baseAssignValue","_baseAssignValue","eq","eq_1","assignMergeValue$2","value","undefined","_assignMergeValue","safeGet$2","_safeGet","copyObject","_copyObject","keysIn$1","keysIn_1","toPlainObject$1","toPlainObject_1","assignMergeValue$1","cloneBuffer","_cloneBuffer","exports","cloneTypedArray","_cloneTypedArray","copyArray","_copyArray","initCloneObject","_initCloneObject","isArguments","isArguments_1","isArray","isArray_1","isArrayLikeObject","isArrayLikeObject_1","isBuffer","isBuffer$1","isFunction","isFunction_1","isObject$1","isObject_1","isPlainObject","isPlainObject_1","isTypedArray","isTypedArray_1","safeGet$1","toPlainObject","baseMergeDeep$1","source","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","isCommon","isArr","isBuff","isTyped","set","_baseMergeDeep","Stack","_Stack","assignMergeValue","baseFor","baseMergeDeep","isObject","keysIn","safeGet","baseMerge$2","_baseMerge","baseRest","_baseRest","isIterateeCall","_isIterateeCall","createAssigner$2","assigner","sources","guard","_createAssigner","baseMerge$1","createAssigner$1","merge","merge_1","baseMerge","createAssigner","mergeWith$1","mergeWith_1","EAnimationType","EAnimationType2","defaultGlobalConfig","defaultConfig","zhCn","configProviderInjectKey","Symbol","mergeWith","defaultGlobalConfig2","injectConfig"],"sources":["../../node_modules/lodash/_createBaseFor.js","../../node_modules/lodash/_baseFor.js","../../node_modules/lodash/_assignMergeValue.js","../../node_modules/lodash/_safeGet.js","../../node_modules/lodash/toPlainObject.js","../../node_modules/lodash/_baseMergeDeep.js","../../node_modules/lodash/_baseMerge.js","../../node_modules/lodash/_createAssigner.js","../../node_modules/lodash/merge.js","../../node_modules/lodash/mergeWith.js","../../src/config-provider/context.ts"],"sourcesContent":["/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n","var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n","var Stack = require('./_Stack'),\n    assignMergeValue = require('./_assignMergeValue'),\n    baseFor = require('./_baseFor'),\n    baseMergeDeep = require('./_baseMergeDeep'),\n    isObject = require('./isObject'),\n    keysIn = require('./keysIn'),\n    safeGet = require('./_safeGet');\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n","var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nmodule.exports = mergeWith;\n","import { InjectionKey, ComputedRef } from 'vue';\nimport _mergeWith from 'lodash/mergeWith';\nimport merge from 'lodash/merge';\nimport defaultConfig from '../_common/js/global-config/default-config';\nimport defaultZhLocale from '../_common/js/global-config/locale/zh_CN';\nimport { GlobalConfigProvider } from './type';\nimport isArray from 'lodash/isArray';\n\nexport enum EAnimationType {\n  ripple = 'ripple',\n  expand = 'expand',\n  fade = 'fade',\n}\n\nexport const defaultGlobalConfig = merge(defaultConfig, defaultZhLocale);\n\nexport type Locale = typeof defaultZhLocale;\n\nexport const configProviderInjectKey: InjectionKey<ComputedRef<GlobalConfigProvider>> = Symbol('configProvide');\n\nexport const mergeWith = (defaultGlobalConfig: GlobalConfigProvider, injectConfig: GlobalConfigProvider) =>\n  _mergeWith(defaultGlobalConfig, injectConfig, (objValue, srcValue) => {\n    if (isArray(objValue)) {\n      return srcValue;\n    }\n  });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}