{"ast":null,"code":"/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport './dep-eca422c3.mjs';\nimport { _ as _arrayMap } from './dep-7932c2e8.mjs';\nimport { a as _baseClone, _ as _getAllKeysIn } from './dep-5922c8f3.mjs';\nimport { b as _baseGet, c as _castPath, a as _toKey } from './dep-aeaef131.mjs';\nimport { l as last_1 } from './dep-88c8d9ed.mjs';\nimport { _ as _baseSlice } from './dep-2f6e28a0.mjs';\nimport { a as _copyObject } from './dep-92f86d1d.mjs';\nimport { i as isPlainObject_1 } from './dep-1725b1c7.mjs';\nimport { _ as _flatRest } from './dep-4ec29b23.mjs';\nvar baseGet = _baseGet,\n  baseSlice = _baseSlice;\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent$1(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\nvar _parent = parent$1;\nvar castPath$1 = _castPath,\n  last = last_1,\n  parent = _parent,\n  toKey = _toKey;\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset$1(object, path) {\n  path = castPath$1(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\nvar _baseUnset = baseUnset$1;\nvar isPlainObject = isPlainObject_1;\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone$1(value) {\n  return isPlainObject(value) ? undefined : value;\n}\nvar _customOmitClone = customOmitClone$1;\nvar arrayMap = _arrayMap,\n  baseClone = _baseClone,\n  baseUnset = _baseUnset,\n  castPath = _castPath,\n  copyObject = _copyObject,\n  customOmitClone = _customOmitClone,\n  flatRest = _flatRest,\n  getAllKeysIn = _getAllKeysIn;\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n  CLONE_FLAT_FLAG = 2,\n  CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function (object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function (path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\nvar omit_1 = omit;\nexport { _baseUnset as _, omit_1 as o };","map":{"version":3,"names":["baseGet","_baseGet","baseSlice","_baseSlice","parent$1","object","path","length","_parent","castPath$1","_castPath","last","last_1","parent","toKey","_toKey","baseUnset$1","_baseUnset","isPlainObject","isPlainObject_1","customOmitClone$1","value","undefined","_customOmitClone","arrayMap","_arrayMap","baseClone","_baseClone","baseUnset","castPath","copyObject","_copyObject","customOmitClone","flatRest","_flatRest","getAllKeysIn","_getAllKeysIn","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","paths","result","isDeep","omit_1"],"sources":["../../node_modules/lodash/_parent.js","../../node_modules/lodash/_baseUnset.js","../../node_modules/lodash/_customOmitClone.js","../../node_modules/lodash/omit.js"],"sourcesContent":["var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n","var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n","var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n","var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAIA,OAAO,GAAGC,QAAqB;EAC/BC,SAAS,GAAGC,UAAuB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAMA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC5B,OAAOA,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGF,MAAM,GAAGL,OAAO,CAACK,MAAM,EAAEH,SAAS,CAACI,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3E;AAEA,IAAAE,OAAc,GAAGJ,QAAM;ACfvB,IAAIK,UAAQ,GAAGC,SAAsB;EACjCC,IAAI,GAAGC,MAAiB;EACxBC,MAAM,GAAGL,OAAoB;EAC7BM,KAAK,GAAGC,MAAmB;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAASA,CAACX,MAAM,EAAEC,IAAI,EAAE;EAC/BA,IAAI,GAAGG,UAAQ,CAACH,IAAI,EAAED,MAAM,CAAC;EAC7BA,MAAM,GAAGQ,MAAM,CAACR,MAAM,EAAEC,IAAI,CAAC;EAC7B,OAAOD,MAAM,IAAI,IAAI,IAAI,OAAOA,MAAM,CAACS,KAAK,CAACH,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC;AAC3D;AAEA,IAAAW,UAAc,GAAGD,WAAA;ACnBjB,IAAIE,aAAa,GAAGC,eAA0B;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAeA,CAACC,KAAK,EAAE;EAC9B,OAAOH,aAAa,CAACG,KAAK,CAAC,GAAGC,SAAS,GAAGD,KAAK;AACjD;AAEA,IAAAE,gBAAc,GAAGH,iBAAe;ACfhC,IAAII,QAAQ,GAAGC,SAAsB;EACjCC,SAAS,GAAGC,UAAuB;EACnCC,SAAS,GAAGX,UAAuB;EACnCY,QAAQ,GAAGnB,SAAsB;EACjCoB,UAAU,GAAGC,WAAwB;EACrCC,eAAe,GAAGT,gBAA6B;EAC/CU,QAAQ,GAAGC,SAAsB;EACjCC,YAAY,GAAGC,aAA0B;;AAE7C;AACA,IAAIC,eAAe,GAAG,CAAC;EACnBC,eAAe,GAAG,CAAC;EACnBC,kBAAkB,GAAG,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAGP,QAAQ,CAAC,UAAS5B,MAAM,EAAEoC,KAAK,EAAE;EAC1C,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIrC,MAAM,IAAI,IAAI,EAAE;IAClB,OAAOqC,MAAM;EACd;EACD,IAAIC,MAAM,GAAG,KAAK;EAClBF,KAAK,GAAGjB,QAAQ,CAACiB,KAAK,EAAE,UAASnC,IAAI,EAAE;IACrCA,IAAI,GAAGuB,QAAQ,CAACvB,IAAI,EAAED,MAAM,CAAC;IAC7BsC,MAAM,KAAKA,MAAM,GAAGrC,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IACpC,OAAOD,IAAI;EACf,CAAG,CAAC;EACFwB,UAAU,CAACzB,MAAM,EAAE8B,YAAY,CAAC9B,MAAM,CAAC,EAAEqC,MAAM,CAAC;EAChD,IAAIC,MAAM,EAAE;IACVD,MAAM,GAAGhB,SAAS,CAACgB,MAAM,EAAEL,eAAe,GAAGC,eAAe,GAAGC,kBAAkB,EAAEP,eAAe,CAAC;EACpG;EACD,IAAIzB,MAAM,GAAGkC,KAAK,CAAClC,MAAM;EACzB,OAAOA,MAAM,EAAE,EAAE;IACfqB,SAAS,CAACc,MAAM,EAAED,KAAK,CAAClC,MAAM,CAAC,CAAC;EACjC;EACD,OAAOmC,MAAM;AACf,CAAC,CAAC;AAEF,IAAAE,MAAc,GAAGJ,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}