{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v1.10.5\n * (c) 2024 tdesign\n * @license MIT\n */\n\nfunction getNodeDepth(columns, depthMap) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var maxDepth = depth;\n  for (var i = 0, len = columns.length; i < len; i++) {\n    var _col$children;\n    var col = columns[i];\n    depthMap.set(col, depth);\n    if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {\n      var deep = getNodeDepth(col.children, depthMap, depth + 1);\n      if (deep > maxDepth) {\n        maxDepth = deep;\n      }\n    }\n  }\n  return maxDepth;\n}\nfunction getChildrenNodeWidth(node) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var countNew = count;\n  var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];\n  for (var i = 0, len = childrenList.length; i < len; i++) {\n    var item = childrenList[i];\n    if (item.children) {\n      countNew = getChildrenNodeWidth(item, countNew);\n    } else {\n      countNew += 1;\n    }\n  }\n  return countNew;\n}\nfunction getThRowspanAndColspan(columns) {\n  var depthMap = /* @__PURE__ */new Map();\n  var columnsDepth = getNodeDepth(columns, depthMap);\n  var rowspanAndColspanMap = /* @__PURE__ */new Map();\n  var _loop = function loop(nodes, leafColumns2) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var _col$children2;\n      var col = nodes[i];\n      var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;\n      var colspan = col.children ? getChildrenNodeWidth(col) : 1;\n      var span = {};\n      rowspan > 1 && (span.rowspan = rowspan);\n      colspan > 1 && (span.colspan = colspan);\n      rowspanAndColspanMap.set(col, span);\n      if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {\n        _loop(col.children, leafColumns2);\n      } else {\n        leafColumns2.push(col);\n      }\n    }\n  };\n  var leafColumns = [];\n  _loop(columns, leafColumns);\n  return {\n    rowspanAndColspanMap: rowspanAndColspanMap,\n    leafColumns: leafColumns\n  };\n}\nfunction getThList(columns) {\n  var _loop2 = function loop(nodes, thRows) {\n    var _children;\n    var thRowData = [];\n    var children = [];\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var _node$children;\n      var node = nodes[i];\n      var thList = [node];\n      thRowData = thRowData.concat(thList);\n      if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {\n        children = children.concat(node.children);\n      }\n    }\n    if ((_children = children) !== null && _children !== void 0 && _children.length) {\n      _loop2(children, thRows);\n    }\n    thRows.push(thRowData);\n    return thRowData;\n  };\n  var list = [];\n  _loop2(columns, list);\n  list = list.reverse();\n  return list;\n}\nexport { getChildrenNodeWidth, getNodeDepth, getThList, getThRowspanAndColspan };","map":{"version":3,"names":["getNodeDepth","columns","depthMap","depth","arguments","length","undefined","maxDepth","i","len","_col$children","col","set","children","deep","getChildrenNodeWidth","node","count","countNew","childrenList","item","getThRowspanAndColspan","Map","columnsDepth","rowspanAndColspanMap","_loop","loop","nodes","leafColumns2","_col$children2","rowspan","get","colspan","span","push","leafColumns","getThList","_loop2","thRows","_children","thRowData","_node$children","thList","concat","list","reverse"],"sources":["../../../src/table/hooks/useMultiHeader.ts"],"sourcesContent":["/**\n * 多级表头相关逻辑\n ** */\n\nimport { RowspanColspan } from '../type';\nimport { BaseTableColumns, ThRowspanAndColspan } from '../interface';\n\n// 获取节点深度，即表头总层级\nexport function getNodeDepth(columns: BaseTableColumns, depthMap: Map<any, number>, depth = 1): number {\n  let maxDepth = depth;\n  // 树形结构递归已有较多函数上下文，此处不使用 forEach 迭代\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    depthMap.set(col, depth);\n    if (col?.children?.length) {\n      const deep = getNodeDepth(col.children, depthMap, depth + 1);\n      if (deep > maxDepth) {\n        maxDepth = deep;\n      }\n    }\n  }\n  return maxDepth;\n}\n\n// 或当前节点的叶子结点宽度\nexport function getChildrenNodeWidth(node: BaseTableColumns[0], count = 0) {\n  let countNew = count;\n  const childrenList = node?.children || [];\n  for (let i = 0, len = childrenList.length; i < len; i++) {\n    const item = childrenList[i];\n    if (item.children) {\n      countNew = getChildrenNodeWidth(item, countNew);\n    } else {\n      countNew += 1;\n    }\n  }\n  return countNew;\n}\n\n// 获取多级表头对应的 colspan 和 rowspan，以及叶子节点\nexport function getThRowspanAndColspan(columns: BaseTableColumns) {\n  const depthMap = new Map<any, number>();\n  const columnsDepth = getNodeDepth(columns, depthMap);\n  const rowspanAndColspanMap: ThRowspanAndColspan = new Map();\n  const loop = (nodes: BaseTableColumns, leafColumns: BaseTableColumns) => {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const col = nodes[i];\n      const rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;\n      const colspan = col.children ? getChildrenNodeWidth(col) : 1;\n      // 避免存在 rowspan 或者 colspan 空属性\n      const span: RowspanColspan = {};\n      rowspan > 1 && (span.rowspan = rowspan);\n      colspan > 1 && (span.colspan = colspan);\n      rowspanAndColspanMap.set(col, span);\n      if (col?.children?.length) {\n        loop(col.children, leafColumns);\n      } else {\n        leafColumns.push(col);\n      }\n    }\n  };\n  const leafColumns: BaseTableColumns = [];\n  loop(columns, leafColumns);\n  return { rowspanAndColspanMap, leafColumns };\n}\n\n// 表头渲染所需的二维数据\nexport function getThList(columns: BaseTableColumns): Array<BaseTableColumns> {\n  const loop = (nodes: BaseTableColumns, thRows: Array<BaseTableColumns>) => {\n    let thRowData: BaseTableColumns = [];\n    let children: BaseTableColumns = [];\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const node = nodes[i];\n      const thList = [node];\n      thRowData = thRowData.concat(thList);\n      if (node?.children?.length) {\n        children = children.concat(node.children);\n      }\n    }\n    if (children?.length) {\n      loop(children, thRows);\n    }\n    thRows.push(thRowData);\n    return thRowData;\n  };\n  let list: Array<BaseTableColumns> = [];\n  loop(columns, list);\n  list = list.reverse();\n  return list;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}